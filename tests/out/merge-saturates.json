[{"program_text":"(function foo () i64 :merge (min old new))\n\n(set (foo) 0)\n\n; This should break at iteration 0 because the merge doesn't cause any updates\n(rule ((= f (foo))) ((set (foo) 1)))\n(run 100)\n\n\n; This should run for about 50 iterations, because even though the merge doesn't\n; change the value of baz, it has a side effect of expanding the domain of bar.\n\n;(function baz (i64) i64 :default 0)\n\n;(function bar () i64 :merge (min (baz new) 0))\n\n;(set (bar) 1)\n;(set (bar) 2)\n\n;(rule ((= f (baz x)) (< x 50))\n;      ((set (bar) (+ x 1))))\n\n;(run 100)\n;(check (= 0 (baz 50)))\n\n; The exploit above is no longer valid due to the removal of default\n; however, can still do with lookups in merge and constructors/relations\n\n(relation baz (i64))\n\n(function const (Unit) i64 :no-merge)\n\n(set (const ()) 0)\n\n(function bar () i64 :merge (const (baz new)))\n\n(set (bar) 0)\n(set (bar) 1)\n(set (bar) 2)\n\n(rule (\n      (baz x)\n      (< x 50)\n) (\n      (set (bar) (+ x 1))\n))\n\n(run 100)\n(check (baz 50))","evts":[{"sexp_idx":0,"evt":"start","time":{"secs":0,"nanos":1729748}},{"sexp_idx":0,"evt":"end","time":{"secs":0,"nanos":2030403}},{"sexp_idx":1,"evt":"start","time":{"secs":0,"nanos":2030665}},{"sexp_idx":1,"evt":"end","time":{"secs":0,"nanos":2338185}},{"sexp_idx":2,"evt":"start","time":{"secs":0,"nanos":2338399}},{"sexp_idx":2,"evt":"end","time":{"secs":0,"nanos":2480614}},{"sexp_idx":3,"evt":"start","time":{"secs":0,"nanos":2480767}},{"sexp_idx":3,"evt":"end","time":{"secs":0,"nanos":2712687}},{"sexp_idx":4,"evt":"start","time":{"secs":0,"nanos":2712830}},{"sexp_idx":4,"evt":"end","time":{"secs":0,"nanos":2795866}},{"sexp_idx":5,"evt":"start","time":{"secs":0,"nanos":2796054}},{"sexp_idx":5,"evt":"end","time":{"secs":0,"nanos":2850656}},{"sexp_idx":6,"evt":"start","time":{"secs":0,"nanos":2850756}},{"sexp_idx":6,"evt":"end","time":{"secs":0,"nanos":3310528}},{"sexp_idx":7,"evt":"start","time":{"secs":0,"nanos":3310752}},{"sexp_idx":7,"evt":"end","time":{"secs":0,"nanos":3475236}},{"sexp_idx":8,"evt":"start","time":{"secs":0,"nanos":3475403}},{"sexp_idx":8,"evt":"end","time":{"secs":0,"nanos":3879451}},{"sexp_idx":9,"evt":"start","time":{"secs":0,"nanos":3879585}},{"sexp_idx":9,"evt":"end","time":{"secs":0,"nanos":4470737}},{"sexp_idx":10,"evt":"start","time":{"secs":0,"nanos":4470924}},{"sexp_idx":10,"evt":"end","time":{"secs":0,"nanos":5198596}},{"sexp_idx":11,"evt":"start","time":{"secs":0,"nanos":5199194}},{"sexp_idx":11,"evt":"end","time":{"secs":0,"nanos":6146244}},{"sexp_idx":12,"evt":"start","time":{"secs":0,"nanos":6146493}},{"sexp_idx":12,"evt":"end","time":{"secs":0,"nanos":36668325}},{"sexp_idx":13,"evt":"start","time":{"secs":0,"nanos":36668910}},{"sexp_idx":13,"evt":"end","time":{"secs":0,"nanos":37238703}}]}]