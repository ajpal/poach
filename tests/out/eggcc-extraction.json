[{"program_text":"\n(datatype Literal)\n(datatype Expr)\n(datatype Operand)\n(datatype Body)\n\n(sort VecOperandBase (Vec Operand))\n(datatype VecOperand (VO VecOperandBase))\n\n(sort VecVecOperandBase (Vec VecOperand))\n(datatype VecVecOperand (VVO VecVecOperandBase))\n\n;; Type\n(datatype Type\n    (IntT)\n    (BoolT)\n    (FloatT)\n    (CharT)\n    (PointerT Type))\n(datatype EffectType\n    (Bril Type)\n    (PrintState))\n(sort FuncSigs (Vec EffectType))\n(datatype OptionType\n    (SomeType Type)\n    (NoneType))\n;; Literal\n(constructor Num (i64) Literal)\n(constructor Float (f64) Literal)\n(constructor Char (String) Literal)\n(constructor Bool (bool) Literal)\n\n;; Expr\n(datatype ConstOps (const))\n(constructor Const (Type ConstOps Literal) Expr)\n;; Call may return multiple values but at most one of them\n;; is a value type, which is stored in OptionType.\n;; The last fields denotes how many return values it have\n;; Finally, we assume if call ever returns a value, \n;; it has to be the first one.\n(constructor Call (OptionType String VecOperand i64) Expr :cost 1000) ; TODO: fix cost model\n(constructor badd (Type Operand Operand) Expr)\n(constructor bsub (Type Operand Operand) Expr)\n(constructor bmul (Type Operand Operand) Expr)\n(constructor bfmul (Type Operand Operand) Expr)\n(constructor bdiv (Type Operand Operand) Expr)\n(constructor beq (Type Operand Operand) Expr)\n(constructor blt (Type Operand Operand) Expr)\n(constructor bgt (Type Operand Operand) Expr)\n(constructor ble (Type Operand Operand) Expr)\n(constructor bge (Type Operand Operand) Expr)\n(constructor bnot (Type Operand Operand) Expr)\n(constructor band (Type Operand Operand) Expr)\n(constructor bor (Type Operand Operand) Expr)\n(constructor PRINT (Operand Operand) Expr)\n\n;; Operand\n(constructor Arg (i64) Operand)\n(constructor Node (Body) Operand)\n(constructor Project (i64 Body) Operand)\n\n;; Body\n(constructor PureOp (Expr) Body)\n;; branching\n;; predicate (outside switch), inputs (outside switch),\n;; and for each branch a vector of outputs\n(constructor Gamma (Operand VecOperand VecVecOperand) Body)\n;; loops\n;; predicate (inside loop), inputs (outside loop), outputs (inside loop)\n(constructor Theta (Operand VecOperand VecOperand) Body)\n;; A body can also just be a VecOperand for convenience\n;; This has no corresponding node in rust, it can be\n;; removed during translation\n(constructor OperandGroup (VecOperand) Body)\n\n(datatype Function\n    ;;    name   input types    output types    body\n    (Func String FuncSigs       FuncSigs        VecOperand))\n\n\n;; procedure f(n):\n;;   i = 0\n;;   ans = 0\n;;   do:\n;;     ans += i*5;\n;;     i += 1\n;;   while(i < n);\n;;   return ansm\n\n;; ;; inputs: [n]\n; (Project 0\n;     (Theta\n;        ;     i       n\n;         (lt (Arg 1) (Arg 2)) ;; pred\n;         (vec-of ;; inputs\n;             (Node (PureOp (Const 0))) ;; accumulator\n;             (Node (PureOp (Const 0))) ;; loop var\n;             (Arg 0) ;; n\n;             )\n;         (vec-of ;; outputs\n;             (Node (PureOp (add (Arg 0) ;; ans\n;                 (Node (PureOp (mul \n;                     (Arg 1) ;; i\n;                     (Node (PureOp (Const 5))))))))) ;; ans = i*5\n;             (Node (PureOp (add (Arg 1) (Node (PureOp (Const 1)))))) ;; i += 1\n;             (Arg 2) ;; n\n;         ))\n; )\n\n\n\n(ruleset fast-analyses)\n\n          (constructor VecOperand-get (VecOperand i64) Operand)\n          (rule ((VO x) (> (vec-length x) 0))\n                ((union (VecOperand-get (VO x) 0) (vec-get x 0)))\n                :ruleset fast-analyses)\n          (rule ((VecOperand-get (VO x) j)\n                 (= i (+ j 1)) (< i (vec-length x)))\n                ((union (VecOperand-get (VO x) i) (vec-get x i)))\n                :ruleset fast-analyses)\n\n            (function VecOperand-length (VecOperand) i64 :no-merge)\n            (rule ((VO x))\n                  ((set (VecOperand-length (VO x)) (vec-length x)))\n                  :ruleset fast-analyses)\n        \n\n          (constructor VecVecOperand-get (VecVecOperand i64) VecOperand)\n          (rule ((VVO x) (> (vec-length x) 0))\n                ((union (VecVecOperand-get (VVO x) 0) (vec-get x 0)))\n                :ruleset fast-analyses)\n          (rule ((VecVecOperand-get (VVO x) j)\n                 (= i (+ j 1)) (< i (vec-length x)))\n                ((union (VecVecOperand-get (VVO x) i) (vec-get x i)))\n                :ruleset fast-analyses)\n\n            (function VecVecOperand-length (VecVecOperand) i64 :no-merge)\n            (rule ((VVO x))\n                  ((set (VecVecOperand-length (VVO x)) (vec-length x)))\n                  :ruleset fast-analyses)\n        \n\n        (relation Expr-is-pure (Expr))\n        (relation Operand-is-pure (Operand))\n        (relation Body-is-pure (Body))\n        (relation VecOperand-is-pure (VecOperand))\n        (function VecOperand-pure-prefix (VecOperand) i64 :merge (max old new))\n        (relation VecVecOperand-is-pure (VecVecOperand))\n        (function VecVecOperand-pure-prefix (VecVecOperand) i64 :merge (max old new))\n        (relation Function-is-pure (Function))\n    \n\n        (rule ((= f (Const ty ops lit)))\n              ((Expr-is-pure f))\n              :ruleset fast-analyses)\n\n        (rule ((= f (Call ty name args n-outs))\n               (Function-is-pure (Func name input-types output-types body)))\n              ((Expr-is-pure f))\n              :ruleset fast-analyses)\n    \n\n                (rule ((= f (badd type e1 e2))\n                       (Operand-is-pure e1)\n                       (Operand-is-pure e2))\n                      ((Expr-is-pure f))\n                      :ruleset fast-analyses)\n                \n\n                (rule ((= f (bsub type e1 e2))\n                       (Operand-is-pure e1)\n                       (Operand-is-pure e2))\n                      ((Expr-is-pure f))\n                      :ruleset fast-analyses)\n                \n\n                (rule ((= f (bmul type e1 e2))\n                       (Operand-is-pure e1)\n                       (Operand-is-pure e2))\n                      ((Expr-is-pure f))\n                      :ruleset fast-analyses)\n                \n\n                (rule ((= f (bdiv type e1 e2))\n                       (Operand-is-pure e1)\n                       (Operand-is-pure e2))\n                      ((Expr-is-pure f))\n                      :ruleset fast-analyses)\n                \n\n                (rule ((= f (blt type e1 e2))\n                       (Operand-is-pure e1)\n                       (Operand-is-pure e2))\n                      ((Expr-is-pure f))\n                      :ruleset fast-analyses)\n                \n\n        (rule ((= f (Arg x)))\n              ((Operand-is-pure f))\n              :ruleset fast-analyses)\n        (rule ((= f (Node body))\n               (Body-is-pure body))\n              ((Operand-is-pure f))\n              :ruleset fast-analyses)\n        (rule ((= f (Project i body))\n               (Body-is-pure body))\n              ((Operand-is-pure f))\n              :ruleset fast-analyses)\n    \n\n        (rule ((= f (PureOp e))\n               (Expr-is-pure e))\n              ((Body-is-pure f))\n              :ruleset fast-analyses)\n        (rule ((= f (Gamma pred inputs outputs))\n               (Operand-is-pure pred)\n               (VecOperand-is-pure inputs)\n               (VecVecOperand-is-pure outputs))\n              ((Body-is-pure f))\n              :ruleset fast-analyses)\n        (rule ((= f (Theta pred inputs outputs))\n               (Operand-is-pure pred)\n               (VecOperand-is-pure inputs)\n               (VecOperand-is-pure outputs))\n              ((Body-is-pure f))\n              :ruleset fast-analyses)\n        (rule ((= f (OperandGroup vec))\n               (VecOperand-is-pure vec))\n              ((Body-is-pure f))\n              :ruleset fast-analyses)\n    \n\n            (rule ((= f (VO vec)))\n                  ((set (VecOperand-pure-prefix f) 0))\n                  :ruleset fast-analyses)\n            (rule ((= i (VecOperand-pure-prefix f))\n                   (< i (VecOperand-length f))\n                   (Operand-is-pure (VecOperand-get f i)))\n                  ((set (VecOperand-pure-prefix f) (+ i 1)))\n                  :ruleset fast-analyses)\n            (rule ((= (VecOperand-length f) (VecOperand-pure-prefix f)))\n                  ((VecOperand-is-pure f))\n                  :ruleset fast-analyses)\n        \n\n            (rule ((= f (VVO vec)))\n                  ((set (VecVecOperand-pure-prefix f) 0))\n                  :ruleset fast-analyses)\n            (rule ((= i (VecVecOperand-pure-prefix f))\n                   (< i (VecVecOperand-length f))\n                   (VecOperand-is-pure (VecVecOperand-get f i)))\n                  ((set (VecVecOperand-pure-prefix f) (+ i 1)))\n                  :ruleset fast-analyses)\n            (rule ((= (VecVecOperand-length f) (VecVecOperand-pure-prefix f)))\n                  ((VecVecOperand-is-pure f))\n                  :ruleset fast-analyses)\n        \n\n        (rule ((= f (Func name input-types output-types body))\n               (VecOperand-is-pure body))\n              ((Function-is-pure f))\n              :ruleset fast-analyses)\n    \n\n        (relation Body-contains-Expr (Body i64 Expr))\n        (relation Body-contains-Operand (Body i64 Operand))\n        (relation Body-contains-Body (Body i64 Body))\n    \n\n        (rule ((= f (PureOp e)))\n              ((Body-contains-Expr f 0 e))\n              :ruleset fast-analyses)\n        ; A Gamma only contains its outputs\n        (rule ((= f (Gamma pred inputs outputs))\n               (= outputs-i (VecVecOperand-get outputs i))\n               (= x (VecOperand-get outputs-i j)))\n              ((Body-contains-Operand f i x))\n              :ruleset fast-analyses)\n        ; A Theta contains its pred and outputs\n        (rule ((= f (Theta pred inputs outputs)))\n              ((Body-contains-Operand f -1 pred))\n              :ruleset fast-analyses)\n        (rule ((= f (Theta pred inputs outputs))\n               (= x (VecOperand-get outputs i)))\n              ((Body-contains-Operand f i x))\n              :ruleset fast-analyses)\n        (rule ((= f (OperandGroup vec))\n               (= x (VecOperand-get vec i)))\n              ((Body-contains-Operand f i x))\n              :ruleset fast-analyses)\n    \n\n        (rule ((Body-contains-Body f i (PureOp e)))\n              ((Body-contains-Expr f i e))\n              :ruleset fast-analyses)\n        ; A Gamma's pred and inputs are in the outer context\n        (rule ((Body-contains-Body f i (Gamma pred inputs outputs)))\n              ((Body-contains-Operand f i pred))\n              :ruleset fast-analyses)\n        (rule ((Body-contains-Body f i (Gamma pred inputs outputs))\n               (= x (VecOperand-get inputs any)))\n              ((Body-contains-Operand f i x))\n              :ruleset fast-analyses)\n        ; A Theta's inputs are in the outer context\n        (rule ((Body-contains-Body f i (Theta pred inputs outputs))\n                (= x (VecOperand-get inputs any)))\n              ((Body-contains-Operand f i x))\n              :ruleset fast-analyses)\n        (rule ((Body-contains-Body f i (OperandGroup vec))\n               (= x (VecOperand-get vec any)))\n              ((Body-contains-Operand f i x))\n              :ruleset fast-analyses)\n    \n\n        (rule ((Body-contains-Expr f i (Call ty name args n-outs))\n               (= x (VecOperand-get args any)))\n              ((Body-contains-Operand f i x))\n              :ruleset fast-analyses)\n        (rule ((Body-contains-Expr f i (PRINT e1 e2)))\n              ((Body-contains-Operand f i e1)\n               (Body-contains-Operand f i e2))\n              :ruleset fast-analyses)\n    \n\n                (rule ((Body-contains-Expr f i (badd type e1 e2)))\n                      ((Body-contains-Operand f i e1)\n                       (Body-contains-Operand f i e2))\n                      :ruleset fast-analyses)\n                \n\n                (rule ((Body-contains-Expr f i (bsub type e1 e2)))\n                      ((Body-contains-Operand f i e1)\n                       (Body-contains-Operand f i e2))\n                      :ruleset fast-analyses)\n                \n\n                (rule ((Body-contains-Expr f i (bmul type e1 e2)))\n                      ((Body-contains-Operand f i e1)\n                       (Body-contains-Operand f i e2))\n                      :ruleset fast-analyses)\n                \n\n                (rule ((Body-contains-Expr f i (bdiv type e1 e2)))\n                      ((Body-contains-Operand f i e1)\n                       (Body-contains-Operand f i e2))\n                      :ruleset fast-analyses)\n                \n\n                (rule ((Body-contains-Expr f i (blt type e1 e2)))\n                      ((Body-contains-Operand f i e1)\n                       (Body-contains-Operand f i e2))\n                      :ruleset fast-analyses)\n                \n\n        (rule ((Body-contains-Operand f i (Node body)))\n              ((Body-contains-Body f i body))\n              :ruleset fast-analyses)\n        (rule ((Body-contains-Operand f i (Project i body)))\n              ((Body-contains-Body f i body))\n              :ruleset fast-analyses)\n    \n(ruleset subst) (ruleset shift)\n\n        (relation can-subst-Expr-beneath (Body Expr Expr))\n        (relation can-subst-Operand-beneath (Body Operand Operand))\n        (relation can-subst-Body-beneath (Body Body Body))\n        (relation can-subst-VecVecOperand-beneath (Body VecVecOperand VecVecOperand))\n        (relation can-subst-VecOperand-beneath (Body VecOperand VecOperand))\n\n        ;; Base case 'do the substitution' rules\n        (rule ((can-subst-Operand-beneath above from to)\n               (= above     (Theta from inputs outputs)))\n              ((union above (Theta to   inputs outputs)))\n              :ruleset subst)\n        (rule ((can-subst-VecOperand-beneath above from to)\n               (= above     (Theta pred inputs from)))\n              ((union above (Theta pred inputs to)))\n              :ruleset subst)\n        (rule ((can-subst-Operand-beneath above pred-from pred-to)\n               (can-subst-VecOperand-beneath above outputs-from outputs-to)\n               (= above     (Theta pred-from inputs outputs-from)))\n              ((union above (Theta pred-from inputs outputs-to)))\n              :ruleset subst)\n        (rule ((can-subst-VecVecOperand-beneath above from to)\n               (= above     (Gamma pred inputs from)))\n              ((union above (Gamma pred inputs to)))\n              :ruleset subst)\n        (rule ((can-subst-VecOperand-beneath above from to)\n               (= above     (OperandGroup from)))\n              ((union above (OperandGroup to)))\n              :ruleset subst)\n\n        ;; Learn can-subst-Operand-beneath\n        (rule ((can-subst-Body-beneath above from to)\n               (= new-from (Node from)))\n              ((can-subst-Operand-beneath above new-from (Node to)))\n              :ruleset subst)\n        (rule ((can-subst-Body-beneath above from to)\n               (= new-from (Project i from)))\n              ((can-subst-Operand-beneath above new-from (Project i to)))\n              :ruleset subst)\n\n        ;; Learn can-subst-body-beneath\n        (rule ((can-subst-Expr-beneath above from to)\n               (= new-from (PureOp from)))\n              ((can-subst-Body-beneath above new-from (PureOp to)))\n              :ruleset subst)\n        ;; Propagates up same context (Gamma: pred & inputs, Theta: inputs)\n        ;; rtjoa: Is it sound to propagate up outputs if we renumber args?\n        (rule ((can-subst-Operand-beneath above from to)\n               (= new-from (Gamma from inputs outputs)))\n              ((can-subst-Body-beneath above new-from (Gamma to inputs outputs)))\n              :ruleset subst)\n        (rule ((can-subst-VecOperand-beneath above from to)\n               (= new-from (Gamma pred from outputs)))\n              ((can-subst-Body-beneath above new-from (Gamma pred to outputs)))\n              :ruleset subst)\n        (rule ((can-subst-VecOperand-beneath above from to)\n               (= new-from (Theta pred from outputs)))\n              ((can-subst-Body-beneath above new-from (Theta pred to outputs)))\n              :ruleset subst)\n        (rule ((can-subst-VecOperand-beneath above from to)\n               (= new-from (OperandGroup from)))\n              ((can-subst-Body-beneath above new-from (OperandGroup to)))\n              :ruleset subst)\n        \n\n      (rule ((can-subst-VecOperand-beneath above from to)\n              (= new-from (Call ty f from n-outs)))\n             ((can-subst-Expr-beneath above new-from (Call ty f to n-outs)))\n            :ruleset subst)\n\n              (rule ((can-subst-Operand-beneath above from to)\n                      (= new-from (badd type from e2)))\n                     ((can-subst-Expr-beneath above new-from (badd type to e2)))\n                    :ruleset subst)\n              (rule ((can-subst-Operand-beneath above from to)\n                      (= new-from (badd type e1 from)))\n                     ((can-subst-Expr-beneath above new-from (badd type e1 to)))\n                    :ruleset subst)\n                     \n\n              (rule ((can-subst-Operand-beneath above from to)\n                      (= new-from (bsub type from e2)))\n                     ((can-subst-Expr-beneath above new-from (bsub type to e2)))\n                    :ruleset subst)\n              (rule ((can-subst-Operand-beneath above from to)\n                      (= new-from (bsub type e1 from)))\n                     ((can-subst-Expr-beneath above new-from (bsub type e1 to)))\n                    :ruleset subst)\n                     \n\n              (rule ((can-subst-Operand-beneath above from to)\n                      (= new-from (bmul type from e2)))\n                     ((can-subst-Expr-beneath above new-from (bmul type to e2)))\n                    :ruleset subst)\n              (rule ((can-subst-Operand-beneath above from to)\n                      (= new-from (bmul type e1 from)))\n                     ((can-subst-Expr-beneath above new-from (bmul type e1 to)))\n                    :ruleset subst)\n                     \n\n              (rule ((can-subst-Operand-beneath above from to)\n                      (= new-from (bdiv type from e2)))\n                     ((can-subst-Expr-beneath above new-from (bdiv type to e2)))\n                    :ruleset subst)\n              (rule ((can-subst-Operand-beneath above from to)\n                      (= new-from (bdiv type e1 from)))\n                     ((can-subst-Expr-beneath above new-from (bdiv type e1 to)))\n                    :ruleset subst)\n                     \n\n              (rule ((can-subst-Operand-beneath above from to)\n                      (= new-from (blt type from e2)))\n                     ((can-subst-Expr-beneath above new-from (blt type to e2)))\n                    :ruleset subst)\n              (rule ((can-subst-Operand-beneath above from to)\n                      (= new-from (blt type e1 from)))\n                     ((can-subst-Expr-beneath above new-from (blt type e1 to)))\n                    :ruleset subst)\n                     \n\n          (rule ((can-subst-Operand-beneath above from to)\n                 (= from (VecOperand-get (VO vec) i)))\n                ((can-subst-VecOperand-beneath\n                    above\n                    (VO vec)\n                    (VO (vec-set vec i to))))\n                :ruleset subst)\n\n          (rule ((can-subst-VecOperand-beneath above from to)\n                 (= from (VecVecOperand-get (VVO vec) i)))\n                ((can-subst-VecVecOperand-beneath\n                    above\n                    (VVO vec)\n                    (VVO (vec-set vec i to))))\n                :ruleset subst)\n(constructor SubstExpr (Expr i64 Operand) Expr :unextractable)\n(constructor SubstOperand (Operand i64 Operand) Operand :unextractable)\n(constructor SubstBody (Body i64 Operand) Body :unextractable)\n(constructor SubstVecOperand (VecOperand i64 Operand) VecOperand :unextractable)\n(constructor SubstVecVecOperand (VecVecOperand i64 Operand) VecVecOperand :unextractable)\n\n                (rewrite\n                    (SubstExpr (badd ty a b) x0 x1)\n                    (badd\n                        ty\n                        (SubstOperand a x0 x1)\n                        (SubstOperand b x0 x1))\n                    :ruleset subst)\n                     \n\n                (rewrite\n                    (SubstExpr (bsub ty a b) x0 x1)\n                    (bsub\n                        ty\n                        (SubstOperand a x0 x1)\n                        (SubstOperand b x0 x1))\n                    :ruleset subst)\n                     \n\n                (rewrite\n                    (SubstExpr (bmul ty a b) x0 x1)\n                    (bmul\n                        ty\n                        (SubstOperand a x0 x1)\n                        (SubstOperand b x0 x1))\n                    :ruleset subst)\n                     \n\n                (rewrite\n                    (SubstExpr (bdiv ty a b) x0 x1)\n                    (bdiv\n                        ty\n                        (SubstOperand a x0 x1)\n                        (SubstOperand b x0 x1))\n                    :ruleset subst)\n                     \n\n                (rewrite\n                    (SubstExpr (blt ty a b) x0 x1)\n                    (blt\n                        ty\n                        (SubstOperand a x0 x1)\n                        (SubstOperand b x0 x1))\n                    :ruleset subst)\n                     \n\n        (rewrite\n            (SubstExpr (Const ty ops lit) x0 x1)\n            (Const ty ops lit)\n            :ruleset subst)\n        (rewrite\n            (SubstExpr (Call ty f args n-outs) x0 x1)\n            (Call ty f (SubstVecOperand args x0 x1) n-outs)\n            :ruleset subst)\n        (rewrite\n            (SubstExpr (PRINT a b) x0 x1)\n            (PRINT (SubstOperand a x0 x1) (SubstOperand b x0 x1))\n            :ruleset subst)\n\n        (rewrite (SubstOperand (Arg x) x v) v :ruleset subst)\n        (rule ((= f (SubstOperand (Arg y) x v)) (!= y x))\n              ((union f (Arg y))) :ruleset subst)\n\n        (rewrite\n            (SubstOperand (Node b) x0 x1)\n            (Node (SubstBody b x0 x1))\n            :ruleset subst)\n        (rewrite\n            (SubstOperand (Project i b) x0 x1)\n            (Project i (SubstBody b x0 x1))\n            :ruleset subst)\n\n        (rewrite\n            (SubstBody (PureOp e) x0 x1)\n            (PureOp (SubstExpr e x0 x1))\n            :ruleset subst)\n        ;; Don't cross regions, so so we shift into the inputs but not outputs\n        ;; A Gamma's pred is on the outside, so it's affected, but not a Theta's\n        (rewrite\n            (SubstBody (Gamma pred inputs outputs) x0 x1)\n            (Gamma\n                (SubstOperand pred x0 x1)\n                (SubstVecOperand inputs x0 x1)\n                outputs)\n            :ruleset subst)\n        (rewrite\n            (SubstBody (Theta pred inputs outputs) x0 x1)\n            (Theta pred (SubstVecOperand inputs x0 x1) outputs)\n            :ruleset subst)\n\n            (constructor SubstVecOperand-helper (VecOperand i64 Operand i64) VecOperand)\n            (rewrite\n                (SubstVecOperand vec x0 x1)\n                (SubstVecOperand-helper vec x0 x1 0)\n                :ruleset subst)\n            (rule\n                ((= f (SubstVecOperand-helper (VO vec) x0 x1 i))\n                 (< i (vec-length vec)))\n                ((union\n                    (SubstVecOperand-helper (VO vec) x0 x1 i)\n                    (SubstVecOperand-helper\n                        (VO (vec-set vec i (SubstOperand (vec-get vec i) x0 x1)))\n                        x0 x1 (+ i 1))))\n                :ruleset subst)\n            (rule\n                ((= f (SubstVecOperand-helper (VO vec) x0 x1 i))\n                 (= i (vec-length vec)))\n                ((union\n                    (SubstVecOperand-helper (VO vec) x0 x1 i)\n                    (VO vec)))\n                :ruleset subst)\n\n            (constructor SubstVecVecOperand-helper (VecVecOperand i64 Operand i64) VecVecOperand)\n            (rewrite\n                (SubstVecVecOperand vec x0 x1)\n                (SubstVecVecOperand-helper vec x0 x1 0)\n                :ruleset subst)\n            (rule\n                ((= f (SubstVecVecOperand-helper (VVO vec) x0 x1 i))\n                 (< i (vec-length vec)))\n                ((union\n                    (SubstVecVecOperand-helper (VVO vec) x0 x1 i)\n                    (SubstVecVecOperand-helper\n                        (VVO (vec-set vec i (SubstVecOperand (vec-get vec i) x0 x1)))\n                        x0 x1 (+ i 1))))\n                :ruleset subst)\n            (rule\n                ((= f (SubstVecVecOperand-helper (VVO vec) x0 x1 i))\n                 (= i (vec-length vec)))\n                ((union\n                    (SubstVecVecOperand-helper (VVO vec) x0 x1 i)\n                    (VVO vec)))\n                :ruleset subst)\n(constructor SubstExprAll (Expr VecOperand) Expr :unextractable)\n(constructor SubstOperandAll (Operand VecOperand) Operand :unextractable)\n(constructor SubstBodyAll (Body VecOperand) Body :unextractable)\n(constructor SubstVecOperandAll (VecOperand VecOperand) VecOperand :unextractable)\n(constructor SubstVecVecOperandAll (VecVecOperand VecOperand) VecVecOperand :unextractable)\n\n                (rewrite\n                    (SubstExprAll (badd ty a b) x0)\n                    (badd\n                        ty\n                        (SubstOperandAll a x0)\n                        (SubstOperandAll b x0))\n                    :ruleset subst)\n                     \n\n                (rewrite\n                    (SubstExprAll (bsub ty a b) x0)\n                    (bsub\n                        ty\n                        (SubstOperandAll a x0)\n                        (SubstOperandAll b x0))\n                    :ruleset subst)\n                     \n\n                (rewrite\n                    (SubstExprAll (bmul ty a b) x0)\n                    (bmul\n                        ty\n                        (SubstOperandAll a x0)\n                        (SubstOperandAll b x0))\n                    :ruleset subst)\n                     \n\n                (rewrite\n                    (SubstExprAll (bdiv ty a b) x0)\n                    (bdiv\n                        ty\n                        (SubstOperandAll a x0)\n                        (SubstOperandAll b x0))\n                    :ruleset subst)\n                     \n\n                (rewrite\n                    (SubstExprAll (blt ty a b) x0)\n                    (blt\n                        ty\n                        (SubstOperandAll a x0)\n                        (SubstOperandAll b x0))\n                    :ruleset subst)\n                     \n\n        (rewrite\n            (SubstExprAll (Const ty ops lit) x0)\n            (Const ty ops lit)\n            :ruleset subst)\n        (rewrite\n            (SubstExprAll (Call ty f args n-outs) x0)\n            (Call ty f (SubstVecOperandAll args x0) n-outs)\n            :ruleset subst)\n        (rewrite\n            (SubstExprAll (PRINT a b) x0)\n            (PRINT (SubstOperandAll a x0) (SubstOperandAll b x0))\n            :ruleset subst)\n\n        (rule ((= f (SubstOperandAll (Arg x) (VO ops)))\n               (< x (vec-length ops)))\n              ((union f (vec-get ops x))) :ruleset subst)\n\n        (rewrite\n            (SubstOperandAll (Node b) x0)\n            (Node (SubstBodyAll b x0))\n            :ruleset subst)\n        (rewrite\n            (SubstOperandAll (Project i b) x0)\n            (Project i (SubstBodyAll b x0))\n            :ruleset subst)\n\n        (rewrite\n            (SubstBodyAll (PureOp e) x0)\n            (PureOp (SubstExprAll e x0))\n            :ruleset subst)\n        ;; Don't cross regions, so so we shift into the inputs but not outputs\n        ;; A Gamma's pred is on the outside, so it's affected, but not a Theta's\n        (rewrite\n            (SubstBodyAll (Gamma pred inputs outputs) x0)\n            (Gamma\n                (SubstOperandAll pred x0)\n                (SubstVecOperandAll inputs x0)\n                outputs)\n            :ruleset subst)\n        (rewrite\n            (SubstBodyAll (Theta pred inputs outputs) x0)\n            (Theta pred (SubstVecOperandAll inputs x0) outputs)\n            :ruleset subst)\n\n            (constructor SubstVecOperandAll-helper (VecOperand VecOperand i64) VecOperand)\n            (rewrite\n                (SubstVecOperandAll vec x0)\n                (SubstVecOperandAll-helper vec x0 0)\n                :ruleset subst)\n            (rule\n                ((= f (SubstVecOperandAll-helper (VO vec) x0 i))\n                 (< i (vec-length vec)))\n                ((union\n                    (SubstVecOperandAll-helper (VO vec) x0 i)\n                    (SubstVecOperandAll-helper\n                        (VO (vec-set vec i (SubstOperandAll (vec-get vec i) x0)))\n                        x0 (+ i 1))))\n                :ruleset subst)\n            (rule\n                ((= f (SubstVecOperandAll-helper (VO vec) x0 i))\n                 (= i (vec-length vec)))\n                ((union\n                    (SubstVecOperandAll-helper (VO vec) x0 i)\n                    (VO vec)))\n                :ruleset subst)\n\n            (constructor SubstVecVecOperandAll-helper (VecVecOperand VecOperand i64) VecVecOperand)\n            (rewrite\n                (SubstVecVecOperandAll vec x0)\n                (SubstVecVecOperandAll-helper vec x0 0)\n                :ruleset subst)\n            (rule\n                ((= f (SubstVecVecOperandAll-helper (VVO vec) x0 i))\n                 (< i (vec-length vec)))\n                ((union\n                    (SubstVecVecOperandAll-helper (VVO vec) x0 i)\n                    (SubstVecVecOperandAll-helper\n                        (VVO (vec-set vec i (SubstVecOperandAll (vec-get vec i) x0)))\n                        x0 (+ i 1))))\n                :ruleset subst)\n            (rule\n                ((= f (SubstVecVecOperandAll-helper (VVO vec) x0 i))\n                 (= i (vec-length vec)))\n                ((union\n                    (SubstVecVecOperandAll-helper (VVO vec) x0 i)\n                    (VVO vec)))\n                :ruleset subst)\n(constructor ShiftExpr (Expr i64 i64) Expr :unextractable)\n(constructor ShiftOperand (Operand i64 i64) Operand :unextractable)\n(constructor ShiftBody (Body i64 i64) Body :unextractable)\n(constructor ShiftVecOperand (VecOperand i64 i64) VecOperand :unextractable)\n(constructor ShiftVecVecOperand (VecVecOperand i64 i64) VecVecOperand :unextractable)\n\n                (rewrite\n                    (ShiftExpr (badd ty a b) x0 x1)\n                    (badd\n                        ty\n                        (ShiftOperand a x0 x1)\n                        (ShiftOperand b x0 x1))\n                    :ruleset shift)\n                     \n\n                (rewrite\n                    (ShiftExpr (bsub ty a b) x0 x1)\n                    (bsub\n                        ty\n                        (ShiftOperand a x0 x1)\n                        (ShiftOperand b x0 x1))\n                    :ruleset shift)\n                     \n\n                (rewrite\n                    (ShiftExpr (bmul ty a b) x0 x1)\n                    (bmul\n                        ty\n                        (ShiftOperand a x0 x1)\n                        (ShiftOperand b x0 x1))\n                    :ruleset shift)\n                     \n\n                (rewrite\n                    (ShiftExpr (bdiv ty a b) x0 x1)\n                    (bdiv\n                        ty\n                        (ShiftOperand a x0 x1)\n                        (ShiftOperand b x0 x1))\n                    :ruleset shift)\n                     \n\n                (rewrite\n                    (ShiftExpr (blt ty a b) x0 x1)\n                    (blt\n                        ty\n                        (ShiftOperand a x0 x1)\n                        (ShiftOperand b x0 x1))\n                    :ruleset shift)\n                     \n\n        (rewrite\n            (ShiftExpr (Const ty ops lit) x0 x1)\n            (Const ty ops lit)\n            :ruleset shift)\n        (rewrite\n            (ShiftExpr (Call ty f args n-outs) x0 x1)\n            (Call ty f (ShiftVecOperand args x0 x1) n-outs)\n            :ruleset shift)\n        (rewrite\n            (ShiftExpr (PRINT a b) x0 x1)\n            (PRINT (ShiftOperand a x0 x1) (ShiftOperand b x0 x1))\n            :ruleset shift)\n\n        (rule ((= f (ShiftOperand (Arg x) last-unshifted amt)) (<= x last-unshifted))\n              ((union f (Arg x))) :ruleset shift)\n        (rule ((= f (ShiftOperand (Arg x) last-unshifted amt)) (> x last-unshifted))\n              ((union f (Arg (+ x amt)))) :ruleset shift)\n\n        (rewrite\n            (ShiftOperand (Node b) x0 x1)\n            (Node (ShiftBody b x0 x1))\n            :ruleset shift)\n        (rewrite\n            (ShiftOperand (Project i b) x0 x1)\n            (Project i (ShiftBody b x0 x1))\n            :ruleset shift)\n\n        (rewrite\n            (ShiftBody (PureOp e) x0 x1)\n            (PureOp (ShiftExpr e x0 x1))\n            :ruleset shift)\n        ;; Don't cross regions, so so we shift into the inputs but not outputs\n        ;; A Gamma's pred is on the outside, so it's affected, but not a Theta's\n        (rewrite\n            (ShiftBody (Gamma pred inputs outputs) x0 x1)\n            (Gamma\n                (ShiftOperand pred x0 x1)\n                (ShiftVecOperand inputs x0 x1)\n                outputs)\n            :ruleset shift)\n        (rewrite\n            (ShiftBody (Theta pred inputs outputs) x0 x1)\n            (Theta pred (ShiftVecOperand inputs x0 x1) outputs)\n            :ruleset shift)\n\n            (constructor ShiftVecOperand-helper (VecOperand i64 i64 i64) VecOperand)\n            (rewrite\n                (ShiftVecOperand vec x0 x1)\n                (ShiftVecOperand-helper vec x0 x1 0)\n                :ruleset shift)\n            (rule\n                ((= f (ShiftVecOperand-helper (VO vec) x0 x1 i))\n                 (< i (vec-length vec)))\n                ((union\n                    (ShiftVecOperand-helper (VO vec) x0 x1 i)\n                    (ShiftVecOperand-helper\n                        (VO (vec-set vec i (ShiftOperand (vec-get vec i) x0 x1)))\n                        x0 x1 (+ i 1))))\n                :ruleset shift)\n            (rule\n                ((= f (ShiftVecOperand-helper (VO vec) x0 x1 i))\n                 (= i (vec-length vec)))\n                ((union\n                    (ShiftVecOperand-helper (VO vec) x0 x1 i)\n                    (VO vec)))\n                :ruleset shift)\n\n            (constructor ShiftVecVecOperand-helper (VecVecOperand i64 i64 i64) VecVecOperand)\n            (rewrite\n                (ShiftVecVecOperand vec x0 x1)\n                (ShiftVecVecOperand-helper vec x0 x1 0)\n                :ruleset shift)\n            (rule\n                ((= f (ShiftVecVecOperand-helper (VVO vec) x0 x1 i))\n                 (< i (vec-length vec)))\n                ((union\n                    (ShiftVecVecOperand-helper (VVO vec) x0 x1 i)\n                    (ShiftVecVecOperand-helper\n                        (VVO (vec-set vec i (ShiftVecOperand (vec-get vec i) x0 x1)))\n                        x0 x1 (+ i 1))))\n                :ruleset shift)\n            (rule\n                ((= f (ShiftVecVecOperand-helper (VVO vec) x0 x1 i))\n                 (= i (vec-length vec)))\n                ((union\n                    (ShiftVecVecOperand-helper (VVO vec) x0 x1 i)\n                    (VVO vec)))\n                :ruleset shift)\n;; ####################################\n;; implementation of PassThroughArguments\n;; Creates a vec of arguments\n;; (vec-of (Arg 0) (Arg 1) ...) with length i\n(constructor PassThroughArguments (i64) VecOperand :unextractable)\n\n\n\n;; (how many arguments to generate, vector so far)\n(constructor PassThroughArgumentsHelper (i64 VecOperand) VecOperand :unextractable)\n\n(rewrite (PassThroughArguments i)\n  (PassThroughArgumentsHelper i (VO (vec-of)))\n  :ruleset subst)\n\n(rule ((= lhs (PassThroughArgumentsHelper i (VO rest)))\n       (< (vec-length rest) i))\n      ((union lhs\n        (PassThroughArgumentsHelper i\n            (VO (vec-push rest (Arg (vec-length rest)))))))\n      :ruleset subst)\n\n(rule ((= lhs (PassThroughArgumentsHelper i (VO rest)))\n       (= (vec-length rest) i))\n      ((union lhs (VO rest)))\n      :ruleset subst)\n\n\n\n;; Project each argument out of a body\n(constructor BodyToVecOperand (i64 Body) VecOperand :unextractable)\n;; current index, body length, body, and vector so far\n(constructor BodyToVecOperandHelper (i64 i64 Body VecOperandBase) VecOperand :unextractable)\n\n(rewrite (BodyToVecOperand body-len body)\n         (BodyToVecOperandHelper 0 body-len body (vec-of)))\n(rule\n  ((= helper (BodyToVecOperandHelper index body-len body so-far))\n   (< index body-len))\n  ((union helper\n          (BodyToVecOperandHelper (+ index 1) body-len body\n                                  (vec-push so-far \n                                   (Project index body)))))\n  :ruleset subst)\n\n(rule\n  ((= helper (BodyToVecOperandHelper index body-len body so-far))\n   (= index body-len))\n  ((union helper (VO so-far)))\n  :ruleset subst)\n\n\n\n;; constant_fold.rs adds most constant folding operations\n;; this file is for special cases\n\n\n;; eliminate gamma nodes for true and false cases\n(rule ((= gamma\n          ;; gamma predicate is true\n          (Gamma (Node (PureOp (Const (BoolT) (const) (Bool true))))\n                 inputs\n                 (VVO outputs))))\n      (\n        ;; replace use of the gamma with\n        ;; the true case\n        (union\n          gamma\n          (OperandGroup\n              (SubstVecOperandAll\n                (vec-get outputs 1)\n                inputs)))))\n\n\n\n(rule ((= gamma\n          ;; gamma predicate is false\n          (Gamma (Node (PureOp (Const (BoolT) (const) (Bool false))))\n                 inputs\n                 (VVO outputs))))\n      (\n        ;; replace use of the gamma with\n        ;; the false case\n        (union\n          gamma\n          (OperandGroup\n              (SubstVecOperandAll (vec-get outputs 0) inputs)))))\n\n;; Eliminate theta\n;; Unroll one layer and get rid of loop\n(rule ((= theta\n          ;; gamma predicate is false\n          (Theta (Node (PureOp (Const (BoolT) (const) (Bool false))))\n                 (VO inputs)\n                 (VO outputs))))\n      ((let after-one-iter (SubstVecOperandAll (VO outputs) (VO inputs)))\n       (union theta\n          (OperandGroup after-one-iter))))\n\n\n\n\n\n(rewrite (badd output_type\n                    (Node (PureOp (Const ty2 (const) (Num n1))))\n                    (Node (PureOp (Const ty3 (const) (Num n2)))))\n                  (Const output_type (const) (Num (+ n1 n2))))\n(rewrite (bsub output_type\n                    (Node (PureOp (Const ty2 (const) (Num n1))))\n                    (Node (PureOp (Const ty3 (const) (Num n2)))))\n                  (Const output_type (const) (Num (- n1 n2))))\n(rewrite (bmul output_type\n                    (Node (PureOp (Const ty2 (const) (Num n1))))\n                    (Node (PureOp (Const ty3 (const) (Num n2)))))\n                  (Const output_type (const) (Num (* n1 n2))))\n(rewrite (bdiv output_type\n                    (Node (PureOp (Const ty2 (const) (Num n1))))\n                    (Node (PureOp (Const ty3 (const) (Num n2)))))\n                  (Const output_type (const) (Num (/ n1 n2))))\n(rewrite (blt output_type\n                  (Node (PureOp (Const ty2 (const) (Num n1))))\n                  (Node (PureOp (Const ty3 (const) (Num n2)))))\n                (Const output_type (const) (Bool (bool-< n1 n2))))\n(sort TermAndCost)\n(constructor Smaller (TermAndCost TermAndCost) TermAndCost)\n\n;; manual, bottom-up extraction of terms using this function\n(function ExtractedExpr (Expr) TermAndCost\n            :merge (Smaller old new))\n;; Store a term and its cost for this type\n(constructor ExprAndCost (Expr i64) TermAndCost)\n\n;; Perform smaller using the next two rules\n(rule ((= lhs (Smaller (ExprAndCost t1 cost1)\n                       (ExprAndCost t2 cost2)))\n       (<= cost1 cost2))\n      ((union lhs (ExprAndCost t1 cost1)))\n       :ruleset fast-analyses)\n  \n(rule ((= lhs (Smaller (ExprAndCost t1 cost1)\n                       (ExprAndCost t2 cost2)))\n       (> cost1 cost2))\n      ((union lhs (ExprAndCost t2 cost2)))\n       :ruleset fast-analyses)\n\n\n;; manual, bottom-up extraction of terms using this function\n(function ExtractedOperand (Operand) TermAndCost\n            :merge (Smaller old new))\n;; Store a term and its cost for this type\n(constructor OperandAndCost (Operand i64) TermAndCost)\n\n;; Perform smaller using the next two rules\n(rule ((= lhs (Smaller (OperandAndCost t1 cost1)\n                       (OperandAndCost t2 cost2)))\n       (<= cost1 cost2))\n      ((union lhs (OperandAndCost t1 cost1)))\n       :ruleset fast-analyses)\n  \n(rule ((= lhs (Smaller (OperandAndCost t1 cost1)\n                       (OperandAndCost t2 cost2)))\n       (> cost1 cost2))\n      ((union lhs (OperandAndCost t2 cost2)))\n       :ruleset fast-analyses)\n\n\n;; manual, bottom-up extraction of terms using this function\n(function ExtractedBody (Body) TermAndCost\n            :merge (Smaller old new))\n;; Store a term and its cost for this type\n(constructor BodyAndCost (Body i64) TermAndCost)\n\n;; Perform smaller using the next two rules\n(rule ((= lhs (Smaller (BodyAndCost t1 cost1)\n                       (BodyAndCost t2 cost2)))\n       (<= cost1 cost2))\n      ((union lhs (BodyAndCost t1 cost1)))\n       :ruleset fast-analyses)\n  \n(rule ((= lhs (Smaller (BodyAndCost t1 cost1)\n                       (BodyAndCost t2 cost2)))\n       (> cost1 cost2))\n      ((union lhs (BodyAndCost t2 cost2)))\n       :ruleset fast-analyses)\n\n\n;; manual, bottom-up extraction of terms using this function\n(function ExtractedVecOperand (VecOperand) TermAndCost\n            :merge (Smaller old new))\n;; Store a term and its cost for this type\n(constructor VecOperandAndCost (VecOperand i64) TermAndCost)\n\n;; Perform smaller using the next two rules\n(rule ((= lhs (Smaller (VecOperandAndCost t1 cost1)\n                       (VecOperandAndCost t2 cost2)))\n       (<= cost1 cost2))\n      ((union lhs (VecOperandAndCost t1 cost1)))\n       :ruleset fast-analyses)\n  \n(rule ((= lhs (Smaller (VecOperandAndCost t1 cost1)\n                       (VecOperandAndCost t2 cost2)))\n       (> cost1 cost2))\n      ((union lhs (VecOperandAndCost t2 cost2)))\n       :ruleset fast-analyses)\n\n\n;; manual, bottom-up extraction of terms using this function\n(function ExtractedVecVecOperand (VecVecOperand) TermAndCost\n            :merge (Smaller old new))\n;; Store a term and its cost for this type\n(constructor VecVecOperandAndCost (VecVecOperand i64) TermAndCost)\n\n;; Perform smaller using the next two rules\n(rule ((= lhs (Smaller (VecVecOperandAndCost t1 cost1)\n                       (VecVecOperandAndCost t2 cost2)))\n       (<= cost1 cost2))\n      ((union lhs (VecVecOperandAndCost t1 cost1)))\n       :ruleset fast-analyses)\n  \n(rule ((= lhs (Smaller (VecVecOperandAndCost t1 cost1)\n                       (VecVecOperandAndCost t2 cost2)))\n       (> cost1 cost2))\n      ((union lhs (VecVecOperandAndCost t2 cost2)))\n       :ruleset fast-analyses)\n\n\n(rule ((= lhs (badd ty a b))\n       (= (OperandAndCost expr1 cost1) (ExtractedOperand a))\n       (= (OperandAndCost expr2 cost2) (ExtractedOperand b)))\n      ((set (ExtractedExpr lhs)\n            (ExprAndCost (badd ty expr1 expr2)\n                         (+ 1 (+ cost1 cost2)))))\n        :ruleset fast-analyses)\n\n\n(rule ((= lhs (bsub ty a b))\n       (= (OperandAndCost expr1 cost1) (ExtractedOperand a))\n       (= (OperandAndCost expr2 cost2) (ExtractedOperand b)))\n      ((set (ExtractedExpr lhs)\n            (ExprAndCost (bsub ty expr1 expr2)\n                         (+ 1 (+ cost1 cost2)))))\n        :ruleset fast-analyses)\n\n\n(rule ((= lhs (bmul ty a b))\n       (= (OperandAndCost expr1 cost1) (ExtractedOperand a))\n       (= (OperandAndCost expr2 cost2) (ExtractedOperand b)))\n      ((set (ExtractedExpr lhs)\n            (ExprAndCost (bmul ty expr1 expr2)\n                         (+ 1 (+ cost1 cost2)))))\n        :ruleset fast-analyses)\n\n\n(rule ((= lhs (bdiv ty a b))\n       (= (OperandAndCost expr1 cost1) (ExtractedOperand a))\n       (= (OperandAndCost expr2 cost2) (ExtractedOperand b)))\n      ((set (ExtractedExpr lhs)\n            (ExprAndCost (bdiv ty expr1 expr2)\n                         (+ 1 (+ cost1 cost2)))))\n        :ruleset fast-analyses)\n\n\n(rule ((= lhs (blt ty a b))\n       (= (OperandAndCost expr1 cost1) (ExtractedOperand a))\n       (= (OperandAndCost expr2 cost2) (ExtractedOperand b)))\n      ((set (ExtractedExpr lhs)\n            (ExprAndCost (blt ty expr1 expr2)\n                         (+ 1 (+ cost1 cost2)))))\n        :ruleset fast-analyses)\n\n\n(rule ((= lhs (PRINT a b))\n        (= (OperandAndCost expr1 cost1) (ExtractedOperand a))\n        (= (OperandAndCost expr2 cost2) (ExtractedOperand b)))\n      ((set (ExtractedExpr lhs)\n            (ExprAndCost (PRINT expr1 expr2)\n                         (+ 1 (+ cost1 cost2)))))\n      :ruleset fast-analyses)\n\n;; TODO fix this HACK\n;; this is how we get an empty vector of vectors in egglog because of\n;; typechecking bug in egglog https://github.com/egraphs-good/egglog/issues/113\n(let empty-vvo \n  (vec-pop (vec-of (VO (vec-of)))))\n\n\n(function ExtractedVecOperandHelper (VecOperand i64) TermAndCost :merge (Smaller old new))\n\n;; base case: extract nothing\n(rule\n   ((VO vec))\n   ((set (ExtractedVecOperandHelper (VO vec) 0)\n         (VecOperandAndCost (VO (vec-of)) 0)))\n    :ruleset fast-analyses)\n\n;; extract one more thing\n(rule\n   ((= (VecOperandAndCost (VO current) current-cost)\n       (ExtractedVecOperandHelper (VO vec) index))\n    (< index (vec-length vec))\n    (= (ExtractedOperand (VecOperand-get (VO vec) index)) (OperandAndCost expr expr-cost)))\n   ((set (ExtractedVecOperandHelper (VO vec) (+ index 1))\n         (VecOperandAndCost\n             (VO (vec-push current expr))\n             (+ current-cost expr-cost))))\n    :ruleset fast-analyses)\n    \n\n            \n;; finished extracting, create result\n(rule\n  ((= result\n      (ExtractedVecOperandHelper (VO vec) index))\n   ;; at the end\n   (= index (vec-length vec)))\n  ((set (ExtractedVecOperand (VO vec))\n        result))\n  :ruleset fast-analyses)\n      \n\n(function ExtractedVecVecOperandHelper (VecVecOperand i64) TermAndCost :merge (Smaller old new))\n\n;; base case: extract nothing\n(rule\n   ((VVO vec))\n   ((set (ExtractedVecVecOperandHelper (VVO vec) 0)\n         (VecVecOperandAndCost (VVO empty-vvo) 0)))\n    :ruleset fast-analyses)\n\n;; extract one more thing\n(rule\n   ((= (VecVecOperandAndCost (VVO current) current-cost)\n       (ExtractedVecVecOperandHelper (VVO vec) index))\n    (< index (vec-length vec))\n    (= (ExtractedVecOperand (VecVecOperand-get (VVO vec) index)) (VecOperandAndCost expr expr-cost)))\n   ((set (ExtractedVecVecOperandHelper (VVO vec) (+ index 1))\n         (VecVecOperandAndCost\n             (VVO (vec-push current expr))\n             (+ current-cost expr-cost))))\n    :ruleset fast-analyses)\n    \n\n            \n;; finished extracting, create result\n(rule\n  ((= result\n      (ExtractedVecVecOperandHelper (VVO vec) index))\n   ;; at the end\n   (= index (vec-length vec)))\n  ((set (ExtractedVecVecOperand (VVO vec))\n        result))\n  :ruleset fast-analyses)\n      \n\n;; Constant gets cost of 1\n(rule\n  ((= lhs (Const ty ops lit)))\n  ((set (ExtractedExpr lhs) (ExprAndCost lhs 1)))\n  :ruleset fast-analyses)\n\n;; arg gets cost of 1\n(rule\n  ((= lhs (Arg index)))\n  ((set (ExtractedOperand lhs) (OperandAndCost lhs 1)))\n  :ruleset fast-analyses)\n\n\n;; PureOp doesn't add cost\n(rule\n  ((= lhs (PureOp expr))\n   (= (ExprAndCost expr-extracted expr-cost)\n      (ExtractedExpr expr)))\n   ((set (ExtractedBody lhs) (BodyAndCost (PureOp expr-extracted) expr-cost)))\n    :ruleset fast-analyses)\n\n;; Nor does Node\n(rule\n  ((= lhs (Node body))\n   (= (BodyAndCost body-extracted body-cost)\n      (ExtractedBody body)))\n   ((set (ExtractedOperand lhs) (OperandAndCost (Node body-extracted) body-cost)))\n    :ruleset fast-analyses)\n\n;; Theta gets a cost of 1 for now\n(rule\n  ((= lhs (Theta pred inputs outputs))\n   (= (OperandAndCost pred-extracted pred-cost)\n      (ExtractedOperand pred))\n   (= (VecOperandAndCost inputs-extracted inputs-cost)\n      (ExtractedVecOperand inputs))\n   (= (VecOperandAndCost outputs-extracted outputs-cost)\n      (ExtractedVecOperand outputs)))\n   ((set (ExtractedBody lhs)\n         (BodyAndCost\n            (Theta pred-extracted inputs-extracted outputs-extracted)\n            (+ 1 (+ pred-cost (+ inputs-cost outputs-cost))))))\n    :ruleset fast-analyses)\n\n;; Gamma gets a cost of 1 for now\n(rule\n  ((= lhs (Gamma pred inputs outputs))\n   (= (OperandAndCost pred-extracted pred-cost)\n      (ExtractedOperand pred))\n   (= (VecOperandAndCost inputs-extracted inputs-cost)\n      (ExtractedVecOperand inputs))\n   (= (VecVecOperandAndCost outputs-extracted outputs-cost)\n      (ExtractedVecVecOperand outputs)))\n  ((set (ExtractedBody lhs)\n        (BodyAndCost\n          (Gamma pred-extracted inputs-extracted outputs-extracted)\n          (+ 1 (+ pred-cost (+ inputs-cost outputs-cost))))))\n    :ruleset fast-analyses)\n\n\n;; Project is also free\n(rule ((= lhs (Project index body))\n       (= (BodyAndCost body-extracted body-cost)\n          (ExtractedBody body)))\n      ((set (ExtractedOperand lhs)\n            (OperandAndCost (Project index body-extracted) body-cost)))\n      :ruleset fast-analyses)\n        \n\n\n;; If a theta passes along argument,\n;; can extract the input instead.\n(rule ((= lhs (Project index loop))\n        (= loop (Theta pred inputs outputs))\n        (= (VecOperand-get outputs index) (Arg index))\n        (= passedthrough (ExtractedOperand (VecOperand-get inputs index)))\n      )\n      ((set (ExtractedOperand lhs) passedthrough))\n      :ruleset fast-analyses)\n\n;; If a gamma passes along an argument in both branches,\n;; extract the input instead.\n(rule ((= lhs (Project index loop))\n       (= loop (Gamma pred inputs outputs))\n       (= outputs (VVO outputs-inner))\n       (= 2 (vec-length outputs-inner))\n       (= outputs0 (VecVecOperand-get outputs 0))\n       (= outputs1 (VecVecOperand-get outputs 1))\n       (= (VecOperand-get outputs0 index) (Arg index))\n       (= (VecOperand-get outputs1 index) (Arg index))\n       (= passedthrough (ExtractedOperand (VecOperand-get inputs index))))\n      ((set (ExtractedOperand lhs) passedthrough))\n      :ruleset fast-analyses)\n\n\n;; if we reach a new context, union\n(rule ((= theta (Theta pred inputs outputs))\n       (= (BodyAndCost extracted cost)\n          (ExtractedBody theta)))\n      ((union theta extracted))\n      :ruleset fast-analyses)\n(rule ((= gamma (Gamma pred inputs outputs))\n       (= (BodyAndCost extracted cost)\n          (ExtractedBody gamma)))\n      ((union gamma extracted))\n      :ruleset fast-analyses)\n\n\n;; if we reach the function at the top level, union\n(rule ((= func (Func name intypes outtypes body))\n       (= (VecOperandAndCost extracted cost)\n          (ExtractedVecOperand body)))\n      ((union func\n              (Func name intypes outtypes extracted)))\n      :ruleset fast-analyses)\n        \n;;\tif a && b:\n;;\t\tA\n;;\telse:\n;;\t\tB\n;; ----------\n;;\tif a:\n;;\t\tif b:\n;;\t\t\tA\n;;\t\telse:\n;;\t\t\tB\n;;\telse:\n;;\t\tB\n(rule ((= gamma (Gamma (Node (PureOp (band (BoolT) a b))) (VO inputs) (VVO outputs)))\n       (= (vec-length outputs) 2)\n       (= (vec-get outputs 1) (VO A))\n       (= (vec-get outputs 0) (VO B))\n       (= args (vec-length inputs))\n       (= rets (vec-length B)))\n      ((let inner (Gamma (Arg args) ; we pass b as an extra argument to the outer gamma\n                         (PassThroughArguments args)\n                         (VVO (vec-of (VO B)\n                                      (VO A)))))\n       (union gamma (Gamma a\n                           (VO (vec-push inputs b)) ; pass b as an extra argument\n                           (VVO (vec-of (VO B)\n                                        (BodyToVecOperand rets inner)))))))\n\n;;\tif a || b:\n;;\t\tA\n;;\telse:\n;;\t\tB\n;; -----------\n;;\tif a:\n;;\t\tA\n;;\telse:\n;;\t\tif b:\n;;\t\t\tA\n;;\t\telse:\n;;\t\t\tB\n(rule ((= gamma (Gamma (Node (PureOp (bor (BoolT) a b))) (VO inputs) (VVO outputs)))\n       (= (vec-length outputs) 2)\n       (= (vec-get outputs 1) (VO A))\n       (= (vec-get outputs 0) (VO B))\n       (= args (vec-length inputs))\n       (= rets (vec-length B)))\n      ((let inner (Gamma (Arg args) ; we pass b as an extra argument to the outer gamma\n                         (PassThroughArguments args)\n                         (VVO (vec-of (VO B)\n                                      (VO A)))))\n       (union gamma (Gamma a\n                           (VO (vec-push inputs b)) ; pass b as an extra argument\n                           (VVO (vec-of (BodyToVecOperand rets inner)\n                                        (VO A)))))))\n\n;;\tif a:\n;;\t\tA\n;;\telse:\n;;\t\tA\n;; ------\n;;\tA\n(rule ((= gamma (Gamma condition inputs (VVO outputs)))\n       (= (vec-length outputs) 2)\n       (= (vec-get outputs 0) (vec-get outputs 1)))\n      ((union gamma (OperandGroup (SubstVecOperandAll (vec-get outputs 0) inputs)))))\n\n\n;; unroll loops\n(rule ((= theta (Theta pred (VO inputs) (VO outputs))))\n                          ;;            arguments body\n      ((let after-one-iter\n         (SubstVecOperandAll (VO outputs) (VO inputs)))\n       ;; (vec-of (Arg 0) (Arg 1) ...)\n       (let pass-through (PassThroughArguments (vec-length outputs)))\n       (union theta\n          (Gamma\n            (SubstOperandAll pred after-one-iter)\n            after-one-iter\n            (VVO\n              (vec-of\n                ;; in the false case, we are done\n                pass-through\n                ;; otherwise do the rest of the loop\n                (BodyToVecOperand\n                (vec-length outputs)\n                (Theta pred pass-through\n                            (VO outputs)))))))))\n\n\n\n(datatype Interval\n  (BoolI bool bool)\n  (IntI i64 i64)\n  (interval-intersect Interval Interval)\n  (interval-union Interval Interval))\n\n\n(rewrite (interval-intersect (IntI la ha) (IntI lb hb))\n      (IntI (max la lb) (min ha hb)))\n(rewrite (interval-union (IntI la ha) (IntI lb hb))\n      (IntI (min la lb) (max ha hb)))\n\n(rewrite (interval-intersect (BoolI la ha) (BoolI lb hb))\n      (BoolI (or la lb) (and ha hb)))\n(rewrite (interval-union (BoolI la ha) (BoolI lb hb))\n      (BoolI (and la lb) (or ha hb)))\n\n(function ival (Operand) Interval\n  :merge (interval-intersect old new))\n\n; context-specific intervals (because Args need to have interval analysis but are not globally unique)\n(function context-ival (Operand Body) Interval\n  :merge (interval-intersect old new))\n\n(rule ((= lhs (Node (PureOp (Const (BoolT) (const) (Bool b))))))\n      ((set (ival lhs) (BoolI b b))))\n\n(rule ((= lhs (Node (PureOp (Const (IntT) (const) (Num n))))))\n      ((set (ival lhs) (IntI n n))))\n\n\n; < a b interval (< ha lb) (< la hb)\n(rule ((= lhs (Node (PureOp (blt (BoolT) a b))))\n       (= (IntI la ha) (ival a))\n       (= (IntI lb hb) (ival b)))\n      ((set (ival lhs) (BoolI (bool-< ha lb) (bool-< la hb)))))\n\n; Rule that unions intervals for a gamma\n(rule (\n        (= lhs (Project i (Gamma pred ins (VVO outs))))\n        (= (VO thens) (vec-get outs 1))\n        (= (VO elses) (vec-get outs 0))\n        (= thenival (ival (vec-get thens i)))\n        (= elseival (ival (vec-get elses i)))\n      )\n      (\n        (set (ival lhs) (interval-union thenival elseival))\n      )\n)\n\n; Eliminate gamma with interval analysis\n(rule (\n        (= gamma (Gamma pred inputs (VVO outputs)))\n        (= (BoolI true true) (ival pred))\n      )\n      (\n        (union gamma (OperandGroup (SubstVecOperandAll (vec-get outputs 1) inputs)))\n      )\n)\n(rule (\n        (= gamma (Gamma pred inputs (VVO outputs)))\n        (= (BoolI false false) (ival pred))\n      )\n      (\n        (union gamma (OperandGroup (SubstVecOperandAll (vec-get outputs 0) inputs)))\n      )\n)\n\n(rule  \n    (\n        ; Match on PureOp because all exprs are converted to bodies\n        ; Will refactor Call in the future\n        (= return (PureOp (Call ty name args num)) )\n        (Func name input-types output-types body)\n    )\n    ((\n        union \n        return\n        (OperandGroup (SubstVecOperandAll body args))\n    ))\n)\n\n     (rule\n      ((= num (Node (PureOp (Const (IntT) (const) (Num n1)))))\n       (= lhs (badd (IntT) other num)))\n      ((union lhs (badd (IntT) num other))))\n\n     (rule\n      ((= num (Node (PureOp (Const (IntT) (const) (Num n1)))))\n       (= lhs (bmul (IntT) other num)))\n      ((union lhs (bmul (IntT) num other))))\n\n      (rule\n        ((= lhs (badd (IntT)\n                      (Node (PureOp (badd (IntT) a b)))\n                      c)))\n        ((union lhs\n                (badd (IntT)\n                      a\n                      (Node (PureOp (badd (IntT) b c)))))))\n      \n\n        (rule\n          ((= lhs (badd (IntT)\n                        a\n                        (Node (PureOp (badd (IntT) b c)))))\n           (= b (Node (PureOp (Const (IntT) (const) (Num n1)))))            \n          )\n          ((union lhs\n             (badd (IntT)\n                   b\n                   (Node (PureOp (badd (IntT) a c))))))               \n        )\n      \n\n      (rule\n        ((= lhs (badd (IntT)\n                      a\n                      (Node (PureOp (badd (IntT) b c)))))\n         (= a (Node (PureOp (Const (IntT) (const) (Num n1)))))\n         (= b (Node (PureOp (Const (IntT) (const) (Num n2))))))\n\n        ((union lhs\n          (badd (IntT)\n            (Node (PureOp (Const (IntT) (const) (Num (+ n1 n2)))))\n            c))))      \n\n\n(let v0 \"main\")\n(let v1 (IntT))\n(let v2 (Bril v1))\n(let v3 (PrintState))\n(let v4 (vec-of v2 v2 v3))\n(let v5 (vec-of v3))\n(let v6 1)\n(let v7 2)\n(let v8 (BoolT))\n(let v9 (Arg v6))\n(let v10 4)\n(let v11 (Arg v10))\n(let v12 (blt v8 v9 v11))\n(let v13 (PureOp v12))\n(let v14 (Node v13))\n(let v15 0)\n(let v16 (Arg v15))\n(let v17 (Arg v7))\n(let v18 3)\n(let v19 (Arg v18))\n(let v20 (vec-of v16 v9 v17 v19 v11))\n(let v21 (VO v20))\n(let v22 (const))\n(let v23 (Num v15))\n(let v24 (Const v1 v22 v23))\n(let v25 (PureOp v24))\n(let v26 (Node v25))\n(let v27 (vec-of v16 v9 v26 v17 v19 v11))\n(let v28 (VO v27))\n(let v29 (blt v8 v19 v11))\n(let v30 (PureOp v29))\n(let v31 (Node v30))\n(let v32 5)\n(let v33 (Arg v32))\n(let v34 (vec-of v16 v9 v17 v19 v11 v33))\n(let v35 (VO v34))\n(let v36 (vec-of v16 v9 v17 v26 v19 v11 v33))\n(let v37 (VO v36))\n(let v38 (bmul v1 v9 v11))\n(let v39 (PureOp v38))\n(let v40 (Node v39))\n(let v41 (badd v1 v40 v19))\n(let v42 (PureOp v41))\n(let v43 (Node v42))\n(let v44 (PRINT v43 v16))\n(let v45 (PureOp v44))\n(let v46 (Node v45))\n(let v47 (Num v6))\n(let v48 (Const v1 v22 v47))\n(let v49 (PureOp v48))\n(let v50 (Node v49))\n(let v51 (badd v1 v19 v17))\n(let v52 (PureOp v51))\n(let v53 (Node v52))\n(let v54 (vec-of v46 v9 v17 v50 v53 v11 v33))\n(let v55 (VO v54))\n(let v56 (vec-of v37 v55))\n(let v57 (VVO v56))\n(let v58 (Gamma v31 v35 v57))\n(let v59 (Project v18 v58))\n(let v60 (vec-of v16 v9 v17 v26 v19 v11))\n(let v61 (VO v60))\n(let v62 (Project v15 v58))\n(let v63 (Project v6 v58))\n(let v64 (Project v7 v58))\n(let v65 (Project v10 v58))\n(let v66 (Project v32 v58))\n(let v67 6)\n(let v68 (Project v67 v58))\n(let v69 (vec-of v62 v63 v64 v65 v66 v68))\n(let v70 (VO v69))\n(let v71 (Theta v59 v61 v70))\n(let v72 (Project v15 v71))\n(let v73 (Project v6 v71))\n(let v74 (Project v7 v71))\n(let v75 (badd v1 v73 v74))\n(let v76 (PureOp v75))\n(let v77 (Node v76))\n(let v78 (Project v10 v71))\n(let v79 (Project v32 v71))\n(let v80 (vec-of v72 v77 v50 v74 v78 v79))\n(let v81 (VO v80))\n(let v82 (vec-of v28 v81))\n(let v83 (VVO v82))\n(let v84 (Gamma v14 v21 v83))\n(let v85 (Project v7 v84))\n(let v86 (vec-of v17 v26 v50 v9 v16))\n(let v87 (VO v86))\n(let v88 (Project v15 v84))\n(let v89 (Project v6 v84))\n(let v90 (Project v18 v84))\n(let v91 (Project v10 v84))\n(let v92 (Project v32 v84))\n(let v93 (vec-of v88 v89 v90 v91 v92))\n(let v94 (VO v93))\n(let v95 (Theta v85 v87 v94))\n(let v96 (Project v6 v95))\n(let v97 (Project v15 v95))\n(let v98 (PRINT v96 v97))\n(let v99 (PureOp v98))\n(let v100 (Node v99))\n(let v101 (vec-of v100))\n(let v102 (VO v101))\n(let v103 (Func v0 v4 v5 v102))\n\n(run-schedule\n        ; only repeating twice to reduce benchmark CI performance\n        ; increasing to 3 times will change benchmark time from 4 minutes to 40+ minutes\n        (repeat 2 (saturate fast-analyses)\n                  (run)\n                  (saturate subst)))","evts":[{"sexp_idx":0,"evt":"start","time":{"secs":0,"nanos":6173905}},{"sexp_idx":0,"evt":"end","time":{"secs":0,"nanos":6209045}},{"sexp_idx":1,"evt":"start","time":{"secs":0,"nanos":6209241}},{"sexp_idx":1,"evt":"end","time":{"secs":0,"nanos":6213314}},{"sexp_idx":2,"evt":"start","time":{"secs":0,"nanos":6213503}},{"sexp_idx":2,"evt":"end","time":{"secs":0,"nanos":6281477}},{"sexp_idx":3,"evt":"start","time":{"secs":0,"nanos":6281648}},{"sexp_idx":3,"evt":"end","time":{"secs":0,"nanos":6285870}},{"sexp_idx":4,"evt":"start","time":{"secs":0,"nanos":6285932}},{"sexp_idx":4,"evt":"end","time":{"secs":0,"nanos":6503871}},{"sexp_idx":5,"evt":"start","time":{"secs":0,"nanos":6504027}},{"sexp_idx":5,"evt":"end","time":{"secs":0,"nanos":6629582}},{"sexp_idx":6,"evt":"start","time":{"secs":0,"nanos":6629697}},{"sexp_idx":6,"evt":"end","time":{"secs":0,"nanos":6659633}},{"sexp_idx":7,"evt":"start","time":{"secs":0,"nanos":6659695}},{"sexp_idx":7,"evt":"end","time":{"secs":0,"nanos":6731370}},{"sexp_idx":8,"evt":"start","time":{"secs":0,"nanos":6731668}},{"sexp_idx":8,"evt":"end","time":{"secs":0,"nanos":7022491}},{"sexp_idx":9,"evt":"start","time":{"secs":0,"nanos":7022628}},{"sexp_idx":9,"evt":"end","time":{"secs":0,"nanos":7170320}},{"sexp_idx":10,"evt":"start","time":{"secs":0,"nanos":7170483}},{"sexp_idx":10,"evt":"end","time":{"secs":0,"nanos":7201954}},{"sexp_idx":11,"evt":"start","time":{"secs":0,"nanos":7202026}},{"sexp_idx":11,"evt":"end","time":{"secs":0,"nanos":7347996}},{"sexp_idx":12,"evt":"start","time":{"secs":0,"nanos":7348108}},{"sexp_idx":12,"evt":"end","time":{"secs":0,"nanos":7420796}},{"sexp_idx":13,"evt":"start","time":{"secs":0,"nanos":7420883}},{"sexp_idx":13,"evt":"end","time":{"secs":0,"nanos":7489171}},{"sexp_idx":14,"evt":"start","time":{"secs":0,"nanos":7489251}},{"sexp_idx":14,"evt":"end","time":{"secs":0,"nanos":7563972}},{"sexp_idx":15,"evt":"start","time":{"secs":0,"nanos":7564131}},{"sexp_idx":15,"evt":"end","time":{"secs":0,"nanos":7646607}},{"sexp_idx":16,"evt":"start","time":{"secs":0,"nanos":7646694}},{"sexp_idx":16,"evt":"end","time":{"secs":0,"nanos":7757147}},{"sexp_idx":17,"evt":"start","time":{"secs":0,"nanos":7757240}},{"sexp_idx":17,"evt":"end","time":{"secs":0,"nanos":7876502}},{"sexp_idx":18,"evt":"start","time":{"secs":0,"nanos":7876711}},{"sexp_idx":18,"evt":"end","time":{"secs":0,"nanos":7996035}},{"sexp_idx":19,"evt":"start","time":{"secs":0,"nanos":7996127}},{"sexp_idx":19,"evt":"end","time":{"secs":0,"nanos":8096975}},{"sexp_idx":20,"evt":"start","time":{"secs":0,"nanos":8097245}},{"sexp_idx":20,"evt":"end","time":{"secs":0,"nanos":8185583}},{"sexp_idx":21,"evt":"start","time":{"secs":0,"nanos":8185804}},{"sexp_idx":21,"evt":"end","time":{"secs":0,"nanos":8291122}},{"sexp_idx":22,"evt":"start","time":{"secs":0,"nanos":8291421}},{"sexp_idx":22,"evt":"end","time":{"secs":0,"nanos":8413979}},{"sexp_idx":23,"evt":"start","time":{"secs":0,"nanos":8414224}},{"sexp_idx":23,"evt":"end","time":{"secs":0,"nanos":8520582}},{"sexp_idx":24,"evt":"start","time":{"secs":0,"nanos":8520775}},{"sexp_idx":24,"evt":"end","time":{"secs":0,"nanos":8617795}},{"sexp_idx":25,"evt":"start","time":{"secs":0,"nanos":8617947}},{"sexp_idx":25,"evt":"end","time":{"secs":0,"nanos":8697631}},{"sexp_idx":26,"evt":"start","time":{"secs":0,"nanos":8697795}},{"sexp_idx":26,"evt":"end","time":{"secs":0,"nanos":8801943}},{"sexp_idx":27,"evt":"start","time":{"secs":0,"nanos":8802091}},{"sexp_idx":27,"evt":"end","time":{"secs":0,"nanos":8894738}},{"sexp_idx":28,"evt":"start","time":{"secs":0,"nanos":8894895}},{"sexp_idx":28,"evt":"end","time":{"secs":0,"nanos":8997311}},{"sexp_idx":29,"evt":"start","time":{"secs":0,"nanos":8997394}},{"sexp_idx":29,"evt":"end","time":{"secs":0,"nanos":9167938}},{"sexp_idx":30,"evt":"start","time":{"secs":0,"nanos":9168189}},{"sexp_idx":30,"evt":"end","time":{"secs":0,"nanos":9412318}},{"sexp_idx":31,"evt":"start","time":{"secs":0,"nanos":9412769}},{"sexp_idx":31,"evt":"end","time":{"secs":0,"nanos":9572227}},{"sexp_idx":32,"evt":"start","time":{"secs":0,"nanos":9572412}},{"sexp_idx":32,"evt":"end","time":{"secs":0,"nanos":9709855}},{"sexp_idx":33,"evt":"start","time":{"secs":0,"nanos":9710135}},{"sexp_idx":33,"evt":"end","time":{"secs":0,"nanos":9873159}},{"sexp_idx":34,"evt":"start","time":{"secs":0,"nanos":9873582}},{"sexp_idx":34,"evt":"end","time":{"secs":0,"nanos":10085543}},{"sexp_idx":35,"evt":"start","time":{"secs":0,"nanos":10085949}},{"sexp_idx":35,"evt":"end","time":{"secs":0,"nanos":10234836}},{"sexp_idx":36,"evt":"start","time":{"secs":0,"nanos":10235078}},{"sexp_idx":36,"evt":"end","time":{"secs":0,"nanos":10369150}},{"sexp_idx":37,"evt":"start","time":{"secs":0,"nanos":10369311}},{"sexp_idx":37,"evt":"end","time":{"secs":0,"nanos":10534693}},{"sexp_idx":38,"evt":"start","time":{"secs":0,"nanos":10534929}},{"sexp_idx":38,"evt":"end","time":{"secs":0,"nanos":10651600}},{"sexp_idx":39,"evt":"start","time":{"secs":0,"nanos":10651697}},{"sexp_idx":39,"evt":"end","time":{"secs":0,"nanos":10762136}},{"sexp_idx":40,"evt":"start","time":{"secs":0,"nanos":10762343}},{"sexp_idx":40,"evt":"end","time":{"secs":0,"nanos":10912101}},{"sexp_idx":41,"evt":"start","time":{"secs":0,"nanos":10912283}},{"sexp_idx":41,"evt":"end","time":{"secs":0,"nanos":10923644}},{"sexp_idx":42,"evt":"start","time":{"secs":0,"nanos":10923726}},{"sexp_idx":42,"evt":"end","time":{"secs":0,"nanos":11026834}},{"sexp_idx":43,"evt":"start","time":{"secs":0,"nanos":11027223}},{"sexp_idx":43,"evt":"end","time":{"secs":0,"nanos":11925175}},{"sexp_idx":44,"evt":"start","time":{"secs":0,"nanos":11925519}},{"sexp_idx":44,"evt":"end","time":{"secs":0,"nanos":12752810}},{"sexp_idx":45,"evt":"start","time":{"secs":0,"nanos":12753047}},{"sexp_idx":45,"evt":"end","time":{"secs":0,"nanos":12898793}},{"sexp_idx":46,"evt":"start","time":{"secs":0,"nanos":12898995}},{"sexp_idx":46,"evt":"end","time":{"secs":0,"nanos":13103576}},{"sexp_idx":47,"evt":"start","time":{"secs":0,"nanos":13103870}},{"sexp_idx":47,"evt":"end","time":{"secs":0,"nanos":13216954}},{"sexp_idx":48,"evt":"start","time":{"secs":0,"nanos":13217134}},{"sexp_idx":48,"evt":"end","time":{"secs":0,"nanos":13761331}},{"sexp_idx":49,"evt":"start","time":{"secs":0,"nanos":13761616}},{"sexp_idx":49,"evt":"end","time":{"secs":0,"nanos":14617457}},{"sexp_idx":50,"evt":"start","time":{"secs":0,"nanos":14617818}},{"sexp_idx":50,"evt":"end","time":{"secs":0,"nanos":14731073}},{"sexp_idx":51,"evt":"start","time":{"secs":0,"nanos":14731270}},{"sexp_idx":51,"evt":"end","time":{"secs":0,"nanos":14915572}},{"sexp_idx":52,"evt":"start","time":{"secs":0,"nanos":14915810}},{"sexp_idx":52,"evt":"end","time":{"secs":0,"nanos":15028405}},{"sexp_idx":53,"evt":"start","time":{"secs":0,"nanos":15028624}},{"sexp_idx":53,"evt":"end","time":{"secs":0,"nanos":15107048}},{"sexp_idx":54,"evt":"start","time":{"secs":0,"nanos":15107256}},{"sexp_idx":54,"evt":"end","time":{"secs":0,"nanos":15177309}},{"sexp_idx":55,"evt":"start","time":{"secs":0,"nanos":15177476}},{"sexp_idx":55,"evt":"end","time":{"secs":0,"nanos":15248800}},{"sexp_idx":56,"evt":"start","time":{"secs":0,"nanos":15248956}},{"sexp_idx":56,"evt":"end","time":{"secs":0,"nanos":15421175}},{"sexp_idx":57,"evt":"start","time":{"secs":0,"nanos":15421606}},{"sexp_idx":57,"evt":"end","time":{"secs":0,"nanos":15500406}},{"sexp_idx":58,"evt":"start","time":{"secs":0,"nanos":15500478}},{"sexp_idx":58,"evt":"end","time":{"secs":0,"nanos":15676040}},{"sexp_idx":59,"evt":"start","time":{"secs":0,"nanos":15676316}},{"sexp_idx":59,"evt":"end","time":{"secs":0,"nanos":15750422}},{"sexp_idx":60,"evt":"start","time":{"secs":0,"nanos":15750506}},{"sexp_idx":60,"evt":"end","time":{"secs":0,"nanos":15949946}},{"sexp_idx":61,"evt":"start","time":{"secs":0,"nanos":15950123}},{"sexp_idx":61,"evt":"end","time":{"secs":0,"nanos":16187987}},{"sexp_idx":62,"evt":"start","time":{"secs":0,"nanos":16188168}},{"sexp_idx":62,"evt":"end","time":{"secs":0,"nanos":16364198}},{"sexp_idx":63,"evt":"start","time":{"secs":0,"nanos":16364327}},{"sexp_idx":63,"evt":"end","time":{"secs":0,"nanos":16535407}},{"sexp_idx":64,"evt":"start","time":{"secs":0,"nanos":16535784}},{"sexp_idx":64,"evt":"end","time":{"secs":0,"nanos":16698649}},{"sexp_idx":65,"evt":"start","time":{"secs":0,"nanos":16698832}},{"sexp_idx":65,"evt":"end","time":{"secs":0,"nanos":16851502}},{"sexp_idx":66,"evt":"start","time":{"secs":0,"nanos":16851851}},{"sexp_idx":66,"evt":"end","time":{"secs":0,"nanos":17032859}},{"sexp_idx":67,"evt":"start","time":{"secs":0,"nanos":17033045}},{"sexp_idx":67,"evt":"end","time":{"secs":0,"nanos":17160979}},{"sexp_idx":68,"evt":"start","time":{"secs":0,"nanos":17161223}},{"sexp_idx":68,"evt":"end","time":{"secs":0,"nanos":17282899}},{"sexp_idx":69,"evt":"start","time":{"secs":0,"nanos":17283078}},{"sexp_idx":69,"evt":"end","time":{"secs":0,"nanos":17406703}},{"sexp_idx":70,"evt":"start","time":{"secs":0,"nanos":17406893}},{"sexp_idx":70,"evt":"end","time":{"secs":0,"nanos":17522061}},{"sexp_idx":71,"evt":"start","time":{"secs":0,"nanos":17522233}},{"sexp_idx":71,"evt":"end","time":{"secs":0,"nanos":17712887}},{"sexp_idx":72,"evt":"start","time":{"secs":0,"nanos":17713098}},{"sexp_idx":72,"evt":"end","time":{"secs":0,"nanos":17926231}},{"sexp_idx":73,"evt":"start","time":{"secs":0,"nanos":17926561}},{"sexp_idx":73,"evt":"end","time":{"secs":0,"nanos":18073893}},{"sexp_idx":74,"evt":"start","time":{"secs":0,"nanos":18074095}},{"sexp_idx":74,"evt":"end","time":{"secs":0,"nanos":18196372}},{"sexp_idx":75,"evt":"start","time":{"secs":0,"nanos":18196783}},{"sexp_idx":75,"evt":"end","time":{"secs":0,"nanos":18739225}},{"sexp_idx":76,"evt":"start","time":{"secs":0,"nanos":18739554}},{"sexp_idx":76,"evt":"end","time":{"secs":0,"nanos":18862207}},{"sexp_idx":77,"evt":"start","time":{"secs":0,"nanos":18862428}},{"sexp_idx":77,"evt":"end","time":{"secs":0,"nanos":18971195}},{"sexp_idx":78,"evt":"start","time":{"secs":0,"nanos":18971467}},{"sexp_idx":78,"evt":"end","time":{"secs":0,"nanos":19563099}},{"sexp_idx":79,"evt":"start","time":{"secs":0,"nanos":19563315}},{"sexp_idx":79,"evt":"end","time":{"secs":0,"nanos":19712349}},{"sexp_idx":80,"evt":"start","time":{"secs":0,"nanos":19712550}},{"sexp_idx":80,"evt":"end","time":{"secs":0,"nanos":19867204}},{"sexp_idx":81,"evt":"start","time":{"secs":0,"nanos":19867403}},{"sexp_idx":81,"evt":"end","time":{"secs":0,"nanos":20021026}},{"sexp_idx":82,"evt":"start","time":{"secs":0,"nanos":20021493}},{"sexp_idx":82,"evt":"end","time":{"secs":0,"nanos":20121755}},{"sexp_idx":83,"evt":"start","time":{"secs":0,"nanos":20121835}},{"sexp_idx":83,"evt":"end","time":{"secs":0,"nanos":20192085}},{"sexp_idx":84,"evt":"start","time":{"secs":0,"nanos":20192625}},{"sexp_idx":84,"evt":"end","time":{"secs":0,"nanos":20364053}},{"sexp_idx":85,"evt":"start","time":{"secs":0,"nanos":20364217}},{"sexp_idx":85,"evt":"end","time":{"secs":0,"nanos":20606578}},{"sexp_idx":86,"evt":"start","time":{"secs":0,"nanos":20606877}},{"sexp_idx":86,"evt":"end","time":{"secs":0,"nanos":20775968}},{"sexp_idx":87,"evt":"start","time":{"secs":0,"nanos":20776171}},{"sexp_idx":87,"evt":"end","time":{"secs":0,"nanos":20960486}},{"sexp_idx":88,"evt":"start","time":{"secs":0,"nanos":20960671}},{"sexp_idx":88,"evt":"end","time":{"secs":0,"nanos":21102306}},{"sexp_idx":89,"evt":"start","time":{"secs":0,"nanos":21102466}},{"sexp_idx":89,"evt":"end","time":{"secs":0,"nanos":21232163}},{"sexp_idx":90,"evt":"start","time":{"secs":0,"nanos":21232335}},{"sexp_idx":90,"evt":"end","time":{"secs":0,"nanos":21374511}},{"sexp_idx":91,"evt":"start","time":{"secs":0,"nanos":21374650}},{"sexp_idx":91,"evt":"end","time":{"secs":0,"nanos":21559444}},{"sexp_idx":92,"evt":"start","time":{"secs":0,"nanos":21559656}},{"sexp_idx":92,"evt":"end","time":{"secs":0,"nanos":21745650}},{"sexp_idx":93,"evt":"start","time":{"secs":0,"nanos":21745851}},{"sexp_idx":93,"evt":"end","time":{"secs":0,"nanos":21937618}},{"sexp_idx":94,"evt":"start","time":{"secs":0,"nanos":21937841}},{"sexp_idx":94,"evt":"end","time":{"secs":0,"nanos":22163353}},{"sexp_idx":95,"evt":"start","time":{"secs":0,"nanos":22163654}},{"sexp_idx":95,"evt":"end","time":{"secs":0,"nanos":22314765}},{"sexp_idx":96,"evt":"start","time":{"secs":0,"nanos":22314951}},{"sexp_idx":96,"evt":"end","time":{"secs":0,"nanos":22466359}},{"sexp_idx":97,"evt":"start","time":{"secs":0,"nanos":22466546}},{"sexp_idx":97,"evt":"end","time":{"secs":0,"nanos":22621860}},{"sexp_idx":98,"evt":"start","time":{"secs":0,"nanos":22622067}},{"sexp_idx":98,"evt":"end","time":{"secs":0,"nanos":22782151}},{"sexp_idx":99,"evt":"start","time":{"secs":0,"nanos":22782290}},{"sexp_idx":99,"evt":"end","time":{"secs":0,"nanos":22930858}},{"sexp_idx":100,"evt":"start","time":{"secs":0,"nanos":22930998}},{"sexp_idx":100,"evt":"end","time":{"secs":0,"nanos":23092711}},{"sexp_idx":101,"evt":"start","time":{"secs":0,"nanos":23092853}},{"sexp_idx":101,"evt":"end","time":{"secs":0,"nanos":23218097}},{"sexp_idx":102,"evt":"start","time":{"secs":0,"nanos":23218214}},{"sexp_idx":102,"evt":"end","time":{"secs":0,"nanos":23345229}},{"sexp_idx":103,"evt":"start","time":{"secs":0,"nanos":23345355}},{"sexp_idx":103,"evt":"end","time":{"secs":0,"nanos":23350980}},{"sexp_idx":104,"evt":"start","time":{"secs":0,"nanos":23351111}},{"sexp_idx":104,"evt":"end","time":{"secs":0,"nanos":23355887}},{"sexp_idx":105,"evt":"start","time":{"secs":0,"nanos":23356139}},{"sexp_idx":105,"evt":"end","time":{"secs":0,"nanos":23493032}},{"sexp_idx":106,"evt":"start","time":{"secs":0,"nanos":23493271}},{"sexp_idx":106,"evt":"end","time":{"secs":0,"nanos":23607915}},{"sexp_idx":107,"evt":"start","time":{"secs":0,"nanos":23608105}},{"sexp_idx":107,"evt":"end","time":{"secs":0,"nanos":23679920}},{"sexp_idx":108,"evt":"start","time":{"secs":0,"nanos":23679992}},{"sexp_idx":108,"evt":"end","time":{"secs":0,"nanos":23760529}},{"sexp_idx":109,"evt":"start","time":{"secs":0,"nanos":23760590}},{"sexp_idx":109,"evt":"end","time":{"secs":0,"nanos":23829625}},{"sexp_idx":110,"evt":"start","time":{"secs":0,"nanos":23829780}},{"sexp_idx":110,"evt":"end","time":{"secs":0,"nanos":24084478}},{"sexp_idx":111,"evt":"start","time":{"secs":0,"nanos":24084882}},{"sexp_idx":111,"evt":"end","time":{"secs":0,"nanos":24270077}},{"sexp_idx":112,"evt":"start","time":{"secs":0,"nanos":24270256}},{"sexp_idx":112,"evt":"end","time":{"secs":0,"nanos":24486320}},{"sexp_idx":113,"evt":"start","time":{"secs":0,"nanos":24486520}},{"sexp_idx":113,"evt":"end","time":{"secs":0,"nanos":24671620}},{"sexp_idx":114,"evt":"start","time":{"secs":0,"nanos":24671954}},{"sexp_idx":114,"evt":"end","time":{"secs":0,"nanos":24836765}},{"sexp_idx":115,"evt":"start","time":{"secs":0,"nanos":24836990}},{"sexp_idx":115,"evt":"end","time":{"secs":0,"nanos":25027504}},{"sexp_idx":116,"evt":"start","time":{"secs":0,"nanos":25027785}},{"sexp_idx":116,"evt":"end","time":{"secs":0,"nanos":25231152}},{"sexp_idx":117,"evt":"start","time":{"secs":0,"nanos":25231424}},{"sexp_idx":117,"evt":"end","time":{"secs":0,"nanos":25407856}},{"sexp_idx":118,"evt":"start","time":{"secs":0,"nanos":25408050}},{"sexp_idx":118,"evt":"end","time":{"secs":0,"nanos":25634428}},{"sexp_idx":119,"evt":"start","time":{"secs":0,"nanos":25634628}},{"sexp_idx":119,"evt":"end","time":{"secs":0,"nanos":25883343}},{"sexp_idx":120,"evt":"start","time":{"secs":0,"nanos":25883629}},{"sexp_idx":120,"evt":"end","time":{"secs":0,"nanos":26129037}},{"sexp_idx":121,"evt":"start","time":{"secs":0,"nanos":26129287}},{"sexp_idx":121,"evt":"end","time":{"secs":0,"nanos":26401807}},{"sexp_idx":122,"evt":"start","time":{"secs":0,"nanos":26402202}},{"sexp_idx":122,"evt":"end","time":{"secs":0,"nanos":26713199}},{"sexp_idx":123,"evt":"start","time":{"secs":0,"nanos":26713464}},{"sexp_idx":123,"evt":"end","time":{"secs":0,"nanos":26983149}},{"sexp_idx":124,"evt":"start","time":{"secs":0,"nanos":26983368}},{"sexp_idx":124,"evt":"end","time":{"secs":0,"nanos":27237021}},{"sexp_idx":125,"evt":"start","time":{"secs":0,"nanos":27237319}},{"sexp_idx":125,"evt":"end","time":{"secs":0,"nanos":27446635}},{"sexp_idx":126,"evt":"start","time":{"secs":0,"nanos":27446959}},{"sexp_idx":126,"evt":"end","time":{"secs":0,"nanos":27636649}},{"sexp_idx":127,"evt":"start","time":{"secs":0,"nanos":27636771}},{"sexp_idx":127,"evt":"end","time":{"secs":0,"nanos":27825894}},{"sexp_idx":128,"evt":"start","time":{"secs":0,"nanos":27826094}},{"sexp_idx":128,"evt":"end","time":{"secs":0,"nanos":28073578}},{"sexp_idx":129,"evt":"start","time":{"secs":0,"nanos":28073838}},{"sexp_idx":129,"evt":"end","time":{"secs":0,"nanos":28284857}},{"sexp_idx":130,"evt":"start","time":{"secs":0,"nanos":28284978}},{"sexp_idx":130,"evt":"end","time":{"secs":0,"nanos":28472221}},{"sexp_idx":131,"evt":"start","time":{"secs":0,"nanos":28472345}},{"sexp_idx":131,"evt":"end","time":{"secs":0,"nanos":28661803}},{"sexp_idx":132,"evt":"start","time":{"secs":0,"nanos":28662044}},{"sexp_idx":132,"evt":"end","time":{"secs":0,"nanos":28854974}},{"sexp_idx":133,"evt":"start","time":{"secs":0,"nanos":28855165}},{"sexp_idx":133,"evt":"end","time":{"secs":0,"nanos":29148239}},{"sexp_idx":134,"evt":"start","time":{"secs":0,"nanos":29148978}},{"sexp_idx":134,"evt":"end","time":{"secs":0,"nanos":29480233}},{"sexp_idx":135,"evt":"start","time":{"secs":0,"nanos":29480510}},{"sexp_idx":135,"evt":"end","time":{"secs":0,"nanos":29697478}},{"sexp_idx":136,"evt":"start","time":{"secs":0,"nanos":29697896}},{"sexp_idx":136,"evt":"end","time":{"secs":0,"nanos":29786075}},{"sexp_idx":137,"evt":"start","time":{"secs":0,"nanos":29786152}},{"sexp_idx":137,"evt":"end","time":{"secs":0,"nanos":29871179}},{"sexp_idx":138,"evt":"start","time":{"secs":0,"nanos":29871314}},{"sexp_idx":138,"evt":"end","time":{"secs":0,"nanos":30002906}},{"sexp_idx":139,"evt":"start","time":{"secs":0,"nanos":30003150}},{"sexp_idx":139,"evt":"end","time":{"secs":0,"nanos":30102799}},{"sexp_idx":140,"evt":"start","time":{"secs":0,"nanos":30102985}},{"sexp_idx":140,"evt":"end","time":{"secs":0,"nanos":30429696}},{"sexp_idx":141,"evt":"start","time":{"secs":0,"nanos":30430096}},{"sexp_idx":141,"evt":"end","time":{"secs":0,"nanos":30681584}},{"sexp_idx":142,"evt":"start","time":{"secs":0,"nanos":30681768}},{"sexp_idx":142,"evt":"end","time":{"secs":0,"nanos":30895085}},{"sexp_idx":143,"evt":"start","time":{"secs":0,"nanos":30895322}},{"sexp_idx":143,"evt":"end","time":{"secs":0,"nanos":31108675}},{"sexp_idx":144,"evt":"start","time":{"secs":0,"nanos":31108896}},{"sexp_idx":144,"evt":"end","time":{"secs":0,"nanos":31315269}},{"sexp_idx":145,"evt":"start","time":{"secs":0,"nanos":31315486}},{"sexp_idx":145,"evt":"end","time":{"secs":0,"nanos":31488918}},{"sexp_idx":146,"evt":"start","time":{"secs":0,"nanos":31489342}},{"sexp_idx":146,"evt":"end","time":{"secs":0,"nanos":31712754}},{"sexp_idx":147,"evt":"start","time":{"secs":0,"nanos":31712979}},{"sexp_idx":147,"evt":"end","time":{"secs":0,"nanos":31929633}},{"sexp_idx":148,"evt":"start","time":{"secs":0,"nanos":31929855}},{"sexp_idx":148,"evt":"end","time":{"secs":0,"nanos":32130354}},{"sexp_idx":149,"evt":"start","time":{"secs":0,"nanos":32130561}},{"sexp_idx":149,"evt":"end","time":{"secs":0,"nanos":33015923}},{"sexp_idx":150,"evt":"start","time":{"secs":0,"nanos":33016146}},{"sexp_idx":150,"evt":"end","time":{"secs":0,"nanos":33191166}},{"sexp_idx":151,"evt":"start","time":{"secs":0,"nanos":33191450}},{"sexp_idx":151,"evt":"end","time":{"secs":0,"nanos":33364299}},{"sexp_idx":152,"evt":"start","time":{"secs":0,"nanos":33364569}},{"sexp_idx":152,"evt":"end","time":{"secs":0,"nanos":33516114}},{"sexp_idx":153,"evt":"start","time":{"secs":0,"nanos":33516294}},{"sexp_idx":153,"evt":"end","time":{"secs":0,"nanos":33714010}},{"sexp_idx":154,"evt":"start","time":{"secs":0,"nanos":33714185}},{"sexp_idx":154,"evt":"end","time":{"secs":0,"nanos":33894532}},{"sexp_idx":155,"evt":"start","time":{"secs":0,"nanos":33894687}},{"sexp_idx":155,"evt":"end","time":{"secs":0,"nanos":34091711}},{"sexp_idx":156,"evt":"start","time":{"secs":0,"nanos":34091971}},{"sexp_idx":156,"evt":"end","time":{"secs":0,"nanos":34287513}},{"sexp_idx":157,"evt":"start","time":{"secs":0,"nanos":34287980}},{"sexp_idx":157,"evt":"end","time":{"secs":0,"nanos":36159193}},{"sexp_idx":158,"evt":"start","time":{"secs":0,"nanos":36159615}},{"sexp_idx":158,"evt":"end","time":{"secs":0,"nanos":37143454}},{"sexp_idx":159,"evt":"start","time":{"secs":0,"nanos":37143700}},{"sexp_idx":159,"evt":"end","time":{"secs":0,"nanos":37284589}},{"sexp_idx":160,"evt":"start","time":{"secs":0,"nanos":37284844}},{"sexp_idx":160,"evt":"end","time":{"secs":0,"nanos":37468613}},{"sexp_idx":161,"evt":"start","time":{"secs":0,"nanos":37468942}},{"sexp_idx":161,"evt":"end","time":{"secs":0,"nanos":39468779}},{"sexp_idx":162,"evt":"start","time":{"secs":0,"nanos":39469058}},{"sexp_idx":162,"evt":"end","time":{"secs":0,"nanos":40508421}},{"sexp_idx":163,"evt":"start","time":{"secs":0,"nanos":40508671}},{"sexp_idx":163,"evt":"end","time":{"secs":0,"nanos":40642433}},{"sexp_idx":164,"evt":"start","time":{"secs":0,"nanos":40642621}},{"sexp_idx":164,"evt":"end","time":{"secs":0,"nanos":40725759}},{"sexp_idx":165,"evt":"start","time":{"secs":0,"nanos":40725891}},{"sexp_idx":165,"evt":"end","time":{"secs":0,"nanos":40806960}},{"sexp_idx":166,"evt":"start","time":{"secs":0,"nanos":40807240}},{"sexp_idx":166,"evt":"end","time":{"secs":0,"nanos":40881075}},{"sexp_idx":167,"evt":"start","time":{"secs":0,"nanos":40881142}},{"sexp_idx":167,"evt":"end","time":{"secs":0,"nanos":40962276}},{"sexp_idx":168,"evt":"start","time":{"secs":0,"nanos":40962404}},{"sexp_idx":168,"evt":"end","time":{"secs":0,"nanos":41228511}},{"sexp_idx":169,"evt":"start","time":{"secs":0,"nanos":41228724}},{"sexp_idx":169,"evt":"end","time":{"secs":0,"nanos":41435102}},{"sexp_idx":170,"evt":"start","time":{"secs":0,"nanos":41435340}},{"sexp_idx":170,"evt":"end","time":{"secs":0,"nanos":41633848}},{"sexp_idx":171,"evt":"start","time":{"secs":0,"nanos":41634038}},{"sexp_idx":171,"evt":"end","time":{"secs":0,"nanos":41823750}},{"sexp_idx":172,"evt":"start","time":{"secs":0,"nanos":41823949}},{"sexp_idx":172,"evt":"end","time":{"secs":0,"nanos":42092173}},{"sexp_idx":173,"evt":"start","time":{"secs":0,"nanos":42092657}},{"sexp_idx":173,"evt":"end","time":{"secs":0,"nanos":42283271}},{"sexp_idx":174,"evt":"start","time":{"secs":0,"nanos":42283391}},{"sexp_idx":174,"evt":"end","time":{"secs":0,"nanos":42507941}},{"sexp_idx":175,"evt":"start","time":{"secs":0,"nanos":42508301}},{"sexp_idx":175,"evt":"end","time":{"secs":0,"nanos":42696072}},{"sexp_idx":176,"evt":"start","time":{"secs":0,"nanos":42696314}},{"sexp_idx":176,"evt":"end","time":{"secs":0,"nanos":44674605}},{"sexp_idx":177,"evt":"start","time":{"secs":0,"nanos":44675234}},{"sexp_idx":177,"evt":"end","time":{"secs":0,"nanos":44874098}},{"sexp_idx":178,"evt":"start","time":{"secs":0,"nanos":44874308}},{"sexp_idx":178,"evt":"end","time":{"secs":0,"nanos":45040638}},{"sexp_idx":179,"evt":"start","time":{"secs":0,"nanos":45040810}},{"sexp_idx":179,"evt":"end","time":{"secs":0,"nanos":45185301}},{"sexp_idx":180,"evt":"start","time":{"secs":0,"nanos":45185516}},{"sexp_idx":180,"evt":"end","time":{"secs":0,"nanos":45371342}},{"sexp_idx":181,"evt":"start","time":{"secs":0,"nanos":45371498}},{"sexp_idx":181,"evt":"end","time":{"secs":0,"nanos":45538642}},{"sexp_idx":182,"evt":"start","time":{"secs":0,"nanos":45538817}},{"sexp_idx":182,"evt":"end","time":{"secs":0,"nanos":45709123}},{"sexp_idx":183,"evt":"start","time":{"secs":0,"nanos":45709294}},{"sexp_idx":183,"evt":"end","time":{"secs":0,"nanos":45869376}},{"sexp_idx":184,"evt":"start","time":{"secs":0,"nanos":45869483}},{"sexp_idx":184,"evt":"end","time":{"secs":0,"nanos":48077482}},{"sexp_idx":185,"evt":"start","time":{"secs":0,"nanos":48077664}},{"sexp_idx":185,"evt":"end","time":{"secs":0,"nanos":49189583}},{"sexp_idx":186,"evt":"start","time":{"secs":0,"nanos":49189808}},{"sexp_idx":186,"evt":"end","time":{"secs":0,"nanos":49342422}},{"sexp_idx":187,"evt":"start","time":{"secs":0,"nanos":49343013}},{"sexp_idx":187,"evt":"end","time":{"secs":0,"nanos":49524048}},{"sexp_idx":188,"evt":"start","time":{"secs":0,"nanos":49524245}},{"sexp_idx":188,"evt":"end","time":{"secs":0,"nanos":51751800}},{"sexp_idx":189,"evt":"start","time":{"secs":0,"nanos":51752109}},{"sexp_idx":189,"evt":"end","time":{"secs":0,"nanos":52941345}},{"sexp_idx":190,"evt":"start","time":{"secs":0,"nanos":52941810}},{"sexp_idx":190,"evt":"end","time":{"secs":0,"nanos":53082550}},{"sexp_idx":191,"evt":"start","time":{"secs":0,"nanos":53082765}},{"sexp_idx":191,"evt":"end","time":{"secs":0,"nanos":53160676}},{"sexp_idx":192,"evt":"start","time":{"secs":0,"nanos":53160785}},{"sexp_idx":192,"evt":"end","time":{"secs":0,"nanos":53233079}},{"sexp_idx":193,"evt":"start","time":{"secs":0,"nanos":53233250}},{"sexp_idx":193,"evt":"end","time":{"secs":0,"nanos":53307505}},{"sexp_idx":194,"evt":"start","time":{"secs":0,"nanos":53307590}},{"sexp_idx":194,"evt":"end","time":{"secs":0,"nanos":53382559}},{"sexp_idx":195,"evt":"start","time":{"secs":0,"nanos":53382734}},{"sexp_idx":195,"evt":"end","time":{"secs":0,"nanos":53726089}},{"sexp_idx":196,"evt":"start","time":{"secs":0,"nanos":53726338}},{"sexp_idx":196,"evt":"end","time":{"secs":0,"nanos":53962353}},{"sexp_idx":197,"evt":"start","time":{"secs":0,"nanos":53962579}},{"sexp_idx":197,"evt":"end","time":{"secs":0,"nanos":54225260}},{"sexp_idx":198,"evt":"start","time":{"secs":0,"nanos":54225489}},{"sexp_idx":198,"evt":"end","time":{"secs":0,"nanos":54439044}},{"sexp_idx":199,"evt":"start","time":{"secs":0,"nanos":54439209}},{"sexp_idx":199,"evt":"end","time":{"secs":0,"nanos":54631829}},{"sexp_idx":200,"evt":"start","time":{"secs":0,"nanos":54631950}},{"sexp_idx":200,"evt":"end","time":{"secs":0,"nanos":54794027}},{"sexp_idx":201,"evt":"start","time":{"secs":0,"nanos":54794202}},{"sexp_idx":201,"evt":"end","time":{"secs":0,"nanos":54985121}},{"sexp_idx":202,"evt":"start","time":{"secs":0,"nanos":54985258}},{"sexp_idx":202,"evt":"end","time":{"secs":0,"nanos":55170894}},{"sexp_idx":203,"evt":"start","time":{"secs":0,"nanos":55171232}},{"sexp_idx":203,"evt":"end","time":{"secs":0,"nanos":56421581}},{"sexp_idx":204,"evt":"start","time":{"secs":0,"nanos":56421848}},{"sexp_idx":204,"evt":"end","time":{"secs":0,"nanos":57711062}},{"sexp_idx":205,"evt":"start","time":{"secs":0,"nanos":57711317}},{"sexp_idx":205,"evt":"end","time":{"secs":0,"nanos":57995773}},{"sexp_idx":206,"evt":"start","time":{"secs":0,"nanos":57996015}},{"sexp_idx":206,"evt":"end","time":{"secs":0,"nanos":58198512}},{"sexp_idx":207,"evt":"start","time":{"secs":0,"nanos":58198933}},{"sexp_idx":207,"evt":"end","time":{"secs":0,"nanos":58365033}},{"sexp_idx":208,"evt":"start","time":{"secs":0,"nanos":58365307}},{"sexp_idx":208,"evt":"end","time":{"secs":0,"nanos":58576702}},{"sexp_idx":209,"evt":"start","time":{"secs":0,"nanos":58576995}},{"sexp_idx":209,"evt":"end","time":{"secs":0,"nanos":58778776}},{"sexp_idx":210,"evt":"start","time":{"secs":0,"nanos":58779000}},{"sexp_idx":210,"evt":"end","time":{"secs":0,"nanos":58945911}},{"sexp_idx":211,"evt":"start","time":{"secs":0,"nanos":58946176}},{"sexp_idx":211,"evt":"end","time":{"secs":0,"nanos":59132561}},{"sexp_idx":212,"evt":"start","time":{"secs":0,"nanos":59132691}},{"sexp_idx":212,"evt":"end","time":{"secs":0,"nanos":61777888}},{"sexp_idx":213,"evt":"start","time":{"secs":0,"nanos":61778488}},{"sexp_idx":213,"evt":"end","time":{"secs":0,"nanos":63126908}},{"sexp_idx":214,"evt":"start","time":{"secs":0,"nanos":63127155}},{"sexp_idx":214,"evt":"end","time":{"secs":0,"nanos":63302389}},{"sexp_idx":215,"evt":"start","time":{"secs":0,"nanos":63302552}},{"sexp_idx":215,"evt":"end","time":{"secs":0,"nanos":63526674}},{"sexp_idx":216,"evt":"start","time":{"secs":0,"nanos":63526892}},{"sexp_idx":216,"evt":"end","time":{"secs":0,"nanos":66073014}},{"sexp_idx":217,"evt":"start","time":{"secs":0,"nanos":66073247}},{"sexp_idx":217,"evt":"end","time":{"secs":0,"nanos":67389083}},{"sexp_idx":218,"evt":"start","time":{"secs":0,"nanos":67389311}},{"sexp_idx":218,"evt":"end","time":{"secs":0,"nanos":67505439}},{"sexp_idx":219,"evt":"start","time":{"secs":0,"nanos":67505623}},{"sexp_idx":219,"evt":"end","time":{"secs":0,"nanos":67596545}},{"sexp_idx":220,"evt":"start","time":{"secs":0,"nanos":67596693}},{"sexp_idx":220,"evt":"end","time":{"secs":0,"nanos":67810857}},{"sexp_idx":221,"evt":"start","time":{"secs":0,"nanos":67811040}},{"sexp_idx":221,"evt":"end","time":{"secs":0,"nanos":70415552}},{"sexp_idx":222,"evt":"start","time":{"secs":0,"nanos":70415974}},{"sexp_idx":222,"evt":"end","time":{"secs":0,"nanos":71727967}},{"sexp_idx":223,"evt":"start","time":{"secs":0,"nanos":71728595}},{"sexp_idx":223,"evt":"end","time":{"secs":0,"nanos":71868051}},{"sexp_idx":224,"evt":"start","time":{"secs":0,"nanos":71868280}},{"sexp_idx":224,"evt":"end","time":{"secs":0,"nanos":71998781}},{"sexp_idx":225,"evt":"start","time":{"secs":0,"nanos":71998926}},{"sexp_idx":225,"evt":"end","time":{"secs":0,"nanos":72229872}},{"sexp_idx":226,"evt":"start","time":{"secs":0,"nanos":72230083}},{"sexp_idx":226,"evt":"end","time":{"secs":0,"nanos":73631336}},{"sexp_idx":227,"evt":"start","time":{"secs":0,"nanos":73631549}},{"sexp_idx":227,"evt":"end","time":{"secs":0,"nanos":73783801}},{"sexp_idx":228,"evt":"start","time":{"secs":0,"nanos":73784140}},{"sexp_idx":228,"evt":"end","time":{"secs":0,"nanos":74157310}},{"sexp_idx":229,"evt":"start","time":{"secs":0,"nanos":74157527}},{"sexp_idx":229,"evt":"end","time":{"secs":0,"nanos":74474691}},{"sexp_idx":230,"evt":"start","time":{"secs":0,"nanos":74474845}},{"sexp_idx":230,"evt":"end","time":{"secs":0,"nanos":74836549}},{"sexp_idx":231,"evt":"start","time":{"secs":0,"nanos":74836823}},{"sexp_idx":231,"evt":"end","time":{"secs":0,"nanos":75310820}},{"sexp_idx":232,"evt":"start","time":{"secs":0,"nanos":75311053}},{"sexp_idx":232,"evt":"end","time":{"secs":0,"nanos":75772960}},{"sexp_idx":233,"evt":"start","time":{"secs":0,"nanos":75773312}},{"sexp_idx":233,"evt":"end","time":{"secs":0,"nanos":76260431}},{"sexp_idx":234,"evt":"start","time":{"secs":0,"nanos":76260702}},{"sexp_idx":234,"evt":"end","time":{"secs":0,"nanos":76731899}},{"sexp_idx":235,"evt":"start","time":{"secs":0,"nanos":76732246}},{"sexp_idx":235,"evt":"end","time":{"secs":0,"nanos":77152658}},{"sexp_idx":236,"evt":"start","time":{"secs":0,"nanos":77152880}},{"sexp_idx":236,"evt":"end","time":{"secs":0,"nanos":77162989}},{"sexp_idx":237,"evt":"start","time":{"secs":0,"nanos":77163040}},{"sexp_idx":237,"evt":"end","time":{"secs":0,"nanos":77342523}},{"sexp_idx":238,"evt":"start","time":{"secs":0,"nanos":77342786}},{"sexp_idx":238,"evt":"end","time":{"secs":0,"nanos":77479710}},{"sexp_idx":239,"evt":"start","time":{"secs":0,"nanos":77479908}},{"sexp_idx":239,"evt":"end","time":{"secs":0,"nanos":77563505}},{"sexp_idx":240,"evt":"start","time":{"secs":0,"nanos":77563689}},{"sexp_idx":240,"evt":"end","time":{"secs":0,"nanos":79069487}},{"sexp_idx":241,"evt":"start","time":{"secs":0,"nanos":79069722}},{"sexp_idx":241,"evt":"end","time":{"secs":0,"nanos":80568049}},{"sexp_idx":242,"evt":"start","time":{"secs":0,"nanos":80568382}},{"sexp_idx":242,"evt":"end","time":{"secs":0,"nanos":80775508}},{"sexp_idx":243,"evt":"start","time":{"secs":0,"nanos":80775763}},{"sexp_idx":243,"evt":"end","time":{"secs":0,"nanos":80879447}},{"sexp_idx":244,"evt":"start","time":{"secs":0,"nanos":80879684}},{"sexp_idx":244,"evt":"end","time":{"secs":0,"nanos":82411608}},{"sexp_idx":245,"evt":"start","time":{"secs":0,"nanos":82411910}},{"sexp_idx":245,"evt":"end","time":{"secs":0,"nanos":83901090}},{"sexp_idx":246,"evt":"start","time":{"secs":0,"nanos":83901334}},{"sexp_idx":246,"evt":"end","time":{"secs":0,"nanos":84055881}},{"sexp_idx":247,"evt":"start","time":{"secs":0,"nanos":84056234}},{"sexp_idx":247,"evt":"end","time":{"secs":0,"nanos":84133902}},{"sexp_idx":248,"evt":"start","time":{"secs":0,"nanos":84134286}},{"sexp_idx":248,"evt":"end","time":{"secs":0,"nanos":85795966}},{"sexp_idx":249,"evt":"start","time":{"secs":0,"nanos":85796196}},{"sexp_idx":249,"evt":"end","time":{"secs":0,"nanos":87286970}},{"sexp_idx":250,"evt":"start","time":{"secs":0,"nanos":87287197}},{"sexp_idx":250,"evt":"end","time":{"secs":0,"nanos":87447436}},{"sexp_idx":251,"evt":"start","time":{"secs":0,"nanos":87447662}},{"sexp_idx":251,"evt":"end","time":{"secs":0,"nanos":87530101}},{"sexp_idx":252,"evt":"start","time":{"secs":0,"nanos":87530261}},{"sexp_idx":252,"evt":"end","time":{"secs":0,"nanos":89062497}},{"sexp_idx":253,"evt":"start","time":{"secs":0,"nanos":89062747}},{"sexp_idx":253,"evt":"end","time":{"secs":0,"nanos":90651045}},{"sexp_idx":254,"evt":"start","time":{"secs":0,"nanos":90651342}},{"sexp_idx":254,"evt":"end","time":{"secs":0,"nanos":90844027}},{"sexp_idx":255,"evt":"start","time":{"secs":0,"nanos":90844259}},{"sexp_idx":255,"evt":"end","time":{"secs":0,"nanos":90932713}},{"sexp_idx":256,"evt":"start","time":{"secs":0,"nanos":90932804}},{"sexp_idx":256,"evt":"end","time":{"secs":0,"nanos":92636672}},{"sexp_idx":257,"evt":"start","time":{"secs":0,"nanos":92637405}},{"sexp_idx":257,"evt":"end","time":{"secs":0,"nanos":94272544}},{"sexp_idx":258,"evt":"start","time":{"secs":0,"nanos":94273049}},{"sexp_idx":258,"evt":"end","time":{"secs":0,"nanos":94805004}},{"sexp_idx":259,"evt":"start","time":{"secs":0,"nanos":94805246}},{"sexp_idx":259,"evt":"end","time":{"secs":0,"nanos":95234118}},{"sexp_idx":260,"evt":"start","time":{"secs":0,"nanos":95234386}},{"sexp_idx":260,"evt":"end","time":{"secs":0,"nanos":95631306}},{"sexp_idx":261,"evt":"start","time":{"secs":0,"nanos":95631551}},{"sexp_idx":261,"evt":"end","time":{"secs":0,"nanos":96081200}},{"sexp_idx":262,"evt":"start","time":{"secs":0,"nanos":96081577}},{"sexp_idx":262,"evt":"end","time":{"secs":0,"nanos":96481772}},{"sexp_idx":263,"evt":"start","time":{"secs":0,"nanos":96482009}},{"sexp_idx":263,"evt":"end","time":{"secs":0,"nanos":96880120}},{"sexp_idx":264,"evt":"start","time":{"secs":0,"nanos":96880360}},{"sexp_idx":264,"evt":"end","time":{"secs":0,"nanos":103448588}},{"sexp_idx":265,"evt":"start","time":{"secs":0,"nanos":103449412}},{"sexp_idx":265,"evt":"end","time":{"secs":0,"nanos":103785503}},{"sexp_idx":266,"evt":"start","time":{"secs":0,"nanos":103785767}},{"sexp_idx":266,"evt":"end","time":{"secs":0,"nanos":104091455}},{"sexp_idx":267,"evt":"start","time":{"secs":0,"nanos":104091756}},{"sexp_idx":267,"evt":"end","time":{"secs":0,"nanos":107573672}},{"sexp_idx":268,"evt":"start","time":{"secs":0,"nanos":107576217}},{"sexp_idx":268,"evt":"end","time":{"secs":0,"nanos":109354269}},{"sexp_idx":269,"evt":"start","time":{"secs":0,"nanos":109354784}},{"sexp_idx":269,"evt":"end","time":{"secs":0,"nanos":109592769}},{"sexp_idx":270,"evt":"start","time":{"secs":0,"nanos":109593051}},{"sexp_idx":270,"evt":"end","time":{"secs":0,"nanos":109857510}},{"sexp_idx":271,"evt":"start","time":{"secs":0,"nanos":109857781}},{"sexp_idx":271,"evt":"end","time":{"secs":0,"nanos":113339685}},{"sexp_idx":272,"evt":"start","time":{"secs":0,"nanos":113340123}},{"sexp_idx":272,"evt":"end","time":{"secs":0,"nanos":115022864}},{"sexp_idx":273,"evt":"start","time":{"secs":0,"nanos":115023228}},{"sexp_idx":273,"evt":"end","time":{"secs":0,"nanos":115211720}},{"sexp_idx":274,"evt":"start","time":{"secs":0,"nanos":115211921}},{"sexp_idx":274,"evt":"end","time":{"secs":0,"nanos":115345087}},{"sexp_idx":275,"evt":"start","time":{"secs":0,"nanos":115345300}},{"sexp_idx":275,"evt":"end","time":{"secs":0,"nanos":115555199}},{"sexp_idx":276,"evt":"start","time":{"secs":0,"nanos":115555409}},{"sexp_idx":276,"evt":"end","time":{"secs":0,"nanos":115760429}},{"sexp_idx":277,"evt":"start","time":{"secs":0,"nanos":115760663}},{"sexp_idx":277,"evt":"end","time":{"secs":0,"nanos":116408194}},{"sexp_idx":278,"evt":"start","time":{"secs":0,"nanos":116408461}},{"sexp_idx":278,"evt":"end","time":{"secs":0,"nanos":116951109}},{"sexp_idx":279,"evt":"start","time":{"secs":0,"nanos":116951344}},{"sexp_idx":279,"evt":"end","time":{"secs":0,"nanos":117179423}},{"sexp_idx":280,"evt":"start","time":{"secs":0,"nanos":117179669}},{"sexp_idx":280,"evt":"end","time":{"secs":0,"nanos":117501037}},{"sexp_idx":281,"evt":"start","time":{"secs":0,"nanos":117501271}},{"sexp_idx":281,"evt":"end","time":{"secs":0,"nanos":119624252}},{"sexp_idx":282,"evt":"start","time":{"secs":0,"nanos":119624567}},{"sexp_idx":282,"evt":"end","time":{"secs":0,"nanos":119843877}},{"sexp_idx":283,"evt":"start","time":{"secs":0,"nanos":119844098}},{"sexp_idx":283,"evt":"end","time":{"secs":0,"nanos":120082128}},{"sexp_idx":284,"evt":"start","time":{"secs":0,"nanos":120082354}},{"sexp_idx":284,"evt":"end","time":{"secs":0,"nanos":120310774}},{"sexp_idx":285,"evt":"start","time":{"secs":0,"nanos":120311002}},{"sexp_idx":285,"evt":"end","time":{"secs":0,"nanos":129090692}},{"sexp_idx":286,"evt":"start","time":{"secs":0,"nanos":129091412}},{"sexp_idx":286,"evt":"end","time":{"secs":0,"nanos":138293342}},{"sexp_idx":287,"evt":"start","time":{"secs":0,"nanos":138293863}},{"sexp_idx":287,"evt":"end","time":{"secs":0,"nanos":143904662}},{"sexp_idx":288,"evt":"start","time":{"secs":0,"nanos":143905485}},{"sexp_idx":288,"evt":"end","time":{"secs":0,"nanos":144499639}},{"sexp_idx":289,"evt":"start","time":{"secs":0,"nanos":144500403}},{"sexp_idx":289,"evt":"end","time":{"secs":0,"nanos":144860301}},{"sexp_idx":290,"evt":"start","time":{"secs":0,"nanos":144860700}},{"sexp_idx":290,"evt":"end","time":{"secs":0,"nanos":145300980}},{"sexp_idx":291,"evt":"start","time":{"secs":0,"nanos":145301216}},{"sexp_idx":291,"evt":"end","time":{"secs":0,"nanos":145625454}},{"sexp_idx":292,"evt":"start","time":{"secs":0,"nanos":145625683}},{"sexp_idx":292,"evt":"end","time":{"secs":0,"nanos":145859846}},{"sexp_idx":293,"evt":"start","time":{"secs":0,"nanos":145860054}},{"sexp_idx":293,"evt":"end","time":{"secs":0,"nanos":146081765}},{"sexp_idx":294,"evt":"start","time":{"secs":0,"nanos":146081974}},{"sexp_idx":294,"evt":"end","time":{"secs":0,"nanos":146241289}},{"sexp_idx":295,"evt":"start","time":{"secs":0,"nanos":146241521}},{"sexp_idx":295,"evt":"end","time":{"secs":0,"nanos":146368928}},{"sexp_idx":296,"evt":"start","time":{"secs":0,"nanos":146369153}},{"sexp_idx":296,"evt":"end","time":{"secs":0,"nanos":146639985}},{"sexp_idx":297,"evt":"start","time":{"secs":0,"nanos":146640171}},{"sexp_idx":297,"evt":"end","time":{"secs":0,"nanos":146869764}},{"sexp_idx":298,"evt":"start","time":{"secs":0,"nanos":146869950}},{"sexp_idx":298,"evt":"end","time":{"secs":0,"nanos":147326150}},{"sexp_idx":299,"evt":"start","time":{"secs":0,"nanos":147326309}},{"sexp_idx":299,"evt":"end","time":{"secs":0,"nanos":154543589}},{"sexp_idx":300,"evt":"start","time":{"secs":0,"nanos":154544024}},{"sexp_idx":300,"evt":"end","time":{"secs":0,"nanos":154909295}},{"sexp_idx":301,"evt":"start","time":{"secs":0,"nanos":154909523}},{"sexp_idx":301,"evt":"end","time":{"secs":0,"nanos":155243310}},{"sexp_idx":302,"evt":"start","time":{"secs":0,"nanos":155243558}},{"sexp_idx":302,"evt":"end","time":{"secs":0,"nanos":155486358}},{"sexp_idx":303,"evt":"start","time":{"secs":0,"nanos":155486525}},{"sexp_idx":303,"evt":"end","time":{"secs":0,"nanos":155758477}},{"sexp_idx":304,"evt":"start","time":{"secs":0,"nanos":155758617}},{"sexp_idx":304,"evt":"end","time":{"secs":0,"nanos":156020454}},{"sexp_idx":305,"evt":"start","time":{"secs":0,"nanos":156020648}},{"sexp_idx":305,"evt":"end","time":{"secs":0,"nanos":156295416}},{"sexp_idx":306,"evt":"start","time":{"secs":0,"nanos":156295713}},{"sexp_idx":306,"evt":"end","time":{"secs":0,"nanos":156704387}},{"sexp_idx":307,"evt":"start","time":{"secs":0,"nanos":156704732}},{"sexp_idx":307,"evt":"end","time":{"secs":0,"nanos":157385857}},{"sexp_idx":308,"evt":"start","time":{"secs":0,"nanos":157386265}},{"sexp_idx":308,"evt":"end","time":{"secs":0,"nanos":166991605}},{"sexp_idx":309,"evt":"start","time":{"secs":0,"nanos":166992314}},{"sexp_idx":309,"evt":"end","time":{"secs":0,"nanos":176385605}},{"sexp_idx":310,"evt":"start","time":{"secs":0,"nanos":176386414}},{"sexp_idx":310,"evt":"end","time":{"secs":0,"nanos":183905159}},{"sexp_idx":311,"evt":"start","time":{"secs":0,"nanos":183905932}},{"sexp_idx":311,"evt":"end","time":{"secs":0,"nanos":190670942}},{"sexp_idx":312,"evt":"start","time":{"secs":0,"nanos":190671792}},{"sexp_idx":312,"evt":"end","time":{"secs":0,"nanos":201015781}},{"sexp_idx":313,"evt":"start","time":{"secs":0,"nanos":201016479}},{"sexp_idx":313,"evt":"end","time":{"secs":0,"nanos":207959352}},{"sexp_idx":314,"evt":"start","time":{"secs":0,"nanos":207959986}},{"sexp_idx":314,"evt":"end","time":{"secs":0,"nanos":218062408}},{"sexp_idx":315,"evt":"start","time":{"secs":0,"nanos":218063075}},{"sexp_idx":315,"evt":"end","time":{"secs":0,"nanos":225293455}},{"sexp_idx":316,"evt":"start","time":{"secs":0,"nanos":225294676}},{"sexp_idx":316,"evt":"end","time":{"secs":0,"nanos":236211717}},{"sexp_idx":317,"evt":"start","time":{"secs":0,"nanos":236212350}},{"sexp_idx":317,"evt":"end","time":{"secs":0,"nanos":244274692}},{"sexp_idx":318,"evt":"start","time":{"secs":0,"nanos":244275478}},{"sexp_idx":318,"evt":"end","time":{"secs":0,"nanos":254610088}},{"sexp_idx":319,"evt":"start","time":{"secs":0,"nanos":254610832}},{"sexp_idx":319,"evt":"end","time":{"secs":0,"nanos":264999533}},{"sexp_idx":320,"evt":"start","time":{"secs":0,"nanos":265000263}},{"sexp_idx":320,"evt":"end","time":{"secs":0,"nanos":275168992}},{"sexp_idx":321,"evt":"start","time":{"secs":0,"nanos":275169883}},{"sexp_idx":321,"evt":"end","time":{"secs":0,"nanos":286529297}},{"sexp_idx":322,"evt":"start","time":{"secs":0,"nanos":286530075}},{"sexp_idx":322,"evt":"end","time":{"secs":0,"nanos":297242613}},{"sexp_idx":323,"evt":"start","time":{"secs":0,"nanos":297243411}},{"sexp_idx":323,"evt":"end","time":{"secs":0,"nanos":305023608}},{"sexp_idx":324,"evt":"start","time":{"secs":0,"nanos":305024431}},{"sexp_idx":324,"evt":"end","time":{"secs":0,"nanos":313314866}},{"sexp_idx":325,"evt":"start","time":{"secs":0,"nanos":313315674}},{"sexp_idx":325,"evt":"end","time":{"secs":0,"nanos":323299066}},{"sexp_idx":326,"evt":"start","time":{"secs":0,"nanos":323299972}},{"sexp_idx":326,"evt":"end","time":{"secs":0,"nanos":331445287}},{"sexp_idx":327,"evt":"start","time":{"secs":0,"nanos":331446038}},{"sexp_idx":327,"evt":"end","time":{"secs":0,"nanos":339064376}},{"sexp_idx":328,"evt":"start","time":{"secs":0,"nanos":339065308}},{"sexp_idx":328,"evt":"end","time":{"secs":0,"nanos":347306392}},{"sexp_idx":329,"evt":"start","time":{"secs":0,"nanos":347307231}},{"sexp_idx":329,"evt":"end","time":{"secs":0,"nanos":355872879}},{"sexp_idx":330,"evt":"start","time":{"secs":0,"nanos":355873851}},{"sexp_idx":330,"evt":"end","time":{"secs":0,"nanos":366438926}},{"sexp_idx":331,"evt":"start","time":{"secs":0,"nanos":366439816}},{"sexp_idx":331,"evt":"end","time":{"secs":0,"nanos":379181324}},{"sexp_idx":332,"evt":"start","time":{"secs":0,"nanos":379182307}},{"sexp_idx":332,"evt":"end","time":{"secs":0,"nanos":390312674}},{"sexp_idx":333,"evt":"start","time":{"secs":0,"nanos":390313465}},{"sexp_idx":333,"evt":"end","time":{"secs":0,"nanos":399039022}},{"sexp_idx":334,"evt":"start","time":{"secs":0,"nanos":399039877}},{"sexp_idx":334,"evt":"end","time":{"secs":0,"nanos":409856772}},{"sexp_idx":335,"evt":"start","time":{"secs":0,"nanos":409857740}},{"sexp_idx":335,"evt":"end","time":{"secs":0,"nanos":420926689}},{"sexp_idx":336,"evt":"start","time":{"secs":0,"nanos":420927193}},{"sexp_idx":336,"evt":"end","time":{"secs":0,"nanos":429329878}},{"sexp_idx":337,"evt":"start","time":{"secs":0,"nanos":429330867}},{"sexp_idx":337,"evt":"end","time":{"secs":0,"nanos":437272052}},{"sexp_idx":338,"evt":"start","time":{"secs":0,"nanos":437272742}},{"sexp_idx":338,"evt":"end","time":{"secs":0,"nanos":445416647}},{"sexp_idx":339,"evt":"start","time":{"secs":0,"nanos":445417557}},{"sexp_idx":339,"evt":"end","time":{"secs":0,"nanos":453619805}},{"sexp_idx":340,"evt":"start","time":{"secs":0,"nanos":453620535}},{"sexp_idx":340,"evt":"end","time":{"secs":0,"nanos":465546427}},{"sexp_idx":341,"evt":"start","time":{"secs":0,"nanos":465547474}},{"sexp_idx":341,"evt":"end","time":{"secs":0,"nanos":473527801}},{"sexp_idx":342,"evt":"start","time":{"secs":0,"nanos":473528716}},{"sexp_idx":342,"evt":"end","time":{"secs":0,"nanos":482564100}},{"sexp_idx":343,"evt":"start","time":{"secs":0,"nanos":482564916}},{"sexp_idx":343,"evt":"end","time":{"secs":0,"nanos":490948283}},{"sexp_idx":344,"evt":"start","time":{"secs":0,"nanos":490949086}},{"sexp_idx":344,"evt":"end","time":{"secs":0,"nanos":503292293}},{"sexp_idx":345,"evt":"start","time":{"secs":0,"nanos":503292878}},{"sexp_idx":345,"evt":"end","time":{"secs":0,"nanos":515025076}},{"sexp_idx":346,"evt":"start","time":{"secs":0,"nanos":515025911}},{"sexp_idx":346,"evt":"end","time":{"secs":0,"nanos":527692448}},{"sexp_idx":347,"evt":"start","time":{"secs":0,"nanos":527693458}},{"sexp_idx":347,"evt":"end","time":{"secs":0,"nanos":537154033}},{"sexp_idx":348,"evt":"start","time":{"secs":0,"nanos":537154797}},{"sexp_idx":348,"evt":"end","time":{"secs":0,"nanos":546268773}},{"sexp_idx":349,"evt":"start","time":{"secs":0,"nanos":546269617}},{"sexp_idx":349,"evt":"end","time":{"secs":0,"nanos":557203154}},{"sexp_idx":350,"evt":"start","time":{"secs":0,"nanos":557203810}},{"sexp_idx":350,"evt":"end","time":{"secs":0,"nanos":569135885}},{"sexp_idx":351,"evt":"start","time":{"secs":0,"nanos":569136697}},{"sexp_idx":351,"evt":"end","time":{"secs":0,"nanos":578483148}},{"sexp_idx":352,"evt":"start","time":{"secs":0,"nanos":578483997}},{"sexp_idx":352,"evt":"end","time":{"secs":0,"nanos":587711909}},{"sexp_idx":353,"evt":"start","time":{"secs":0,"nanos":587712694}},{"sexp_idx":353,"evt":"end","time":{"secs":0,"nanos":597117510}},{"sexp_idx":354,"evt":"start","time":{"secs":0,"nanos":597118386}},{"sexp_idx":354,"evt":"end","time":{"secs":0,"nanos":606823531}},{"sexp_idx":355,"evt":"start","time":{"secs":0,"nanos":606824494}},{"sexp_idx":355,"evt":"end","time":{"secs":0,"nanos":618528091}},{"sexp_idx":356,"evt":"start","time":{"secs":0,"nanos":618528933}},{"sexp_idx":356,"evt":"end","time":{"secs":0,"nanos":631197989}},{"sexp_idx":357,"evt":"start","time":{"secs":0,"nanos":631198815}},{"sexp_idx":357,"evt":"end","time":{"secs":0,"nanos":645472688}},{"sexp_idx":358,"evt":"start","time":{"secs":0,"nanos":645473628}},{"sexp_idx":358,"evt":"end","time":{"secs":0,"nanos":655967640}},{"sexp_idx":359,"evt":"start","time":{"secs":0,"nanos":655968413}},{"sexp_idx":359,"evt":"end","time":{"secs":0,"nanos":667618460}},{"sexp_idx":360,"evt":"start","time":{"secs":0,"nanos":667619278}},{"sexp_idx":360,"evt":"end","time":{"secs":0,"nanos":680373844}},{"sexp_idx":361,"evt":"start","time":{"secs":0,"nanos":680374676}},{"sexp_idx":361,"evt":"end","time":{"secs":0,"nanos":692221943}},{"sexp_idx":362,"evt":"start","time":{"secs":0,"nanos":692224861}},{"sexp_idx":362,"evt":"end","time":{"secs":0,"nanos":702646805}},{"sexp_idx":363,"evt":"start","time":{"secs":0,"nanos":702647599}},{"sexp_idx":363,"evt":"end","time":{"secs":0,"nanos":715647936}},{"sexp_idx":364,"evt":"start","time":{"secs":0,"nanos":715648803}},{"sexp_idx":364,"evt":"end","time":{"secs":0,"nanos":728625103}},{"sexp_idx":365,"evt":"start","time":{"secs":0,"nanos":728626114}},{"sexp_idx":365,"evt":"end","time":{"secs":0,"nanos":738345714}},{"sexp_idx":366,"evt":"start","time":{"secs":0,"nanos":738346626}},{"sexp_idx":366,"evt":"end","time":{"secs":0,"nanos":752110042}},{"sexp_idx":367,"evt":"start","time":{"secs":0,"nanos":752110745}},{"sexp_idx":367,"evt":"end","time":{"secs":0,"nanos":765682751}},{"sexp_idx":368,"evt":"start","time":{"secs":0,"nanos":765683541}},{"sexp_idx":368,"evt":"end","time":{"secs":0,"nanos":776150694}},{"sexp_idx":369,"evt":"start","time":{"secs":0,"nanos":776152095}},{"sexp_idx":369,"evt":"end","time":{"secs":0,"nanos":789551341}},{"sexp_idx":370,"evt":"start","time":{"secs":0,"nanos":789552314}},{"sexp_idx":370,"evt":"end","time":{"secs":0,"nanos":802962687}},{"sexp_idx":371,"evt":"start","time":{"secs":0,"nanos":802963875}},{"sexp_idx":371,"evt":"end","time":{"secs":0,"nanos":816971918}},{"sexp_idx":372,"evt":"start","time":{"secs":0,"nanos":816972633}},{"sexp_idx":372,"evt":"end","time":{"secs":0,"nanos":827558645}},{"sexp_idx":373,"evt":"start","time":{"secs":0,"nanos":827559709}},{"sexp_idx":373,"evt":"end","time":{"secs":0,"nanos":838071940}},{"sexp_idx":374,"evt":"start","time":{"secs":0,"nanos":838072711}},{"sexp_idx":374,"evt":"end","time":{"secs":0,"nanos":848345388}},{"sexp_idx":375,"evt":"start","time":{"secs":0,"nanos":848346116}},{"sexp_idx":375,"evt":"end","time":{"secs":0,"nanos":858673908}},{"sexp_idx":376,"evt":"start","time":{"secs":0,"nanos":858674678}},{"sexp_idx":376,"evt":"end","time":{"secs":0,"nanos":869617636}},{"sexp_idx":377,"evt":"start","time":{"secs":0,"nanos":869618430}},{"sexp_idx":377,"evt":"end","time":{"secs":0,"nanos":883060835}},{"sexp_idx":378,"evt":"start","time":{"secs":0,"nanos":883061764}},{"sexp_idx":378,"evt":"end","time":{"secs":0,"nanos":896965601}},{"sexp_idx":379,"evt":"start","time":{"secs":0,"nanos":896966499}},{"sexp_idx":379,"evt":"end","time":{"secs":0,"nanos":910569753}},{"sexp_idx":380,"evt":"start","time":{"secs":0,"nanos":910570743}},{"sexp_idx":380,"evt":"end","time":{"secs":0,"nanos":922222719}},{"sexp_idx":381,"evt":"start","time":{"secs":0,"nanos":922223580}},{"sexp_idx":381,"evt":"end","time":{"secs":0,"nanos":933111370}},{"sexp_idx":382,"evt":"start","time":{"secs":0,"nanos":933112327}},{"sexp_idx":382,"evt":"end","time":{"secs":0,"nanos":943718594}},{"sexp_idx":383,"evt":"start","time":{"secs":0,"nanos":943719401}},{"sexp_idx":383,"evt":"end","time":{"secs":0,"nanos":957464880}},{"sexp_idx":384,"evt":"start","time":{"secs":0,"nanos":957465666}},{"sexp_idx":384,"evt":"end","time":{"secs":0,"nanos":972419485}},{"sexp_idx":385,"evt":"start","time":{"secs":0,"nanos":972420187}},{"sexp_idx":385,"evt":"end","time":{"secs":0,"nanos":983705088}},{"sexp_idx":386,"evt":"start","time":{"secs":0,"nanos":983705881}},{"sexp_idx":386,"evt":"end","time":{"secs":0,"nanos":997184513}},{"sexp_idx":387,"evt":"start","time":{"secs":0,"nanos":997185493}},{"sexp_idx":387,"evt":"end","time":{"secs":1,"nanos":7979866}},{"sexp_idx":388,"evt":"start","time":{"secs":1,"nanos":7980604}},{"sexp_idx":388,"evt":"end","time":{"secs":1,"nanos":22678540}},{"sexp_idx":389,"evt":"start","time":{"secs":1,"nanos":22679467}},{"sexp_idx":389,"evt":"end","time":{"secs":1,"nanos":35636227}},{"sexp_idx":390,"evt":"start","time":{"secs":1,"nanos":35637190}},{"sexp_idx":390,"evt":"end","time":{"secs":1,"nanos":50793980}},{"sexp_idx":391,"evt":"start","time":{"secs":1,"nanos":50794946}},{"sexp_idx":391,"evt":"end","time":{"secs":1,"nanos":62074927}},{"sexp_idx":392,"evt":"start","time":{"secs":1,"nanos":62075935}},{"sexp_idx":392,"evt":"end","time":{"secs":1,"nanos":77053917}},{"sexp_idx":393,"evt":"start","time":{"secs":1,"nanos":77054746}},{"sexp_idx":393,"evt":"end","time":{"secs":1,"nanos":91835745}},{"sexp_idx":394,"evt":"start","time":{"secs":1,"nanos":91836501}},{"sexp_idx":394,"evt":"end","time":{"secs":1,"nanos":104256474}},{"sexp_idx":395,"evt":"start","time":{"secs":1,"nanos":104257323}},{"sexp_idx":395,"evt":"end","time":{"secs":1,"nanos":119805072}},{"sexp_idx":396,"evt":"start","time":{"secs":1,"nanos":119805881}},{"sexp_idx":396,"evt":"end","time":{"secs":1,"nanos":131536015}},{"sexp_idx":397,"evt":"start","time":{"secs":1,"nanos":131536782}},{"sexp_idx":397,"evt":"end","time":{"secs":1,"nanos":147349883}},{"sexp_idx":398,"evt":"start","time":{"secs":1,"nanos":147350706}},{"sexp_idx":398,"evt":"end","time":{"secs":1,"nanos":163703701}},{"sexp_idx":399,"evt":"start","time":{"secs":1,"nanos":163704599}},{"sexp_idx":399,"evt":"end","time":{"secs":1,"nanos":178467468}},{"sexp_idx":400,"evt":"start","time":{"secs":1,"nanos":178468259}},{"sexp_idx":400,"evt":"end","time":{"secs":1,"nanos":190728191}},{"sexp_idx":401,"evt":"start","time":{"secs":1,"nanos":190729116}},{"sexp_idx":401,"evt":"end","time":{"secs":1,"nanos":206786822}},{"sexp_idx":402,"evt":"start","time":{"secs":1,"nanos":206787613}},{"sexp_idx":402,"evt":"end","time":{"secs":1,"nanos":222455308}},{"sexp_idx":403,"evt":"start","time":{"secs":1,"nanos":222456180}},{"sexp_idx":403,"evt":"end","time":{"secs":1,"nanos":237799470}},{"sexp_idx":404,"evt":"start","time":{"secs":1,"nanos":237800382}},{"sexp_idx":404,"evt":"end","time":{"secs":1,"nanos":250201508}},{"sexp_idx":405,"evt":"start","time":{"secs":1,"nanos":250203059}},{"sexp_idx":405,"evt":"end","time":{"secs":1,"nanos":262661782}},{"sexp_idx":406,"evt":"start","time":{"secs":1,"nanos":262662776}},{"sexp_idx":406,"evt":"end","time":{"secs":1,"nanos":274496079}},{"sexp_idx":407,"evt":"start","time":{"secs":1,"nanos":274496956}},{"sexp_idx":407,"evt":"end","time":{"secs":1,"nanos":286878127}},{"sexp_idx":408,"evt":"start","time":{"secs":1,"nanos":286878900}},{"sexp_idx":408,"evt":"end","time":{"secs":1,"nanos":301280584}},{"sexp_idx":409,"evt":"start","time":{"secs":1,"nanos":301281410}},{"sexp_idx":409,"evt":"end","time":{"secs":1,"nanos":313710208}},{"sexp_idx":410,"evt":"start","time":{"secs":1,"nanos":313711035}},{"sexp_idx":410,"evt":"end","time":{"secs":1,"nanos":325725359}},{"sexp_idx":411,"evt":"start","time":{"secs":1,"nanos":325726373}},{"sexp_idx":411,"evt":"end","time":{"secs":1,"nanos":338349192}},{"sexp_idx":412,"evt":"start","time":{"secs":1,"nanos":338350179}},{"sexp_idx":412,"evt":"end","time":{"secs":21,"nanos":609725563}}]}]