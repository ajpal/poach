(datatype
 M
 (Num BigRat :cost 4294967295)
 (Var String :cost 4294967295)
 (Neq M M :cost 4294967295)
 (Unsound-!= M M :cost 4294967295)
 (Mul M M :cost 4294967295)
 (Unsound-* M M :cost 4294967295)
 (Add M M :cost 4294967295)
 (Unsound-+ M M :cost 4294967295)
 (Sub M M :cost 4294967295)
 (Unsound-- M M :cost 4294967295)
 (Div M M :cost 4294967295)
 (Unsound-/ M M :cost 4294967295)
 (Lt M M :cost 4294967295)
 (Unsound-< M M :cost 4294967295)
 (Lte M M :cost 4294967295)
 (Unsound-<= M M :cost 4294967295)
 (Eq M M :cost 4294967295)
 (Unsound-== M M :cost 4294967295)
 (Gt M M :cost 4294967295)
 (Unsound-> M M :cost 4294967295)
 (Gte M M :cost 4294967295)
 (Unsound->= M M :cost 4294967295)
 (E :cost 4294967295)
 (Unsound-E :cost 4294967295)
 (False :cost 4294967295)
 (Unsound-False :cost 4294967295)
 (Infinity :cost 4294967295)
 (Unsound-Infinity :cost 4294967295)
 (Nan :cost 4294967295)
 (Unsound-Nan :cost 4294967295)
 (Pi :cost 4294967295)
 (Unsound-Pi :cost 4294967295)
 (True :cost 4294967295)
 (Unsound-True :cost 4294967295)
 (Acos M :cost 4294967295)
 (Unsound-Acos M :cost 4294967295)
 (Acosh M :cost 4294967295)
 (Unsound-Acosh M :cost 4294967295)
 (And M M :cost 4294967295)
 (Unsound-And M M :cost 4294967295)
 (Asin M :cost 4294967295)
 (Unsound-Asin M :cost 4294967295)
 (Asinh M :cost 4294967295)
 (Unsound-Asinh M :cost 4294967295)
 (Assert M :cost 4294967295)
 (Unsound-Assert M :cost 4294967295)
 (Atan M :cost 4294967295)
 (Unsound-Atan M :cost 4294967295)
 (Atan2 M M :cost 4294967295)
 (Unsound-Atan2 M M :cost 4294967295)
 (Atanh M :cost 4294967295)
 (Unsound-Atanh M :cost 4294967295)
 (Cast M :cost 4294967295)
 (Unsound-Cast M :cost 4294967295)
 (Cbrt M :cost 4294967295)
 (Unsound-Cbrt M :cost 4294967295)
 (Ceil M :cost 4294967295)
 (Unsound-Ceil M :cost 4294967295)
 (Copysign M M :cost 4294967295)
 (Unsound-Copysign M M :cost 4294967295)
 (Cos M :cost 4294967295)
 (Unsound-Cos M :cost 4294967295)
 (Cosh M :cost 4294967295)
 (Unsound-Cosh M :cost 4294967295)
 (Erf M :cost 4294967295)
 (Unsound-Erf M :cost 4294967295)
 (Erfc M :cost 4294967295)
 (Unsound-Erfc M :cost 4294967295)
 (Error M :cost 4294967295)
 (Unsound-Error M :cost 4294967295)
 (Exp M :cost 4294967295)
 (Unsound-Exp M :cost 4294967295)
 (Exp2 M :cost 4294967295)
 (Unsound-Exp2 M :cost 4294967295)
 (Expm1 M :cost 4294967295)
 (Unsound-Expm1 M :cost 4294967295)
 (Fabs M :cost 4294967295)
 (Unsound-Fabs M :cost 4294967295)
 (Fdim M M :cost 4294967295)
 (Unsound-Fdim M M :cost 4294967295)
 (Floor M :cost 4294967295)
 (Unsound-Floor M :cost 4294967295)
 (Fma M M M :cost 4294967295)
 (Unsound-Fma M M M :cost 4294967295)
 (Fmax M M :cost 4294967295)
 (Unsound-Fmax M M :cost 4294967295)
 (Fmin M M :cost 4294967295)
 (Unsound-Fmin M M :cost 4294967295)
 (Fmod M M :cost 4294967295)
 (Unsound-Fmod M M :cost 4294967295)
 (Hypot M M :cost 4294967295)
 (Unsound-Hypot M M :cost 4294967295)
 (If M M M :cost 4294967295)
 (Unsound-If M M M :cost 4294967295)
 (Lgamma M :cost 4294967295)
 (Unsound-Lgamma M :cost 4294967295)
 (Log M :cost 4294967295)
 (Unsound-Log M :cost 4294967295)
 (Log10 M :cost 4294967295)
 (Unsound-Log10 M :cost 4294967295)
 (Log1p M :cost 4294967295)
 (Unsound-Log1p M :cost 4294967295)
 (Log2 M :cost 4294967295)
 (Unsound-Log2 M :cost 4294967295)
 (Logb M :cost 4294967295)
 (Unsound-Logb M :cost 4294967295)
 (Neg M :cost 4294967295)
 (Unsound-Neg M :cost 4294967295)
 (Not M :cost 4294967295)
 (Unsound-Not M :cost 4294967295)
 (Or M M :cost 4294967295)
 (Unsound-Or M M :cost 4294967295)
 (Pow M M :cost 4294967295)
 (Unsound-Pow M M :cost 4294967295)
 (Pow2 M :cost 4294967295)
 (Unsound-Pow2 M :cost 4294967295)
 (Remainder M M :cost 4294967295)
 (Unsound-Remainder M M :cost 4294967295)
 (Rint M :cost 4294967295)
 (Unsound-Rint M :cost 4294967295)
 (Round M :cost 4294967295)
 (Unsound-Round M :cost 4294967295)
 (Sin M :cost 4294967295)
 (Unsound-Sin M :cost 4294967295)
 (Sinh M :cost 4294967295)
 (Unsound-Sinh M :cost 4294967295)
 (Sqrt M :cost 4294967295)
 (Unsound-Sqrt M :cost 4294967295)
 (Tan M :cost 4294967295)
 (Unsound-Tan M :cost 4294967295)
 (Tanh M :cost 4294967295)
 (Unsound-Tanh M :cost 4294967295)
 (Tgamma M :cost 4294967295)
 (Unsound-Tgamma M :cost 4294967295)
 (Then M :cost 4294967295)
 (Unsound-Then M :cost 4294967295)
 (Trunc M :cost 4294967295)
 (Unsound-Trunc M :cost 4294967295))
(datatype
 MTy
 (Numbinary64 BigRat :cost 125)
 (Numbinary32 BigRat :cost 125)
 (Varbool String :cost 100)
 (Varbinary64 String :cost 125)
 (Varbinary32 String :cost 125)
 (Approx M MTy)
 (Atan2f32Ty MTy MTy :cost 2000)
 (Remainderf32Ty MTy MTy :cost 1000)
 (Cbrtf64Ty MTy :cost 2000)
 (Mulf32Ty MTy MTy :cost 250)
 (Ef32Ty :cost 125)
 (Sinhf32Ty MTy :cost 1750)
 (Neqf64Ty MTy MTy :cost 125)
 (NotTy MTy :cost 100)
 (Log10f32Ty MTy :cost 1175)
 (Truncf64Ty MTy :cost 250)
 (Asinf32Ty MTy :cost 500)
 (Ltf32Ty MTy MTy :cost 125)
 (Fdimf32Ty MTy MTy :cost 750)
 (AndTy MTy MTy :cost 100)
 (TrueTy :cost 100)
 (Fmaf64Ty MTy MTy MTy :cost 375)
 (Sqrtf64Ty MTy :cost 250)
 (Fdimf64Ty MTy MTy :cost 750)
 (Lgammaf64Ty MTy :cost 2250)
 (FalseTy :cost 100)
 (Hypotf32Ty MTy MTy :cost 1700)
 (Log1pf64Ty MTy :cost 1300)
 (Logf64Ty MTy :cost 750)
 (Negf32Ty MTy :cost 125)
 (Erff32Ty MTy :cost 1125)
 (Tanf64Ty MTy :cost 4650)
 (Eqf32Ty MTy MTy :cost 125)
 (Logf32Ty MTy :cost 750)
 (Fminf32Ty MTy MTy :cost 250)
 (Expm1f32Ty MTy :cost 900)
 (Rintf64Ty MTy :cost 300)
 (Subf32Ty MTy MTy :cost 200)
 (Exp2f32Ty MTy :cost 1175)
 (Cbrtf32Ty MTy :cost 2000)
 (Fmodf64Ty MTy MTy :cost 1750)
 (Fmaxf64Ty MTy MTy :cost 250)
 (Atanhf64Ty MTy :cost 450)
 (Log10f64Ty MTy :cost 1175)
 (Infinityf32Ty :cost 125)
 (Nanf64Ty :cost 125)
 (Cosf64Ty MTy :cost 4200)
 (Fminf64Ty MTy MTy :cost 250)
 (Expf32Ty MTy :cost 1375)
 (Lgammaf32Ty MTy :cost 2250)
 (Log2f32Ty MTy :cost 875)
 (Fmaxf32Ty MTy MTy :cost 250)
 (Sinhf64Ty MTy :cost 1750)
 (Truncf32Ty MTy :cost 275)
 (Tanhf64Ty MTy :cost 1000)
 (Ltef64Ty MTy MTy :cost 125)
 (Fmaf32Ty MTy MTy MTy :cost 375)
 (Subf64Ty MTy MTy :cost 200)
 (OrTy MTy MTy :cost 100)
 (Fabsf64Ty MTy :cost 125)
 (Addf64Ty MTy MTy :cost 200)
 (Sinf64Ty MTy :cost 4200)
 (Ceilf64Ty MTy :cost 250)
 (Tanf32Ty MTy :cost 4750)
 (Powf32Ty MTy MTy :cost 2000)
 (Tgammaf64Ty MTy :cost 2625)
 (Iff64Ty MTy MTy MTy :cost 0)
 (Sqrtf32Ty MTy :cost 250)
 (Pif32Ty :cost 125)
 (Nanf32Ty :cost 125)
 (Neqf32Ty MTy MTy :cost 125)
 (Fabsf32Ty MTy :cost 125)
 (Gtef32Ty MTy MTy :cost 125)
 (Logbf32Ty MTy :cost 375)
 (Erfcf64Ty MTy :cost 900)
 (Atanf32Ty MTy :cost 1100)
 (Acoshf64Ty MTy :cost 850)
 (Divf32Ty MTy MTy :cost 350)
 (Gtf32Ty MTy MTy :cost 125)
 (Atan2f64Ty MTy MTy :cost 2000)
 (Roundf64Ty MTy :cost 850)
 (Floorf64Ty MTy :cost 300)
 (Hypotf64Ty MTy MTy :cost 1700)
 (Asinhf32Ty MTy :cost 1125)
 (Negf64Ty MTy :cost 125)
 (Exp2f64Ty MTy :cost 1175)
 (Fmodf32Ty MTy MTy :cost 1750)
 (Ceilf32Ty MTy :cost 250)
 (Ef64Ty :cost 125)
 (Powf64Ty MTy MTy :cost 2000)
 (Atanf64Ty MTy :cost 1100)
 (Gtef64Ty MTy MTy :cost 125)
 (Eqf64Ty MTy MTy :cost 125)
 (Logbf64Ty MTy :cost 350)
 (Mulf64Ty MTy MTy :cost 250)
 (Coshf32Ty MTy :cost 1250)
 (Iff32Ty MTy MTy MTy :cost 0)
 (Floorf32Ty MTy :cost 250)
 (Acosf32Ty MTy :cost 500)
 (Ltef32Ty MTy MTy :cost 125)
 (Divf64Ty MTy MTy :cost 350)
 (Expf64Ty MTy :cost 1375)
 (Roundf32Ty MTy :cost 875)
 (Erfcf32Ty MTy :cost 900)
 (Rintf32Ty MTy :cost 300)
 (Tgammaf32Ty MTy :cost 2625)
 (Acosf64Ty MTy :cost 500)
 (Log1pf32Ty MTy :cost 1300)
 (Expm1f64Ty MTy :cost 900)
 (Asinf64Ty MTy :cost 500)
 (Coshf64Ty MTy :cost 1650)
 (Acoshf32Ty MTy :cost 850)
 (Ltf64Ty MTy MTy :cost 125)
 (Remainderf64Ty MTy MTy :cost 1000)
 (Copysignf64Ty MTy MTy :cost 200)
 (Log2f64Ty MTy :cost 850)
 (Atanhf32Ty MTy :cost 500)
 (Asinhf64Ty MTy :cost 1125)
 (Sinf32Ty MTy :cost 4250)
 (Addf32Ty MTy MTy :cost 200)
 (Pif64Ty :cost 125)
 (Tanhf32Ty MTy :cost 1000)
 (Gtf64Ty MTy MTy :cost 125)
 (Cosf32Ty MTy :cost 4250)
 (InfinityTy :cost 125)
 (Copysignf32Ty MTy MTy :cost 200)
 (Erff64Ty MTy :cost 1125))
(constructor lower (M String) MTy :unextractable)
(constructor lift (MTy) M :unextractable)
(ruleset const-fold)
(ruleset lowering)
(ruleset lifting)
(function unsound () bool :merge (or old new))
(ruleset unsound-rule)
(set (unsound) false)
(rule
 ((= (Num c1) (Num c2)) (!= c1 c2))
 ((set (unsound) true))
 :ruleset
 unsound-rule)
(let ?zero (bigrat (from-string "0") (from-string "1")))
(rewrite (Add (Num x) (Num y)) (Num (+ x y)) :ruleset const-fold)
(rewrite (Sub (Num x) (Num y)) (Num (- x y)) :ruleset const-fold)
(rewrite (Mul (Num x) (Num y)) (Num (* x y)) :ruleset const-fold)
(rule
 ((= e (Div (Num x) (Num y))) (!= ?zero y))
 ((union e (Num (/ x y))))
 :ruleset
 const-fold)
(rewrite (Neg (Num x)) (Num (neg x)) :ruleset const-fold)
(rule
 ((= e (Pow (Num x) (Num y))) (= ?zero x) (> y ?zero))
 ((union e (Num ?zero)))
 :ruleset
 const-fold)
(rule
 ((= e (Pow (Num x) (Num y))) (= ?zero y) (!= ?zero x))
 ((union e (Num (bigrat (from-string "1") (from-string "1")))))
 :ruleset
 const-fold)
(rule
 ((= e (Pow (Num x) (Num y))) (> y ?zero) (!= ?zero x) (= y (round y)))
 ((union e (Num (pow x y))))
 :ruleset
 const-fold)
(rule
 ((= e (Pow (Num x) (Num y))) (> y ?zero) (!= ?zero x) (!= y (round y)))
 ((union e (Num (pow x (round y)))))
 :ruleset
 const-fold)
(rule
 ((= e (Sqrt (Num n))) (sqrt n))
 ((union e (Num (sqrt n))))
 :ruleset
 const-fold)
(rule
 ((= e (Log (Num x))) (= (numer x) (denom x)))
 ((union e (Num ?zero)))
 :ruleset
 const-fold)
(rule
 ((= e (Cbrt (Num x))) (= (numer x) (denom x)))
 ((union e (Num (bigrat (from-string "1") (from-string "1")))))
 :ruleset
 const-fold)
(rewrite (Fabs (Num x)) (Num (abs x)) :ruleset const-fold)
(rewrite (Floor (Num x)) (Num (floor x)) :ruleset const-fold)
(rewrite (Ceil (Num x)) (Num (ceil x)) :ruleset const-fold)
(rewrite (Round (Num x)) (Num (round x)) :ruleset const-fold)
(rule
 ((= e (Atan2 x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
 ((let t0 "binary32") (let et0 (Atan2f32Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Remainder x y))
  (= tx (lower x "binary32"))
  (= ty (lower y "binary32")))
 ((let t0 "binary32")
  (let et0 (Remainderf32Ty tx ty))
  (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Cbrt x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Cbrtf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Mul x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
 ((let t0 "binary32") (let et0 (Mulf32Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (E)))
 ((let t0 "binary32") (let et0 (Ef32Ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Sinh x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Sinhf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Neq x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
 ((let t0 "bool") (let et0 (Neqf64Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Not x)) (= tx (lower x "bool")))
 ((let t0 "bool") (let et0 (NotTy tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Log10 x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Log10f32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Trunc x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Truncf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Asin x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Asinf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Lt x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
 ((let t0 "bool") (let et0 (Ltf32Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Fdim x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
 ((let t0 "binary32") (let et0 (Fdimf32Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (And x y)) (= tx (lower x "bool")) (= ty (lower y "bool")))
 ((let t0 "bool") (let et0 (AndTy tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (True)))
 ((let t0 "bool") (let et0 (TrueTy)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Add (Mul x y) z))
  (= tx (lower x "binary64"))
  (= ty (lower y "binary64"))
  (= tz (lower z "binary64")))
 ((let t0 "binary64") (let et0 (Fmaf64Ty tx ty tz)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Sqrt x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Sqrtf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Fdim x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
 ((let t0 "binary64") (let et0 (Fdimf64Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Lgamma x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Lgammaf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (False)))
 ((let t0 "bool") (let et0 (FalseTy)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Sqrt (Add (Mul x x) (Mul y y))))
  (= tx (lower x "binary32"))
  (= ty (lower y "binary32")))
 ((let t0 "binary32") (let et0 (Hypotf32Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Log (Add (Num (bigrat (from-string "1") (from-string "1"))) x)))
  (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Log1pf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Log x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Logf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Neg x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Negf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Erf x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Erff32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Tan x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Tanf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Eq x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
 ((let t0 "bool") (let et0 (Eqf32Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Log x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Logf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Fmin x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
 ((let t0 "binary32") (let et0 (Fminf32Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Sub (Exp x) (Num (bigrat (from-string "1") (from-string "1")))))
  (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Expm1f32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Rint x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Rintf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Sub x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
 ((let t0 "binary32") (let et0 (Subf32Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Exp2 x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Exp2f32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Cbrt x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Cbrtf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Fmod x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
 ((let t0 "binary64") (let et0 (Fmodf64Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Fmax x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
 ((let t0 "binary64") (let et0 (Fmaxf64Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Atanh x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Atanhf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Log10 x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Log10f64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Infinity)))
 ((let t0 "binary32") (let et0 (Infinityf32Ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Nan)))
 ((let t0 "binary64") (let et0 (Nanf64Ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Cos x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Cosf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Fmin x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
 ((let t0 "binary64") (let et0 (Fminf64Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Exp x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Expf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Lgamma x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Lgammaf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Log2 x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Log2f32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Fmax x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
 ((let t0 "binary32") (let et0 (Fmaxf32Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Sinh x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Sinhf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Trunc x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Truncf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Tanh x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Tanhf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Lte x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
 ((let t0 "bool") (let et0 (Ltef64Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Add (Mul x y) z))
  (= tx (lower x "binary32"))
  (= ty (lower y "binary32"))
  (= tz (lower z "binary32")))
 ((let t0 "binary32") (let et0 (Fmaf32Ty tx ty tz)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Sub x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
 ((let t0 "binary64") (let et0 (Subf64Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Or x y)) (= tx (lower x "bool")) (= ty (lower y "bool")))
 ((let t0 "bool") (let et0 (OrTy tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Fabs x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Fabsf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Add x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
 ((let t0 "binary64") (let et0 (Addf64Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Sin x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Sinf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Ceil x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Ceilf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Tan x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Tanf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Pow x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
 ((let t0 "binary32") (let et0 (Powf32Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Tgamma x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Tgammaf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (If c t f))
  (= tc (lower c "bool"))
  (= tt (lower t "binary64"))
  (= tf (lower f "binary64")))
 ((let t0 "binary64") (let et0 (Iff64Ty tc tt tf)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Sqrt x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Sqrtf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Pi)))
 ((let t0 "binary32") (let et0 (Pif32Ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Nan)))
 ((let t0 "binary32") (let et0 (Nanf32Ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Neq x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
 ((let t0 "bool") (let et0 (Neqf32Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Fabs x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Fabsf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Gte x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
 ((let t0 "bool") (let et0 (Gtef32Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Logb x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Logbf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Sub (Num (bigrat (from-string "1") (from-string "1"))) (Erf x)))
  (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Erfcf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Atan x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Atanf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Acosh x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Acoshf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Div x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
 ((let t0 "binary32") (let et0 (Divf32Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Gt x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
 ((let t0 "bool") (let et0 (Gtf32Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Atan2 x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
 ((let t0 "binary64") (let et0 (Atan2f64Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Round x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Roundf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Floor x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Floorf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Sqrt (Add (Mul x x) (Mul y y))))
  (= tx (lower x "binary64"))
  (= ty (lower y "binary64")))
 ((let t0 "binary64") (let et0 (Hypotf64Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Asinh x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Asinhf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Neg x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Negf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Exp2 x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Exp2f64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Fmod x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
 ((let t0 "binary32") (let et0 (Fmodf32Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Ceil x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Ceilf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (E)))
 ((let t0 "binary64") (let et0 (Ef64Ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Pow x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
 ((let t0 "binary64") (let et0 (Powf64Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Atan x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Atanf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Gte x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
 ((let t0 "bool") (let et0 (Gtef64Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Eq x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
 ((let t0 "bool") (let et0 (Eqf64Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Logb x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Logbf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Mul x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
 ((let t0 "binary64") (let et0 (Mulf64Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Cosh x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Coshf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (If c t f))
  (= tc (lower c "bool"))
  (= tt (lower t "binary32"))
  (= tf (lower f "binary32")))
 ((let t0 "binary32") (let et0 (Iff32Ty tc tt tf)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Floor x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Floorf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Acos x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Acosf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Lte x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
 ((let t0 "bool") (let et0 (Ltef32Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Div x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
 ((let t0 "binary64") (let et0 (Divf64Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Exp x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Expf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Round x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Roundf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Sub (Num (bigrat (from-string "1") (from-string "1"))) (Erf x)))
  (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Erfcf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Rint x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Rintf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Tgamma x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Tgammaf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Acos x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Acosf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Log (Add (Num (bigrat (from-string "1") (from-string "1"))) x)))
  (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Log1pf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Sub (Exp x) (Num (bigrat (from-string "1") (from-string "1")))))
  (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Expm1f64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Asin x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Asinf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Cosh x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Coshf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Acosh x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Acoshf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Lt x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
 ((let t0 "bool") (let et0 (Ltf64Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Remainder x y))
  (= tx (lower x "binary64"))
  (= ty (lower y "binary64")))
 ((let t0 "binary64")
  (let et0 (Remainderf64Ty tx ty))
  (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Copysign x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
 ((let t0 "binary64") (let et0 (Copysignf64Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Log2 x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Log2f64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Atanh x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Atanhf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Asinh x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Asinhf64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Sin x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Sinf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Add x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
 ((let t0 "binary32") (let et0 (Addf32Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Pi)))
 ((let t0 "binary64") (let et0 (Pif64Ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Tanh x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Tanhf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Gt x y)) (= tx (lower x "binary64")) (= ty (lower y "binary64")))
 ((let t0 "bool") (let et0 (Gtf64Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Cos x)) (= tx (lower x "binary32")))
 ((let t0 "binary32") (let et0 (Cosf32Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Infinity)))
 ((let t0 "binary64") (let et0 (InfinityTy)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Copysign x y)) (= tx (lower x "binary32")) (= ty (lower y "binary32")))
 ((let t0 "binary32") (let et0 (Copysignf32Ty tx ty)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Erf x)) (= tx (lower x "binary64")))
 ((let t0 "binary64") (let et0 (Erff64Ty tx)) (union (lower e t0) et0))
 :ruleset
 lowering)
(rule
 ((= e (Atan2f32Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Atan2 sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Remainderf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Remainder sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Cbrtf64Ty x)) (= sx (lift x)))
 ((let se (Cbrt sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Mulf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Mul sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule ((= e (Ef32Ty))) ((let se (E)) (union (lift e) se)) :ruleset lifting)
(rule
 ((= e (Sinhf32Ty x)) (= sx (lift x)))
 ((let se (Sinh sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Neqf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Neq sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (NotTy x)) (= sx (lift x)))
 ((let se (Not sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Log10f32Ty x)) (= sx (lift x)))
 ((let se (Log10 sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Truncf64Ty x)) (= sx (lift x)))
 ((let se (Trunc sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Asinf32Ty x)) (= sx (lift x)))
 ((let se (Asin sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Ltf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Lt sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Fdimf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Fdim sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (AndTy x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (And sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule ((= e (TrueTy))) ((let se (True)) (union (lift e) se)) :ruleset lifting)
(rule
 ((= e (Fmaf64Ty x y z)) (= sx (lift x)) (= sy (lift y)) (= sz (lift z)))
 ((let se (Add (Mul sx sy) sz)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Sqrtf64Ty x)) (= sx (lift x)))
 ((let se (Sqrt sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Fdimf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Fdim sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Lgammaf64Ty x)) (= sx (lift x)))
 ((let se (Lgamma sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (FalseTy)))
 ((let se (False)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Hypotf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Sqrt (Add (Mul sx sx) (Mul sy sy)))) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Log1pf64Ty x)) (= sx (lift x)))
 ((let se (Log (Add (Num (bigrat (from-string "1") (from-string "1"))) sx)))
  (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Logf64Ty x)) (= sx (lift x)))
 ((let se (Log sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Negf32Ty x)) (= sx (lift x)))
 ((let se (Neg sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Erff32Ty x)) (= sx (lift x)))
 ((let se (Erf sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Tanf64Ty x)) (= sx (lift x)))
 ((let se (Tan sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Eqf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Eq sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Logf32Ty x)) (= sx (lift x)))
 ((let se (Log sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Fminf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Fmin sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Expm1f32Ty x)) (= sx (lift x)))
 ((let se (Sub (Exp sx) (Num (bigrat (from-string "1") (from-string "1")))))
  (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Rintf64Ty x)) (= sx (lift x)))
 ((let se (Rint sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Subf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Sub sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Exp2f32Ty x)) (= sx (lift x)))
 ((let se (Exp2 sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Cbrtf32Ty x)) (= sx (lift x)))
 ((let se (Cbrt sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Fmodf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Fmod sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Fmaxf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Fmax sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Atanhf64Ty x)) (= sx (lift x)))
 ((let se (Atanh sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Log10f64Ty x)) (= sx (lift x)))
 ((let se (Log10 sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Infinityf32Ty)))
 ((let se (Infinity)) (union (lift e) se))
 :ruleset
 lifting)
(rule ((= e (Nanf64Ty))) ((let se (Nan)) (union (lift e) se)) :ruleset lifting)
(rule
 ((= e (Cosf64Ty x)) (= sx (lift x)))
 ((let se (Cos sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Fminf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Fmin sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Expf32Ty x)) (= sx (lift x)))
 ((let se (Exp sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Lgammaf32Ty x)) (= sx (lift x)))
 ((let se (Lgamma sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Log2f32Ty x)) (= sx (lift x)))
 ((let se (Log2 sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Fmaxf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Fmax sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Sinhf64Ty x)) (= sx (lift x)))
 ((let se (Sinh sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Truncf32Ty x)) (= sx (lift x)))
 ((let se (Trunc sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Tanhf64Ty x)) (= sx (lift x)))
 ((let se (Tanh sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Ltef64Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Lte sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Fmaf32Ty x y z)) (= sx (lift x)) (= sy (lift y)) (= sz (lift z)))
 ((let se (Add (Mul sx sy) sz)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Subf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Sub sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (OrTy x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Or sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Fabsf64Ty x)) (= sx (lift x)))
 ((let se (Fabs sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Addf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Add sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Sinf64Ty x)) (= sx (lift x)))
 ((let se (Sin sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Ceilf64Ty x)) (= sx (lift x)))
 ((let se (Ceil sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Tanf32Ty x)) (= sx (lift x)))
 ((let se (Tan sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Powf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Pow sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Tgammaf64Ty x)) (= sx (lift x)))
 ((let se (Tgamma sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Iff64Ty c t f)) (= sc (lift c)) (= st (lift t)) (= sf (lift f)))
 ((let se (If sc st sf)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Sqrtf32Ty x)) (= sx (lift x)))
 ((let se (Sqrt sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule ((= e (Pif32Ty))) ((let se (Pi)) (union (lift e) se)) :ruleset lifting)
(rule ((= e (Nanf32Ty))) ((let se (Nan)) (union (lift e) se)) :ruleset lifting)
(rule
 ((= e (Neqf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Neq sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Fabsf32Ty x)) (= sx (lift x)))
 ((let se (Fabs sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Gtef32Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Gte sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Logbf32Ty x)) (= sx (lift x)))
 ((let se (Logb sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Erfcf64Ty x)) (= sx (lift x)))
 ((let se (Sub (Num (bigrat (from-string "1") (from-string "1"))) (Erf sx)))
  (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Atanf32Ty x)) (= sx (lift x)))
 ((let se (Atan sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Acoshf64Ty x)) (= sx (lift x)))
 ((let se (Acosh sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Divf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Div sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Gtf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Gt sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Atan2f64Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Atan2 sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Roundf64Ty x)) (= sx (lift x)))
 ((let se (Round sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Floorf64Ty x)) (= sx (lift x)))
 ((let se (Floor sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Hypotf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Sqrt (Add (Mul sx sx) (Mul sy sy)))) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Asinhf32Ty x)) (= sx (lift x)))
 ((let se (Asinh sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Negf64Ty x)) (= sx (lift x)))
 ((let se (Neg sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Exp2f64Ty x)) (= sx (lift x)))
 ((let se (Exp2 sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Fmodf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Fmod sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Ceilf32Ty x)) (= sx (lift x)))
 ((let se (Ceil sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule ((= e (Ef64Ty))) ((let se (E)) (union (lift e) se)) :ruleset lifting)
(rule
 ((= e (Powf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Pow sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Atanf64Ty x)) (= sx (lift x)))
 ((let se (Atan sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Gtef64Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Gte sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Eqf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Eq sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Logbf64Ty x)) (= sx (lift x)))
 ((let se (Logb sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Mulf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Mul sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Coshf32Ty x)) (= sx (lift x)))
 ((let se (Cosh sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Iff32Ty c t f)) (= sc (lift c)) (= st (lift t)) (= sf (lift f)))
 ((let se (If sc st sf)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Floorf32Ty x)) (= sx (lift x)))
 ((let se (Floor sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Acosf32Ty x)) (= sx (lift x)))
 ((let se (Acos sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Ltef32Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Lte sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Divf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Div sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Expf64Ty x)) (= sx (lift x)))
 ((let se (Exp sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Roundf32Ty x)) (= sx (lift x)))
 ((let se (Round sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Erfcf32Ty x)) (= sx (lift x)))
 ((let se (Sub (Num (bigrat (from-string "1") (from-string "1"))) (Erf sx)))
  (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Rintf32Ty x)) (= sx (lift x)))
 ((let se (Rint sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Tgammaf32Ty x)) (= sx (lift x)))
 ((let se (Tgamma sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Acosf64Ty x)) (= sx (lift x)))
 ((let se (Acos sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Log1pf32Ty x)) (= sx (lift x)))
 ((let se (Log (Add (Num (bigrat (from-string "1") (from-string "1"))) sx)))
  (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Expm1f64Ty x)) (= sx (lift x)))
 ((let se (Sub (Exp sx) (Num (bigrat (from-string "1") (from-string "1")))))
  (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Asinf64Ty x)) (= sx (lift x)))
 ((let se (Asin sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Coshf64Ty x)) (= sx (lift x)))
 ((let se (Cosh sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Acoshf32Ty x)) (= sx (lift x)))
 ((let se (Acosh sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Ltf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Lt sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Remainderf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Remainder sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Copysignf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Copysign sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Log2f64Ty x)) (= sx (lift x)))
 ((let se (Log2 sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Atanhf32Ty x)) (= sx (lift x)))
 ((let se (Atanh sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Asinhf64Ty x)) (= sx (lift x)))
 ((let se (Asinh sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Sinf32Ty x)) (= sx (lift x)))
 ((let se (Sin sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Addf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Add sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule ((= e (Pif64Ty))) ((let se (Pi)) (union (lift e) se)) :ruleset lifting)
(rule
 ((= e (Tanhf32Ty x)) (= sx (lift x)))
 ((let se (Tanh sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Gtf64Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Gt sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Cosf32Ty x)) (= sx (lift x)))
 ((let se (Cos sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (InfinityTy)))
 ((let se (Infinity)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Copysignf32Ty x y)) (= sx (lift x)) (= sy (lift y)))
 ((let se (Copysign sx sy)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Erff64Ty x)) (= sx (lift x)))
 ((let se (Erf sx)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Num n)))
 ((let tx "binary64") (let etx (Numbinary64 n)) (union (lower e tx) etx))
 :ruleset
 lowering)
(rule
 ((= e (Num n)))
 ((let tx "binary32") (let etx (Numbinary32 n)) (union (lower e tx) etx))
 :ruleset
 lowering)
(rule
 ((= e (Numbinary64 n)))
 ((let se (Num n)) (union (lift e) se))
 :ruleset
 lifting)
(rule
 ((= e (Numbinary32 n)))
 ((let se (Num n)) (union (lift e) se))
 :ruleset
 lifting)
(rule ((= e (Approx spec impl))) ((union (lift e) spec)) :ruleset lifting)
(rule
 ((= e (Var "x")))
 ((let ty "binary64") (let ety (Varbinary64 "x")) (union (lower e ty) ety))
 :ruleset
 lowering)
(rule
 ((= e (Varbinary64 "x")))
 ((let se (Var "x")) (union (lift e) se))
 :ruleset
 lifting)
(constructor const1 () M :unextractable)
(constructor const2 () MTy :unextractable)
(constructor const3 () M :unextractable)
(constructor const4 () M :unextractable)
(constructor const5 () MTy :unextractable)
(constructor const6 () MTy :unextractable)
(constructor const7 () MTy :unextractable)
(constructor const8 () MTy :unextractable)
(constructor const9 () M :unextractable)
(constructor const10 () MTy :unextractable)
(constructor const11 () MTy :unextractable)
(constructor const12 () M :unextractable)
(constructor const13 () MTy :unextractable)
(constructor const14 () MTy :unextractable)
(constructor const15 () M :unextractable)
(constructor const16 () M :unextractable)
(constructor const17 () MTy :unextractable)
(constructor const18 () MTy :unextractable)
(constructor const19 () M :unextractable)
(constructor const20 () M :unextractable)
(constructor const21 () M :unextractable)
(constructor const22 () M :unextractable)
(constructor const23 () M :unextractable)
(constructor const24 () MTy :unextractable)
(constructor const25 () MTy :unextractable)
(constructor const26 () MTy :unextractable)
(constructor const27 () MTy :unextractable)
(constructor const28 () M :unextractable)
(constructor const29 () MTy :unextractable)
(constructor const30 () MTy :unextractable)
(constructor const31 () M :unextractable)
(constructor const32 () M :unextractable)
(constructor const33 () M :unextractable)
(constructor const34 () MTy :unextractable)
(constructor const35 () MTy :unextractable)
(constructor const36 () M :unextractable)
(constructor const37 () M :unextractable)
(constructor const38 () M :unextractable)
(constructor const39 () M :unextractable)
(constructor const40 () M :unextractable)
(constructor const41 () M :unextractable)
(constructor const42 () MTy :unextractable)
(constructor const43 () MTy :unextractable)
(constructor const44 () M :unextractable)
(constructor const45 () M :unextractable)
(constructor const46 () M :unextractable)
(constructor const47 () MTy :unextractable)
(constructor const48 () MTy :unextractable)
(constructor const49 () M :unextractable)
(constructor const50 () M :unextractable)
(constructor const51 () M :unextractable)
(constructor const52 () M :unextractable)
(constructor const53 () M :unextractable)
(constructor const54 () M :unextractable)
(constructor const55 () MTy :unextractable)
(constructor const56 () MTy :unextractable)
(constructor const57 () M :unextractable)
(constructor const58 () M :unextractable)
(constructor const59 () M :unextractable)
(constructor const60 () M :unextractable)
(constructor const61 () M :unextractable)
(constructor const62 () M :unextractable)
(constructor const63 () M :unextractable)
(constructor const64 () M :unextractable)
(constructor const65 () M :unextractable)
(constructor const66 () MTy :unextractable)
(constructor const67 () MTy :unextractable)
(constructor const68 () M :unextractable)
(constructor const69 () M :unextractable)
(constructor const70 () MTy :unextractable)
(constructor const71 () MTy :unextractable)
(constructor const72 () M :unextractable)
(constructor const73 () MTy :unextractable)
(constructor const74 () MTy :unextractable)
(constructor const75 () M :unextractable)
(constructor const76 () M :unextractable)
(constructor const77 () MTy :unextractable)
(constructor const78 () MTy :unextractable)
(constructor const79 () M :unextractable)
(constructor const80 () M :unextractable)
(constructor const81 () M :unextractable)
(constructor const82 () M :unextractable)
(constructor const83 () M :unextractable)
(constructor const84 () MTy :unextractable)
(constructor const85 () MTy :unextractable)
(constructor const86 () M :unextractable)
(constructor const87 () M :unextractable)
(constructor const88 () M :unextractable)
(constructor const89 () M :unextractable)
(constructor const90 () M :unextractable)
(constructor const91 () M :unextractable)
(constructor const92 () M :unextractable)
(constructor const93 () M :unextractable)
(constructor const94 () MTy :unextractable)
(constructor const95 () MTy :unextractable)
(constructor const96 () M :unextractable)
(constructor const97 () M :unextractable)
(constructor const98 () M :unextractable)
(constructor const99 () M :unextractable)
(constructor const100 () MTy :unextractable)
(constructor const101 () MTy :unextractable)
(constructor const102 () M :unextractable)
(constructor const103 () M :unextractable)
(constructor const104 () M :unextractable)
(constructor const105 () M :unextractable)
(constructor const106 () M :unextractable)
(constructor const107 () MTy :unextractable)
(constructor const108 () MTy :unextractable)
(constructor const109 () M :unextractable)
(constructor const110 () M :unextractable)
(constructor const111 () M :unextractable)
(constructor const112 () M :unextractable)
(constructor const113 () M :unextractable)
(constructor const114 () M :unextractable)
(constructor const115 () M :unextractable)
(constructor const116 () MTy :unextractable)
(constructor const117 () MTy :unextractable)
(constructor const118 () M :unextractable)
(constructor const119 () M :unextractable)
(constructor const120 () M :unextractable)
(constructor const121 () MTy :unextractable)
(constructor const122 () MTy :unextractable)
(constructor const123 () M :unextractable)
(constructor const124 () M :unextractable)
(constructor const125 () M :unextractable)
(constructor const126 () M :unextractable)
(constructor const127 () MTy :unextractable)
(constructor const128 () MTy :unextractable)
(constructor const129 () M :unextractable)
(constructor const130 () MTy :unextractable)
(constructor const131 () MTy :unextractable)
(constructor const132 () M :unextractable)
(constructor const133 () MTy :unextractable)
(constructor const134 () MTy :unextractable)
(constructor const135 () M :unextractable)
(constructor const136 () MTy :unextractable)
(constructor const137 () MTy :unextractable)
(constructor const138 () M :unextractable)
(constructor const139 () M :unextractable)
(constructor const140 () M :unextractable)
(constructor const141 () MTy :unextractable)
(constructor const142 () MTy :unextractable)
(constructor const143 () M :unextractable)
(constructor const144 () M :unextractable)
(constructor const145 () M :unextractable)
(constructor const146 () M :unextractable)
(constructor const147 () M :unextractable)
(constructor const148 () M :unextractable)
(constructor const149 () MTy :unextractable)
(constructor const150 () MTy :unextractable)
(constructor const151 () M :unextractable)
(constructor const152 () M :unextractable)
(constructor const153 () M :unextractable)
(constructor const154 () M :unextractable)
(constructor const155 () M :unextractable)
(constructor const156 () M :unextractable)
(constructor const157 () MTy :unextractable)
(constructor const158 () MTy :unextractable)
(constructor const159 () M :unextractable)
(constructor const160 () M :unextractable)
(constructor const161 () M :unextractable)
(constructor const162 () M :unextractable)
(constructor const163 () M :unextractable)
(constructor const164 () M :unextractable)
(constructor const165 () M :unextractable)
(constructor const166 () M :unextractable)
(constructor const167 () M :unextractable)
(constructor const168 () M :unextractable)
(constructor const169 () M :unextractable)
(constructor const170 () MTy :unextractable)
(constructor const171 () MTy :unextractable)
(constructor const172 () M :unextractable)
(constructor const173 () M :unextractable)
(constructor const174 () MTy :unextractable)
(constructor const175 () MTy :unextractable)
(constructor const176 () M :unextractable)
(constructor const177 () M :unextractable)
(constructor const178 () M :unextractable)
(constructor const179 () MTy :unextractable)
(constructor const180 () MTy :unextractable)
(constructor const181 () M :unextractable)
(constructor const182 () M :unextractable)
(constructor const183 () M :unextractable)
(constructor const184 () M :unextractable)
(constructor const185 () MTy :unextractable)
(constructor const186 () MTy :unextractable)
(constructor const187 () M :unextractable)
(constructor const188 () M :unextractable)
(constructor const189 () M :unextractable)
(constructor const190 () M :unextractable)
(constructor const191 () M :unextractable)
(constructor const192 () M :unextractable)
(constructor const193 () M :unextractable)
(constructor const194 () M :unextractable)
(constructor const195 () M :unextractable)
(constructor const196 () M :unextractable)
(constructor const197 () MTy :unextractable)
(constructor const198 () MTy :unextractable)
(constructor const199 () M :unextractable)
(constructor const200 () M :unextractable)
(constructor const201 () M :unextractable)
(constructor const202 () M :unextractable)
(constructor const203 () M :unextractable)
(constructor const204 () M :unextractable)
(constructor const205 () M :unextractable)
(constructor const206 () M :unextractable)
(constructor const207 () M :unextractable)
(constructor const208 () M :unextractable)
(constructor const209 () M :unextractable)
(constructor const210 () MTy :unextractable)
(constructor const211 () MTy :unextractable)
(constructor const212 () M :unextractable)
(constructor const213 () M :unextractable)
(constructor const214 () MTy :unextractable)
(constructor const215 () MTy :unextractable)
(constructor const216 () M :unextractable)
(constructor const217 () M :unextractable)
(constructor const218 () M :unextractable)
(constructor const219 () M :unextractable)
(constructor const220 () M :unextractable)
(constructor const221 () M :unextractable)
(constructor const222 () MTy :unextractable)
(constructor const223 () MTy :unextractable)
(constructor const224 () M :unextractable)
(constructor const225 () M :unextractable)
(constructor const226 () M :unextractable)
(constructor const227 () M :unextractable)
(constructor const228 () M :unextractable)
(constructor const229 () M :unextractable)
(constructor const230 () M :unextractable)
(constructor const231 () MTy :unextractable)
(constructor const232 () MTy :unextractable)
(constructor const233 () M :unextractable)
(constructor const234 () M :unextractable)
(constructor const235 () M :unextractable)
(constructor const236 () MTy :unextractable)
(constructor const237 () MTy :unextractable)
(constructor const238 () M :unextractable)
(constructor const239 () M :unextractable)
(constructor const240 () M :unextractable)
(constructor const241 () M :unextractable)
(constructor const242 () M :unextractable)
(constructor const243 () M :unextractable)
(constructor const244 () M :unextractable)
(constructor const245 () M :unextractable)
(constructor const246 () M :unextractable)
(constructor const247 () M :unextractable)
(constructor const248 () MTy :unextractable)
(constructor const249 () MTy :unextractable)
(constructor const250 () M :unextractable)
(constructor const251 () M :unextractable)
(constructor const252 () M :unextractable)
(constructor const253 () M :unextractable)
(constructor const254 () M :unextractable)
(constructor const255 () M :unextractable)
(constructor const256 () MTy :unextractable)
(constructor const257 () MTy :unextractable)
(constructor const258 () M :unextractable)
(constructor const259 () M :unextractable)
(constructor const260 () M :unextractable)
(constructor const261 () M :unextractable)
(constructor const262 () M :unextractable)
(constructor const263 () M :unextractable)
(constructor const264 () MTy :unextractable)
(constructor const265 () MTy :unextractable)
(constructor const266 () M :unextractable)
(constructor const267 () M :unextractable)
(constructor const268 () M :unextractable)
(constructor const269 () M :unextractable)
(constructor const270 () M :unextractable)
(constructor const271 () M :unextractable)
(constructor const272 () M :unextractable)
(constructor const273 () M :unextractable)
(constructor const274 () M :unextractable)
(constructor const275 () M :unextractable)
(constructor const276 () M :unextractable)
(constructor const277 () MTy :unextractable)
(constructor const278 () MTy :unextractable)
(constructor const279 () M :unextractable)
(constructor const280 () M :unextractable)
(constructor const281 () M :unextractable)
(constructor const282 () M :unextractable)
(constructor const283 () M :unextractable)
(constructor const284 () M :unextractable)
(constructor const285 () M :unextractable)
(constructor const286 () M :unextractable)
(constructor const287 () M :unextractable)
(constructor const288 () M :unextractable)
(constructor const289 () M :unextractable)
(constructor const290 () M :unextractable)
(constructor const291 () M :unextractable)
(constructor const292 () M :unextractable)
(constructor const293 () MTy :unextractable)
(constructor const294 () MTy :unextractable)
(constructor const295 () MTy :unextractable)
(constructor const296 () MTy :unextractable)
(constructor const297 () MTy :unextractable)
(constructor const298 () MTy :unextractable)
(constructor const299 () MTy :unextractable)
(constructor const300 () MTy :unextractable)
(constructor const301 () MTy :unextractable)
(constructor const302 () MTy :unextractable)
(constructor const303 () MTy :unextractable)
(constructor const304 () MTy :unextractable)
(constructor const305 () M :unextractable)
(constructor const306 () M :unextractable)
(constructor const307 () M :unextractable)
(constructor const308 () M :unextractable)
(constructor const309 () M :unextractable)
(constructor const310 () M :unextractable)
(constructor const311 () M :unextractable)
(constructor const312 () M :unextractable)
(constructor const313 () MTy :unextractable)
(constructor const314 () MTy :unextractable)
(constructor const315 () M :unextractable)
(constructor const316 () M :unextractable)
(constructor const317 () M :unextractable)
(constructor const318 () M :unextractable)
(constructor const319 () M :unextractable)
(constructor const320 () M :unextractable)
(constructor const321 () M :unextractable)
(constructor const322 () M :unextractable)
(constructor const323 () M :unextractable)
(constructor const324 () M :unextractable)
(constructor const325 () MTy :unextractable)
(constructor const326 () MTy :unextractable)
(constructor const327 () M :unextractable)
(constructor const328 () M :unextractable)
(constructor const329 () M :unextractable)
(constructor const330 () M :unextractable)
(constructor const331 () M :unextractable)
(constructor const332 () M :unextractable)
(constructor const333 () M :unextractable)
(constructor const334 () M :unextractable)
(constructor const335 () M :unextractable)
(constructor const336 () M :unextractable)
(constructor const337 () M :unextractable)
(constructor const338 () M :unextractable)
(constructor const339 () M :unextractable)
(constructor const340 () M :unextractable)
(constructor const341 () MTy :unextractable)
(constructor const342 () MTy :unextractable)
(constructor const343 () M :unextractable)
(constructor const344 () M :unextractable)
(constructor const345 () MTy :unextractable)
(constructor const346 () MTy :unextractable)
(constructor const347 () M :unextractable)
(constructor const348 () M :unextractable)
(constructor const349 () M :unextractable)
(constructor const350 () M :unextractable)
(constructor const351 () M :unextractable)
(constructor const352 () MTy :unextractable)
(constructor const353 () MTy :unextractable)
(constructor const354 () M :unextractable)
(constructor const355 () M :unextractable)
(constructor const356 () M :unextractable)
(constructor const357 () M :unextractable)
(constructor const358 () M :unextractable)
(constructor const359 () M :unextractable)
(constructor const360 () MTy :unextractable)
(constructor const361 () MTy :unextractable)
(constructor const362 () M :unextractable)
(constructor const363 () M :unextractable)
(constructor const364 () M :unextractable)
(constructor const365 () M :unextractable)
(constructor const366 () M :unextractable)
(constructor const367 () M :unextractable)
(constructor const368 () M :unextractable)
(constructor const369 () M :unextractable)
(constructor const370 () M :unextractable)
(constructor const371 () MTy :unextractable)
(constructor const372 () MTy :unextractable)
(constructor const373 () M :unextractable)
(constructor const374 () M :unextractable)
(constructor const375 () MTy :unextractable)
(constructor const376 () MTy :unextractable)
(constructor const377 () M :unextractable)
(constructor const378 () M :unextractable)
(constructor const379 () M :unextractable)
(constructor const380 () M :unextractable)
(constructor const381 () MTy :unextractable)
(constructor const382 () MTy :unextractable)
(constructor const383 () M :unextractable)
(constructor const384 () M :unextractable)
(constructor const385 () M :unextractable)
(constructor const386 () M :unextractable)
(constructor const387 () MTy :unextractable)
(constructor const388 () MTy :unextractable)
(constructor const389 () M :unextractable)
(constructor const390 () M :unextractable)
(constructor const391 () M :unextractable)
(constructor const392 () M :unextractable)
(constructor const393 () M :unextractable)
(constructor const394 () M :unextractable)
(constructor const395 () M :unextractable)
(constructor const396 () M :unextractable)
(constructor const397 () M :unextractable)
(constructor const398 () MTy :unextractable)
(constructor const399 () MTy :unextractable)
(constructor const400 () MTy :unextractable)
(constructor const401 () MTy :unextractable)
(constructor const402 () M :unextractable)
(constructor const403 () M :unextractable)
(constructor const404 () MTy :unextractable)
(constructor const405 () MTy :unextractable)
(constructor const406 () MTy :unextractable)
(constructor const407 () MTy :unextractable)
(constructor const408 () M :unextractable)
(constructor const409 () M :unextractable)
(constructor const410 () M :unextractable)
(constructor const411 () M :unextractable)
(constructor const412 () M :unextractable)
(constructor const413 () M :unextractable)
(constructor const414 () M :unextractable)
(constructor const415 () MTy :unextractable)
(constructor const416 () MTy :unextractable)
(constructor const417 () M :unextractable)
(constructor const418 () M :unextractable)
(constructor const419 () M :unextractable)
(constructor const420 () M :unextractable)
(constructor const421 () M :unextractable)
(constructor const422 () M :unextractable)
(constructor const423 () MTy :unextractable)
(constructor const424 () MTy :unextractable)
(constructor const425 () M :unextractable)
(constructor const426 () M :unextractable)
(constructor const427 () M :unextractable)
(constructor const428 () M :unextractable)
(constructor const429 () M :unextractable)
(constructor const430 () M :unextractable)
(constructor const431 () M :unextractable)
(constructor const432 () M :unextractable)
(constructor const433 () M :unextractable)
(constructor const434 () M :unextractable)
(constructor const435 () MTy :unextractable)
(constructor const436 () MTy :unextractable)
(constructor const437 () MTy :unextractable)
(constructor const438 () MTy :unextractable)
(constructor const439 () M :unextractable)
(constructor const440 () MTy :unextractable)
(constructor const441 () MTy :unextractable)
(constructor const442 () M :unextractable)
(constructor const443 () M :unextractable)
(constructor const444 () M :unextractable)
(constructor const445 () MTy :unextractable)
(constructor const446 () MTy :unextractable)
(constructor const447 () M :unextractable)
(constructor const448 () M :unextractable)
(constructor const449 () M :unextractable)
(constructor const450 () MTy :unextractable)
(constructor const451 () MTy :unextractable)
(constructor const452 () M :unextractable)
(constructor const453 () M :unextractable)
(constructor const454 () M :unextractable)
(constructor const455 () M :unextractable)
(constructor const456 () M :unextractable)
(constructor const457 () M :unextractable)
(constructor const458 () MTy :unextractable)
(constructor const459 () MTy :unextractable)
(constructor const460 () MTy :unextractable)
(constructor const461 () MTy :unextractable)
(constructor const462 () M :unextractable)
(constructor const463 () M :unextractable)
(constructor const464 () M :unextractable)
(constructor const465 () MTy :unextractable)
(constructor const466 () MTy :unextractable)
(constructor const467 () MTy :unextractable)
(constructor const468 () MTy :unextractable)
(constructor const469 () M :unextractable)
(constructor const470 () M :unextractable)
(constructor const471 () M :unextractable)
(constructor const472 () MTy :unextractable)
(constructor const473 () MTy :unextractable)
(constructor const474 () M :unextractable)
(constructor const475 () M :unextractable)
(constructor const476 () M :unextractable)
(constructor const477 () M :unextractable)
(constructor const478 () M :unextractable)
(constructor const479 () M :unextractable)
(constructor const480 () M :unextractable)
(constructor const481 () MTy :unextractable)
(constructor const482 () MTy :unextractable)
(constructor const483 () M :unextractable)
(constructor const484 () M :unextractable)
(constructor const485 () M :unextractable)
(constructor const486 () M :unextractable)
(constructor const487 () M :unextractable)
(constructor const488 () M :unextractable)
(constructor const489 () M :unextractable)
(constructor const490 () M :unextractable)
(constructor const491 () M :unextractable)
(constructor const492 () M :unextractable)
(constructor const493 () M :unextractable)
(constructor const494 () MTy :unextractable)
(constructor const495 () MTy :unextractable)
(constructor const496 () MTy :unextractable)
(constructor const497 () MTy :unextractable)
(constructor const498 () M :unextractable)
(constructor const499 () M :unextractable)
(constructor const500 () MTy :unextractable)
(constructor const501 () MTy :unextractable)
(constructor const502 () M :unextractable)
(constructor const503 () M :unextractable)
(constructor const504 () MTy :unextractable)
(constructor const505 () MTy :unextractable)
(constructor const506 () M :unextractable)
(constructor const507 () M :unextractable)
(constructor const508 () M :unextractable)
(constructor const509 () M :unextractable)
(constructor const510 () MTy :unextractable)
(constructor const511 () MTy :unextractable)
(constructor const512 () M :unextractable)
(constructor const513 () M :unextractable)
(constructor const514 () M :unextractable)
(constructor const515 () MTy :unextractable)
(constructor const516 () MTy :unextractable)
(constructor const517 () M :unextractable)
(constructor const518 () M :unextractable)
(constructor const519 () M :unextractable)
(constructor const520 () M :unextractable)
(constructor const521 () M :unextractable)
(constructor const522 () MTy :unextractable)
(constructor const523 () MTy :unextractable)
(constructor const524 () M :unextractable)
(constructor const525 () M :unextractable)
(constructor const526 () M :unextractable)
(constructor const527 () M :unextractable)
(constructor const528 () M :unextractable)
(constructor const529 () M :unextractable)
(constructor const530 () M :unextractable)
(constructor const531 () M :unextractable)
(constructor const532 () MTy :unextractable)
(constructor const533 () MTy :unextractable)
(constructor const534 () M :unextractable)
(constructor const535 () MTy :unextractable)
(constructor const536 () MTy :unextractable)
(constructor const537 () M :unextractable)
(constructor const538 () MTy :unextractable)
(constructor const539 () MTy :unextractable)
(constructor const540 () M :unextractable)
(constructor const541 () MTy :unextractable)
(constructor const542 () MTy :unextractable)
(constructor const543 () M :unextractable)
(constructor const544 () MTy :unextractable)
(constructor const545 () MTy :unextractable)
(constructor const546 () M :unextractable)
(constructor const547 () MTy :unextractable)
(constructor const548 () MTy :unextractable)
(constructor const549 () M :unextractable)
(constructor const550 () MTy :unextractable)
(constructor const551 () MTy :unextractable)
(constructor const552 () M :unextractable)
(constructor const553 () MTy :unextractable)
(constructor const554 () MTy :unextractable)
(constructor const555 () M :unextractable)
(constructor const556 () MTy :unextractable)
(constructor const557 () MTy :unextractable)
(constructor const558 () M :unextractable)
(constructor const559 () M :unextractable)
(constructor const560 () MTy :unextractable)
(constructor const561 () MTy :unextractable)
(constructor const562 () M :unextractable)
(constructor const563 () MTy :unextractable)
(constructor const564 () MTy :unextractable)
(constructor const565 () M :unextractable)
(constructor const566 () MTy :unextractable)
(constructor const567 () MTy :unextractable)
(constructor const568 () M :unextractable)
(constructor const569 () MTy :unextractable)
(constructor const570 () MTy :unextractable)
(constructor const571 () M :unextractable)
(constructor const572 () MTy :unextractable)
(constructor const573 () MTy :unextractable)
(constructor const574 () M :unextractable)
(constructor const575 () MTy :unextractable)
(constructor const576 () MTy :unextractable)
(constructor const577 () M :unextractable)
(constructor const578 () MTy :unextractable)
(constructor const579 () MTy :unextractable)
(constructor const580 () M :unextractable)
(constructor const581 () M :unextractable)
(constructor const582 () M :unextractable)
(constructor const583 () M :unextractable)
(constructor const584 () M :unextractable)
(constructor const585 () M :unextractable)
(constructor const586 () MTy :unextractable)
(constructor const587 () MTy :unextractable)
(constructor const588 () M :unextractable)
(constructor const589 () M :unextractable)
(constructor const590 () M :unextractable)
(constructor const591 () M :unextractable)
(constructor const592 () M :unextractable)
(constructor const593 () M :unextractable)
(constructor const594 () M :unextractable)
(constructor const595 () M :unextractable)
(constructor const596 () M :unextractable)
(constructor const597 () M :unextractable)
(constructor const598 () MTy :unextractable)
(constructor const599 () MTy :unextractable)
(constructor const600 () M :unextractable)
(constructor const601 () MTy :unextractable)
(constructor const602 () MTy :unextractable)
(constructor const603 () M :unextractable)
(constructor const604 () M :unextractable)
(constructor const605 () M :unextractable)
(constructor const606 () M :unextractable)
(constructor const607 () MTy :unextractable)
(constructor const608 () MTy :unextractable)
(constructor const609 () M :unextractable)
(constructor const610 () M :unextractable)
(constructor const611 () M :unextractable)
(constructor const612 () M :unextractable)
(constructor const613 () M :unextractable)
(constructor const614 () M :unextractable)
(constructor const615 () M :unextractable)
(constructor const616 () M :unextractable)
(constructor const617 () MTy :unextractable)
(constructor const618 () MTy :unextractable)
(constructor const619 () M :unextractable)
(constructor const620 () M :unextractable)
(constructor const621 () M :unextractable)
(constructor const622 () M :unextractable)
(constructor const623 () M :unextractable)
(constructor const624 () M :unextractable)
(constructor const625 () M :unextractable)
(constructor const626 () M :unextractable)
(constructor const627 () M :unextractable)
(constructor const628 () M :unextractable)
(constructor const629 () M :unextractable)
(constructor const630 () M :unextractable)
(constructor const631 () M :unextractable)
(constructor const632 () MTy :unextractable)
(constructor const633 () MTy :unextractable)
(constructor const634 () M :unextractable)
(constructor const635 () MTy :unextractable)
(constructor const636 () MTy :unextractable)
(constructor const637 () M :unextractable)
(constructor const638 () M :unextractable)
(constructor const639 () M :unextractable)
(constructor const640 () M :unextractable)
(constructor const641 () MTy :unextractable)
(constructor const642 () MTy :unextractable)
(constructor const643 () M :unextractable)
(constructor const644 () M :unextractable)
(constructor const645 () M :unextractable)
(constructor const646 () M :unextractable)
(constructor const647 () M :unextractable)
(constructor const648 () M :unextractable)
(constructor const649 () MTy :unextractable)
(constructor const650 () MTy :unextractable)
(constructor const651 () M :unextractable)
(constructor const652 () M :unextractable)
(constructor const653 () M :unextractable)
(constructor const654 () M :unextractable)
(constructor const655 () M :unextractable)
(constructor const656 () M :unextractable)
(constructor const657 () M :unextractable)
(constructor const658 () M :unextractable)
(constructor const659 () M :unextractable)
(constructor const660 () MTy :unextractable)
(constructor const661 () MTy :unextractable)
(constructor const662 () M :unextractable)
(constructor const663 () M :unextractable)
(constructor const664 () MTy :unextractable)
(constructor const665 () MTy :unextractable)
(constructor const666 () M :unextractable)
(constructor const667 () M :unextractable)
(constructor const668 () M :unextractable)
(constructor const669 () M :unextractable)
(constructor const670 () M :unextractable)
(constructor const671 () MTy :unextractable)
(constructor const672 () MTy :unextractable)
(constructor const673 () M :unextractable)
(constructor const674 () M :unextractable)
(constructor const675 () M :unextractable)
(constructor const676 () M :unextractable)
(constructor const677 () M :unextractable)
(constructor const678 () MTy :unextractable)
(constructor const679 () MTy :unextractable)
(constructor const680 () M :unextractable)
(constructor const681 () M :unextractable)
(constructor const682 () M :unextractable)
(constructor const683 () M :unextractable)
(constructor const684 () M :unextractable)
(constructor const685 () M :unextractable)
(constructor const686 () M :unextractable)
(constructor const687 () M :unextractable)
(constructor const688 () M :unextractable)
(constructor const689 () M :unextractable)
(constructor const690 () M :unextractable)
(constructor const691 () MTy :unextractable)
(constructor const692 () MTy :unextractable)
(ruleset run-extract-commands)
(rule
 ()
 ((let ?sx (Var "x"))
  (set (const1) ?sx)
  (let ?tx (Varbinary64 "x"))
  (set (const2) ?tx)
  (let ?b0 (Num (bigrat (from-string "1") (from-string "1"))))
  (set (const3) ?b0)
  (let ?b1 (Num (bigrat (from-string "0") (from-string "1"))))
  (set (const4) ?b1)
  (let ?b2 (lower ?b1 "binary64"))
  (set (const5) ?b2)
  (let ?r3 (Approx ?b0 ?b2))
  (set (const6) ?r3)
  (let ?b5 (lower ?sx "binary64"))
  (set (const7) ?b5)
  (let ?r6 (Approx ?sx ?b5))
  (set (const8) ?r6)
  (let ?b7 (Sqrt ?sx))
  (set (const9) ?b7)
  (let ?b8 (lower ?b7 "binary64"))
  (set (const10) ?b8)
  (let ?r9 (Approx ?b7 ?b8))
  (set (const11) ?r9)
  (let ?b10 (Div ?b0 ?sx))
  (set (const12) ?b10)
  (let ?b11 (lower ?b10 "binary64"))
  (set (const13) ?b11)
  (let ?r12 (Approx ?b10 ?b11))
  (set (const14) ?r12)
  (let ?b13 (Sqrt ?b10))
  (set (const15) ?b13)
  (let ?b14 (Div ?b7 ?sx))
  (set (const16) ?b14)
  (let ?b15 (lower ?b14 "binary64"))
  (set (const17) ?b15)
  (let ?r16 (Approx ?b13 ?b15))
  (set (const18) ?r16)
  (let ?b17 (Num (bigrat (from-string "3") (from-string "1"))))
  (set (const19) ?b17)
  (let ?b18 (Pow ?b13 ?b17))
  (set (const20) ?b18)
  (let ?b19 (Pow ?b7 ?b17))
  (set (const21) ?b19)
  (let ?b20 (Pow ?sx ?b17))
  (set (const22) ?b20)
  (let ?b21 (Div ?b19 ?b20))
  (set (const23) ?b21)
  (let ?b22 (lower ?b21 "binary64"))
  (set (const24) ?b22)
  (let ?r23 (Approx ?b18 ?b22))
  (set (const25) ?r23)
  (let ?b24 (lower ?b20 "binary64"))
  (set (const26) ?b24)
  (let ?r25 (Approx ?b20 ?b24))
  (set (const27) ?r25)
  (let ?b26 (Mul ?b20 ?b18))
  (set (const28) ?b26)
  (let ?b27 (lower ?b19 "binary64"))
  (set (const29) ?b27)
  (let ?r28 (Approx ?b26 ?b27))
  (set (const30) ?r28)
  (let ?b29 (Num (bigrat (from-string "1") (from-string "2"))))
  (set (const31) ?b29)
  (let ?b30 (Div ?b29 ?b26))
  (set (const32) ?b30)
  (let ?b31 (Div ?b29 ?b19))
  (set (const33) ?b31)
  (let ?b32 (lower ?b31 "binary64"))
  (set (const34) ?b32)
  (let ?r33 (Approx ?b30 ?b32))
  (set (const35) ?r33)
  (let ?b34 (Div ?b0 ?b7))
  (set (const36) ?b34)
  (let ?b35 (Add ?sx ?b0))
  (set (const37) ?b35)
  (let ?b36 (Sqrt ?b35))
  (set (const38) ?b36)
  (let ?b37 (Div ?b0 ?b36))
  (set (const39) ?b37)
  (let ?b38 (Sub ?b34 ?b37))
  (set (const40) ?b38)
  (let ?b39 (Sub ?b34 ?b0))
  (set (const41) ?b39)
  (let ?b40 (lower ?b39 "binary64"))
  (set (const42) ?b40)
  (let ?r41 (Approx ?b38 ?b40))
  (set (const43) ?r41)
  (let ?b42 (Mul ?b29 ?sx))
  (set (const44) ?b42)
  (let ?b43 (Add ?b42 ?b34))
  (set (const45) ?b43)
  (let ?b44 (Sub ?b43 ?b0))
  (set (const46) ?b44)
  (let ?b45 (lower ?b44 "binary64"))
  (set (const47) ?b45)
  (let ?r46 (Approx ?b38 ?b45))
  (set (const48) ?r46)
  (let ?b47 (Num (bigrat (from-string "-3") (from-string "8"))))
  (set (const49) ?b47)
  (let ?b48 (Mul ?b47 ?sx))
  (set (const50) ?b48)
  (let ?b49 (Add ?b29 ?b48))
  (set (const51) ?b49)
  (let ?b50 (Mul ?sx ?b49))
  (set (const52) ?b50)
  (let ?b51 (Add ?b50 ?b34))
  (set (const53) ?b51)
  (let ?b52 (Sub ?b51 ?b0))
  (set (const54) ?b52)
  (let ?b53 (lower ?b52 "binary64"))
  (set (const55) ?b53)
  (let ?r54 (Approx ?b38 ?b53))
  (set (const56) ?r54)
  (let ?b55 (Num (bigrat (from-string "5") (from-string "16"))))
  (set (const57) ?b55)
  (let ?b56 (Mul ?b55 ?sx))
  (set (const58) ?b56)
  (let ?b57 (Num (bigrat (from-string "3") (from-string "8"))))
  (set (const59) ?b57)
  (let ?b58 (Sub ?b56 ?b57))
  (set (const60) ?b58)
  (let ?b59 (Mul ?sx ?b58))
  (set (const61) ?b59)
  (let ?b60 (Add ?b29 ?b59))
  (set (const62) ?b60)
  (let ?b61 (Mul ?sx ?b60))
  (set (const63) ?b61)
  (let ?b62 (Add ?b61 ?b34))
  (set (const64) ?b62)
  (let ?b63 (Sub ?b62 ?b0))
  (set (const65) ?b63)
  (let ?b64 (lower ?b63 "binary64"))
  (set (const66) ?b64)
  (let ?r65 (Approx ?b38 ?b64))
  (set (const67) ?r65)
  (let ?b66 (Num (bigrat (from-string "-1") (from-string "1"))))
  (set (const68) ?b66)
  (let ?b67 (Sub ?sx ?b66))
  (set (const69) ?b67)
  (let ?b68 (lower ?b0 "binary64"))
  (set (const70) ?b68)
  (let ?r69 (Approx ?b67 ?b68))
  (set (const71) ?r69)
  (let ?b70 (Add ?b0 ?sx))
  (set (const72) ?b70)
  (let ?b71 (lower ?b70 "binary64"))
  (set (const73) ?b71)
  (let ?r72 (Approx ?b67 ?b71))
  (set (const74) ?r72)
  (let ?b73 (Sqrt ?b67))
  (set (const75) ?b73)
  (let ?b74 (Add ?b0 ?b42))
  (set (const76) ?b74)
  (let ?b75 (lower ?b74 "binary64"))
  (set (const77) ?b75)
  (let ?r76 (Approx ?b73 ?b75))
  (set (const78) ?r76)
  (let ?b77 (Num (bigrat (from-string "-1") (from-string "8"))))
  (set (const79) ?b77)
  (let ?b78 (Mul ?b77 ?sx))
  (set (const80) ?b78)
  (let ?b79 (Add ?b29 ?b78))
  (set (const81) ?b79)
  (let ?b80 (Mul ?sx ?b79))
  (set (const82) ?b80)
  (let ?b81 (Add ?b0 ?b80))
  (set (const83) ?b81)
  (let ?b82 (lower ?b81 "binary64"))
  (set (const84) ?b82)
  (let ?r83 (Approx ?b73 ?b82))
  (set (const85) ?r83)
  (let ?b84 (Num (bigrat (from-string "1") (from-string "16"))))
  (set (const86) ?b84)
  (let ?b85 (Mul ?b84 ?sx))
  (set (const87) ?b85)
  (let ?b86 (Num (bigrat (from-string "1") (from-string "8"))))
  (set (const88) ?b86)
  (let ?b87 (Sub ?b85 ?b86))
  (set (const89) ?b87)
  (let ?b88 (Mul ?sx ?b87))
  (set (const90) ?b88)
  (let ?b89 (Add ?b29 ?b88))
  (set (const91) ?b89)
  (let ?b90 (Mul ?sx ?b89))
  (set (const92) ?b90)
  (let ?b91 (Add ?b0 ?b90))
  (set (const93) ?b91)
  (let ?b92 (lower ?b91 "binary64"))
  (set (const94) ?b92)
  (let ?r93 (Approx ?b73 ?b92))
  (set (const95) ?r93)
  (let ?b94 (Mul ?b7 ?b73))
  (set (const96) ?b94)
  (let ?b95 (Mul ?sx ?b7))
  (set (const97) ?b95)
  (let ?b96 (Mul ?b29 ?b95))
  (set (const98) ?b96)
  (let ?b97 (Add ?b7 ?b96))
  (set (const99) ?b97)
  (let ?b98 (lower ?b97 "binary64"))
  (set (const100) ?b98)
  (let ?r99 (Approx ?b94 ?b98))
  (set (const101) ?r99)
  (let ?b100 (Mul ?b77 ?b95))
  (set (const102) ?b100)
  (let ?b101 (Mul ?b29 ?b7))
  (set (const103) ?b101)
  (let ?b102 (Add ?b100 ?b101))
  (set (const104) ?b102)
  (let ?b103 (Mul ?sx ?b102))
  (set (const105) ?b103)
  (let ?b104 (Add ?b7 ?b103))
  (set (const106) ?b104)
  (let ?b105 (lower ?b104 "binary64"))
  (set (const107) ?b105)
  (let ?r106 (Approx ?b94 ?b105))
  (set (const108) ?r106)
  (let ?b107 (Mul ?b77 ?b7))
  (set (const109) ?b107)
  (let ?b108 (Mul ?b84 ?b95))
  (set (const110) ?b108)
  (let ?b109 (Add ?b107 ?b108))
  (set (const111) ?b109)
  (let ?b110 (Mul ?sx ?b109))
  (set (const112) ?b110)
  (let ?b111 (Add ?b101 ?b110))
  (set (const113) ?b111)
  (let ?b112 (Mul ?sx ?b111))
  (set (const114) ?b112)
  (let ?b113 (Add ?b7 ?b112))
  (set (const115) ?b113)
  (let ?b114 (lower ?b113 "binary64"))
  (set (const116) ?b114)
  (let ?r115 (Approx ?b94 ?b114))
  (set (const117) ?r115)
  (let ?b116 (Mul ?sx ?b13))
  (set (const118) ?b116)
  (let ?b117 (Div ?b29 ?b116))
  (set (const119) ?b117)
  (let ?b118 (Div ?b29 ?b7))
  (set (const120) ?b118)
  (let ?b119 (lower ?b118 "binary64"))
  (set (const121) ?b119)
  (let ?r120 (Approx ?b117 ?b119))
  (set (const122) ?r120)
  (let ?b121 (Mul ?b0 ?b73))
  (set (const123) ?b121)
  (let ?b122 (Mul ?b7 ?b0))
  (set (const124) ?b122)
  (let ?b123 (Sub ?b121 ?b122))
  (set (const125) ?b123)
  (let ?b124 (Sub ?b0 ?b7))
  (set (const126) ?b124)
  (let ?b125 (lower ?b124 "binary64"))
  (set (const127) ?b125)
  (let ?r126 (Approx ?b123 ?b125))
  (set (const128) ?r126)
  (let ?b127 (Sub ?b74 ?b7))
  (set (const129) ?b127)
  (let ?b128 (lower ?b127 "binary64"))
  (set (const130) ?b128)
  (let ?r129 (Approx ?b123 ?b128))
  (set (const131) ?r129)
  (let ?b130 (Sub ?b81 ?b7))
  (set (const132) ?b130)
  (let ?b131 (lower ?b130 "binary64"))
  (set (const133) ?b131)
  (let ?r132 (Approx ?b123 ?b131))
  (set (const134) ?r132)
  (let ?b133 (Sub ?b91 ?b7))
  (set (const135) ?b133)
  (let ?b134 (lower ?b133 "binary64"))
  (set (const136) ?b134)
  (let ?r135 (Approx ?b123 ?b134))
  (set (const137) ?r135)
  (let ?b136 (Mul ?sx ?sx))
  (set (const138) ?b136)
  (let ?b137 (Add ?b136 ?sx))
  (set (const139) ?b137)
  (let ?b138 (Mul ?sx ?b70))
  (set (const140) ?b138)
  (let ?b139 (lower ?b138 "binary64"))
  (set (const141) ?b139)
  (let ?r140 (Approx ?b137 ?b139))
  (set (const142) ?r140)
  (let ?b141 (Sqrt ?b137))
  (set (const143) ?b141)
  (let ?b142 (Num (bigrat (from-string "2") (from-string "1"))))
  (set (const144) ?b142)
  (let ?b143 (Pow ?sx ?b142))
  (set (const145) ?b143)
  (let ?b144 (Div ?b143 ?b7))
  (set (const146) ?b144)
  (let ?b145 (Mul ?b29 ?b144))
  (set (const147) ?b145)
  (let ?b146 (Add ?b7 ?b145))
  (set (const148) ?b146)
  (let ?b147 (lower ?b146 "binary64"))
  (set (const149) ?b147)
  (let ?r148 (Approx ?b141 ?b147))
  (set (const150) ?r148)
  (let ?b149 (Div ?b143 ?b19))
  (set (const151) ?b149)
  (let ?b150 (Mul ?b77 ?b149))
  (set (const152) ?b150)
  (let ?b151 (Mul ?b29 ?b34))
  (set (const153) ?b151)
  (let ?b152 (Add ?b150 ?b151))
  (set (const154) ?b152)
  (let ?b153 (Mul ?b143 ?b152))
  (set (const155) ?b153)
  (let ?b154 (Add ?b7 ?b153))
  (set (const156) ?b154)
  (let ?b155 (lower ?b154 "binary64"))
  (set (const157) ?b155)
  (let ?r156 (Approx ?b141 ?b155))
  (set (const158) ?r156)
  (let ?b157 (Num (bigrat (from-string "5") (from-string "1"))))
  (set (const159) ?b157)
  (let ?b158 (Pow ?b7 ?b157))
  (set (const160) ?b158)
  (let ?b159 (Div ?b143 ?b158))
  (set (const161) ?b159)
  (let ?b160 (Mul ?b84 ?b159))
  (set (const162) ?b160)
  (let ?b161 (Div ?b0 ?b19))
  (set (const163) ?b161)
  (let ?b162 (Mul ?b86 ?b161))
  (set (const164) ?b162)
  (let ?b163 (Sub ?b160 ?b162))
  (set (const165) ?b163)
  (let ?b164 (Mul ?b143 ?b163))
  (set (const166) ?b164)
  (let ?b165 (Add ?b164 ?b151))
  (set (const167) ?b165)
  (let ?b166 (Mul ?b143 ?b165))
  (set (const168) ?b166)
  (let ?b167 (Add ?b7 ?b166))
  (set (const169) ?b167)
  (let ?b168 (lower ?b167 "binary64"))
  (set (const170) ?b168)
  (let ?r169 (Approx ?b141 ?b168))
  (set (const171) ?r169)
  (let ?b170 (Mul ?b67 ?b7))
  (set (const172) ?b170)
  (let ?b171 (Add ?b7 ?b95))
  (set (const173) ?b171)
  (let ?b172 (lower ?b171 "binary64"))
  (set (const174) ?b172)
  (let ?r173 (Approx ?b170 ?b172))
  (set (const175) ?r173)
  (let ?b174 (Sub ?b73 ?b7))
  (set (const176) ?b174)
  (let ?b175 (Div ?b174 ?b141))
  (set (const177) ?b175)
  (let ?b176 (Div ?b124 ?b7))
  (set (const178) ?b176)
  (let ?b177 (lower ?b176 "binary64"))
  (set (const179) ?b177)
  (let ?r178 (Approx ?b175 ?b177))
  (set (const180) ?r178)
  (let ?b179 (Div ?sx ?b7))
  (set (const181) ?b179)
  (let ?b180 (Mul ?b29 ?b179))
  (set (const182) ?b180)
  (let ?b181 (Add ?b180 ?b34))
  (set (const183) ?b181)
  (let ?b182 (Sub ?b181 ?b0))
  (set (const184) ?b182)
  (let ?b183 (lower ?b182 "binary64"))
  (set (const185) ?b183)
  (let ?r184 (Approx ?b175 ?b183))
  (set (const186) ?r184)
  (let ?b185 (Mul ?b86 ?b34))
  (set (const187) ?b185)
  (let ?b186 (Div ?b124 ?b19))
  (set (const188) ?b186)
  (let ?b187 (Mul ?b29 ?b186))
  (set (const189) ?b187)
  (let ?b188 (Add ?b185 ?b187))
  (set (const190) ?b188)
  (let ?b189 (Mul ?sx ?b188))
  (set (const191) ?b189)
  (let ?b190 (Mul ?b66 ?b189))
  (set (const192) ?b190)
  (let ?b191 (Add ?b190 ?b151))
  (set (const193) ?b191)
  (let ?b192 (Mul ?sx ?b191))
  (set (const194) ?b192)
  (let ?b193 (Add ?b192 ?b34))
  (set (const195) ?b193)
  (let ?b194 (Sub ?b193 ?b0))
  (set (const196) ?b194)
  (let ?b195 (lower ?b194 "binary64"))
  (set (const197) ?b195)
  (let ?r196 (Approx ?b175 ?b195))
  (set (const198) ?r196)
  (let ?b197 (Mul ?b84 ?b34))
  (set (const199) ?b197)
  (let ?b198 (Num (bigrat (from-string "1") (from-string "4"))))
  (set (const200) ?b198)
  (let ?b199 (Mul ?b198 ?b161))
  (set (const201) ?b199)
  (let ?b200 (Sub ?b197 ?b199))
  (set (const202) ?b200)
  (let ?b201 (Mul ?sx ?b200))
  (set (const203) ?b201)
  (let ?b202 (Sub ?b201 ?b188))
  (set (const204) ?b202)
  (let ?b203 (Mul ?sx ?b202))
  (set (const205) ?b203)
  (let ?b204 (Add ?b203 ?b151))
  (set (const206) ?b204)
  (let ?b205 (Mul ?sx ?b204))
  (set (const207) ?b205)
  (let ?b206 (Add ?b205 ?b34))
  (set (const208) ?b206)
  (let ?b207 (Sub ?b206 ?b0))
  (set (const209) ?b207)
  (let ?b208 (lower ?b207 "binary64"))
  (set (const210) ?b208)
  (let ?r209 (Approx ?b175 ?b208))
  (set (const211) ?r209)
  (let ?b210 (Sub ?b67 ?b141))
  (set (const212) ?b210)
  (let ?b211 (Sub ?b70 ?b7))
  (set (const213) ?b211)
  (let ?b212 (lower ?b211 "binary64"))
  (set (const214) ?b212)
  (let ?r213 (Approx ?b210 ?b212))
  (set (const215) ?r213)
  (let ?b214 (Num (bigrat (from-string "-1") (from-string "2"))))
  (set (const216) ?b214)
  (let ?b215 (Mul ?b214 ?b179))
  (set (const217) ?b215)
  (let ?b216 (Add ?b0 ?b215))
  (set (const218) ?b216)
  (let ?b217 (Mul ?sx ?b216))
  (set (const219) ?b217)
  (let ?b218 (Add ?b0 ?b217))
  (set (const220) ?b218)
  (let ?b219 (Sub ?b218 ?b7))
  (set (const221) ?b219)
  (let ?b220 (lower ?b219 "binary64"))
  (set (const222) ?b220)
  (let ?r221 (Approx ?b210 ?b220))
  (set (const223) ?r221)
  (let ?b222 (Mul ?b86 ?b149))
  (set (const224) ?b222)
  (let ?b223 (Sub ?b222 ?b151))
  (set (const225) ?b223)
  (let ?b224 (Mul ?sx ?b223))
  (set (const226) ?b224)
  (let ?b225 (Add ?b0 ?b224))
  (set (const227) ?b225)
  (let ?b226 (Mul ?sx ?b225))
  (set (const228) ?b226)
  (let ?b227 (Add ?b0 ?b226))
  (set (const229) ?b227)
  (let ?b228 (Sub ?b227 ?b7))
  (set (const230) ?b228)
  (let ?b229 (lower ?b228 "binary64"))
  (set (const231) ?b229)
  (let ?r230 (Approx ?b210 ?b229))
  (set (const232) ?r230)
  (let ?b231 (Div ?b210 ?b170))
  (set (const233) ?b231)
  (let ?b232 (Add ?sx ?b34))
  (set (const234) ?b232)
  (let ?b233 (Sub ?b232 ?b0))
  (set (const235) ?b233)
  (let ?b234 (lower ?b233 "binary64"))
  (set (const236) ?b234)
  (let ?r235 (Approx ?b231 ?b234))
  (set (const237) ?r235)
  (let ?b236 (Pow ?b7 ?b142))
  (set (const238) ?b236)
  (let ?b237 (Div ?b0 ?b236))
  (set (const239) ?b237)
  (let ?b238 (Mul ?b29 ?b237))
  (set (const240) ?b238)
  (let ?b239 (Add ?b0 ?b238))
  (set (const241) ?b239)
  (let ?b240 (Mul ?sx ?b239))
  (set (const242) ?b240)
  (let ?b241 (Mul ?b66 ?b240))
  (set (const243) ?b241)
  (let ?b242 (Add ?b0 ?b241))
  (set (const244) ?b242)
  (let ?b243 (Mul ?sx ?b242))
  (set (const245) ?b243)
  (let ?b244 (Add ?b243 ?b34))
  (set (const246) ?b244)
  (let ?b245 (Sub ?b244 ?b0))
  (set (const247) ?b245)
  (let ?b246 (lower ?b245 "binary64"))
  (set (const248) ?b246)
  (let ?r247 (Approx ?b231 ?b246))
  (set (const249) ?r247)
  (let ?b248 (Sub ?b240 ?b239))
  (set (const250) ?b248)
  (let ?b249 (Mul ?sx ?b248))
  (set (const251) ?b249)
  (let ?b250 (Add ?b0 ?b249))
  (set (const252) ?b250)
  (let ?b251 (Mul ?sx ?b250))
  (set (const253) ?b251)
  (let ?b252 (Add ?b251 ?b34))
  (set (const254) ?b252)
  (let ?b253 (Sub ?b252 ?b0))
  (set (const255) ?b253)
  (let ?b254 (lower ?b253 "binary64"))
  (set (const256) ?b254)
  (let ?r255 (Approx ?b231 ?b254))
  (set (const257) ?r255)
  (let ?b256 (Div ?b123 ?b94))
  (set (const258) ?b256)
  (let ?b257 (Mul ?b29 ?b176))
  (set (const259) ?b257)
  (let ?b258 (Sub ?b151 ?b257))
  (set (const260) ?b258)
  (let ?b259 (Mul ?sx ?b258))
  (set (const261) ?b259)
  (let ?b260 (Add ?b259 ?b34))
  (set (const262) ?b260)
  (let ?b261 (Sub ?b260 ?b0))
  (set (const263) ?b261)
  (let ?b262 (lower ?b261 "binary64"))
  (set (const264) ?b262)
  (let ?r263 (Approx ?b256 ?b262))
  (set (const265) ?r263)
  (let ?b264 (Mul ?b77 ?b176))
  (set (const266) ?b264)
  (let ?b265 (Mul ?b29 ?b258))
  (set (const267) ?b265)
  (let ?b266 (Add ?b185 ?b265))
  (set (const268) ?b266)
  (let ?b267 (Add ?b264 ?b266))
  (set (const269) ?b267)
  (let ?b268 (Mul ?sx ?b267))
  (set (const270) ?b268)
  (let ?b269 (Mul ?b66 ?b268))
  (set (const271) ?b269)
  (let ?b270 (Add ?b269 ?b151))
  (set (const272) ?b270)
  (let ?b271 (Sub ?b270 ?b257))
  (set (const273) ?b271)
  (let ?b272 (Mul ?sx ?b271))
  (set (const274) ?b272)
  (let ?b273 (Add ?b272 ?b34))
  (set (const275) ?b273)
  (let ?b274 (Sub ?b273 ?b0))
  (set (const276) ?b274)
  (let ?b275 (lower ?b274 "binary64"))
  (set (const277) ?b275)
  (let ?r276 (Approx ?b256 ?b275))
  (set (const278) ?r276)
  (let ?b277 (Mul ?b214 ?b267))
  (set (const279) ?b277)
  (let ?b278 (Mul ?b77 ?b258))
  (set (const280) ?b278)
  (let ?b279 (Mul ?b84 ?b176))
  (set (const281) ?b279)
  (let ?b280 (Add ?b278 ?b279))
  (set (const282) ?b280)
  (let ?b281 (Add ?b277 ?b280))
  (set (const283) ?b281)
  (let ?b282 (Sub ?b197 ?b281))
  (set (const284) ?b282)
  (let ?b283 (Mul ?sx ?b282))
  (set (const285) ?b283)
  (let ?b284 (Sub ?b283 ?b267))
  (set (const286) ?b284)
  (let ?b285 (Mul ?sx ?b284))
  (set (const287) ?b285)
  (let ?b286 (Add ?b151 ?b285))
  (set (const288) ?b286)
  (let ?b287 (Sub ?b286 ?b257))
  (set (const289) ?b287)
  (let ?b288 (Mul ?sx ?b287))
  (set (const290) ?b288)
  (let ?b289 (Add ?b288 ?b34))
  (set (const291) ?b289)
  (let ?b290 (Sub ?b289 ?b0))
  (set (const292) ?b290)
  (let ?b291 (lower ?b290 "binary64"))
  (set (const293) ?b291)
  (let ?r292 (Approx ?b256 ?b291))
  (set (const294) ?r292)
  (let ?b293 (lower ?b116 "binary64"))
  (set (const295) ?b293)
  (let ?r294 (Approx ?b7 ?b293))
  (set (const296) ?r294)
  (let ?b295 (lower ?b13 "binary64"))
  (set (const297) ?b295)
  (let ?r296 (Approx ?b13 ?b295))
  (set (const298) ?r296)
  (let ?b297 (lower ?b18 "binary64"))
  (set (const299) ?b297)
  (let ?r298 (Approx ?b18 ?b297))
  (set (const300) ?r298)
  (let ?b299 (lower ?b26 "binary64"))
  (set (const301) ?b299)
  (let ?r300 (Approx ?b26 ?b299))
  (set (const302) ?r300)
  (let ?b301 (lower ?b30 "binary64"))
  (set (const303) ?b301)
  (let ?r302 (Approx ?b30 ?b301))
  (set (const304) ?r302)
  (let ?b303 (Div ?b0 ?b18))
  (set (const305) ?b303)
  (let ?b304 (Mul ?b29 ?b303))
  (set (const306) ?b304)
  (let ?b305 (Pow ?b13 ?b157))
  (set (const307) ?b305)
  (let ?b306 (Mul ?b143 ?b305))
  (set (const308) ?b306)
  (let ?b307 (Div ?b0 ?b306))
  (set (const309) ?b307)
  (let ?b308 (Mul ?b57 ?b307))
  (set (const310) ?b308)
  (let ?b309 (Sub ?b304 ?b308))
  (set (const311) ?b309)
  (let ?b310 (Div ?b309 ?b20))
  (set (const312) ?b310)
  (let ?b311 (lower ?b310 "binary64"))
  (set (const313) ?b311)
  (let ?r312 (Approx ?b38 ?b311))
  (set (const314) ?r312)
  (let ?b313 (Num (bigrat (from-string "4") (from-string "1"))))
  (set (const315) ?b313)
  (let ?b314 (Pow ?sx ?b313))
  (set (const316) ?b314)
  (let ?b315 (Num (bigrat (from-string "7") (from-string "1"))))
  (set (const317) ?b315)
  (let ?b316 (Pow ?b13 ?b315))
  (set (const318) ?b316)
  (let ?b317 (Mul ?b314 ?b316))
  (set (const319) ?b317)
  (let ?b318 (Div ?b55 ?b317))
  (set (const320) ?b318)
  (let ?b319 (Add ?b318 ?b304))
  (set (const321) ?b319)
  (let ?b320 (Div ?b57 ?b306))
  (set (const322) ?b320)
  (let ?b321 (Sub ?b319 ?b320))
  (set (const323) ?b321)
  (let ?b322 (Div ?b321 ?b20))
  (set (const324) ?b322)
  (let ?b323 (lower ?b322 "binary64"))
  (set (const325) ?b323)
  (let ?r324 (Approx ?b38 ?b323))
  (set (const326) ?r324)
  (let ?b325 (Div ?b0 ?b317))
  (set (const327) ?b325)
  (let ?b326 (Mul ?b55 ?b325))
  (set (const328) ?b326)
  (let ?b327 (Add ?b326 ?b304))
  (set (const329) ?b327)
  (let ?b328 (Num (bigrat (from-string "35") (from-string "128"))))
  (set (const330) ?b328)
  (let ?b329 (Num (bigrat (from-string "6") (from-string "1"))))
  (set (const331) ?b329)
  (let ?b330 (Pow ?sx ?b329))
  (set (const332) ?b330)
  (let ?b331 (Num (bigrat (from-string "9") (from-string "1"))))
  (set (const333) ?b331)
  (let ?b332 (Pow ?b13 ?b331))
  (set (const334) ?b332)
  (let ?b333 (Mul ?b330 ?b332))
  (set (const335) ?b333)
  (let ?b334 (Div ?b0 ?b333))
  (set (const336) ?b334)
  (let ?b335 (Mul ?b328 ?b334))
  (set (const337) ?b335)
  (let ?b336 (Add ?b320 ?b335))
  (set (const338) ?b336)
  (let ?b337 (Sub ?b327 ?b336))
  (set (const339) ?b337)
  (let ?b338 (Div ?b337 ?b20))
  (set (const340) ?b338)
  (let ?b339 (lower ?b338 "binary64"))
  (set (const341) ?b339)
  (let ?r340 (Approx ?b38 ?b339))
  (set (const342) ?r340)
  (let ?b341 (Add ?b0 ?b10))
  (set (const343) ?b341)
  (let ?b342 (Mul ?sx ?b341))
  (set (const344) ?b342)
  (let ?b343 (lower ?b342 "binary64"))
  (set (const345) ?b343)
  (let ?r344 (Approx ?b67 ?b343))
  (set (const346) ?r344)
  (let ?b345 (Mul ?b143 ?b13))
  (set (const347) ?b345)
  (let ?b346 (Div ?b0 ?b345))
  (set (const348) ?b346)
  (let ?b347 (Mul ?b29 ?b346))
  (set (const349) ?b347)
  (let ?b348 (Add ?b13 ?b347))
  (set (const350) ?b348)
  (let ?b349 (Mul ?sx ?b348))
  (set (const351) ?b349)
  (let ?b350 (lower ?b349 "binary64"))
  (set (const352) ?b350)
  (let ?r351 (Approx ?b73 ?b350))
  (set (const353) ?r351)
  (let ?b352 (Div ?b29 ?b345))
  (set (const354) ?b352)
  (let ?b353 (Add ?b13 ?b352))
  (set (const355) ?b353)
  (let ?b354 (Mul ?b314 ?b18))
  (set (const356) ?b354)
  (let ?b355 (Div ?b86 ?b354))
  (set (const357) ?b355)
  (let ?b356 (Sub ?b353 ?b355))
  (set (const358) ?b356)
  (let ?b357 (Mul ?sx ?b356))
  (set (const359) ?b357)
  (let ?b358 (lower ?b357 "binary64"))
  (set (const360) ?b358)
  (let ?r359 (Approx ?b73 ?b358))
  (set (const361) ?r359)
  (let ?b360 (Mul ?b330 ?b305))
  (set (const362) ?b360)
  (let ?b361 (Div ?b0 ?b360))
  (set (const363) ?b361)
  (let ?b362 (Mul ?b84 ?b361))
  (set (const364) ?b362)
  (let ?b363 (Add ?b352 ?b362))
  (set (const365) ?b363)
  (let ?b364 (Add ?b13 ?b363))
  (set (const366) ?b364)
  (let ?b365 (Div ?b0 ?b354))
  (set (const367) ?b365)
  (let ?b366 (Mul ?b86 ?b365))
  (set (const368) ?b366)
  (let ?b367 (Sub ?b364 ?b366))
  (set (const369) ?b367)
  (let ?b368 (Mul ?sx ?b367))
  (set (const370) ?b368)
  (let ?b369 (lower ?b368 "binary64"))
  (set (const371) ?b369)
  (let ?r370 (Approx ?b73 ?b369))
  (set (const372) ?r370)
  (let ?b371 (Pow ?b13 ?b142))
  (set (const373) ?b371)
  (let ?b372 (Mul ?b143 ?b371))
  (set (const374) ?b372)
  (let ?b373 (lower ?b372 "binary64"))
  (set (const375) ?b373)
  (let ?r374 (Approx ?b94 ?b373))
  (set (const376) ?r374)
  (let ?b375 (Div ?b0 ?b143))
  (set (const377) ?b375)
  (let ?b376 (Mul ?b29 ?b375))
  (set (const378) ?b376)
  (let ?b377 (Add ?b376 ?b371))
  (set (const379) ?b377)
  (let ?b378 (Mul ?b143 ?b377))
  (set (const380) ?b378)
  (let ?b379 (lower ?b378 "binary64"))
  (set (const381) ?b379)
  (let ?r380 (Approx ?b94 ?b379))
  (set (const382) ?r380)
  (let ?b381 (Mul ?b314 ?b371))
  (set (const383) ?b381)
  (let ?b382 (Div ?b86 ?b381))
  (set (const384) ?b382)
  (let ?b383 (Sub ?b377 ?b382))
  (set (const385) ?b383)
  (let ?b384 (Mul ?b143 ?b383))
  (set (const386) ?b384)
  (let ?b385 (lower ?b384 "binary64"))
  (set (const387) ?b385)
  (let ?r386 (Approx ?b94 ?b385))
  (set (const388) ?r386)
  (let ?b387 (Pow ?b13 ?b313))
  (set (const389) ?b387)
  (let ?b388 (Mul ?b330 ?b387))
  (set (const390) ?b388)
  (let ?b389 (Div ?b0 ?b388))
  (set (const391) ?b389)
  (let ?b390 (Mul ?b84 ?b389))
  (set (const392) ?b390)
  (let ?b391 (Add ?b390 ?b377))
  (set (const393) ?b391)
  (let ?b392 (Div ?b0 ?b381))
  (set (const394) ?b392)
  (let ?b393 (Mul ?b86 ?b392))
  (set (const395) ?b393)
  (let ?b394 (Sub ?b391 ?b393))
  (set (const396) ?b394)
  (let ?b395 (Mul ?b143 ?b394))
  (set (const397) ?b395)
  (let ?b396 (lower ?b395 "binary64"))
  (set (const398) ?b396)
  (let ?r397 (Approx ?b94 ?b396))
  (set (const399) ?r397)
  (let ?b398 (lower ?b66 "binary64"))
  (set (const400) ?b398)
  (let ?r399 (Approx ?b39 ?b398))
  (set (const401) ?r399)
  (let ?b400 (Div ?b0 ?b116))
  (set (const402) ?b400)
  (let ?b401 (Sub ?b400 ?b0))
  (set (const403) ?b401)
  (let ?b402 (lower ?b401 "binary64"))
  (set (const404) ?b402)
  (let ?r403 (Approx ?b39 ?b402))
  (set (const405) ?r403)
  (let ?b404 (lower ?b117 "binary64"))
  (set (const406) ?b404)
  (let ?r405 (Approx ?b117 ?b404))
  (set (const407) ?r405)
  (let ?b406 (Div ?b0 ?b13))
  (set (const408) ?b406)
  (let ?b407 (Mul ?b29 ?b406))
  (set (const409) ?b407)
  (let ?b408 (Mul ?b143 ?b18))
  (set (const410) ?b408)
  (let ?b409 (Div ?b0 ?b408))
  (set (const411) ?b409)
  (let ?b410 (Mul ?b86 ?b409))
  (set (const412) ?b410)
  (let ?b411 (Sub ?b407 ?b410))
  (set (const413) ?b411)
  (let ?b412 (Div ?b411 ?sx))
  (set (const414) ?b412)
  (let ?b413 (lower ?b412 "binary64"))
  (set (const415) ?b413)
  (let ?r414 (Approx ?b123 ?b413))
  (set (const416) ?r414)
  (let ?b415 (Mul ?b314 ?b305))
  (set (const417) ?b415)
  (let ?b416 (Div ?b84 ?b415))
  (set (const418) ?b416)
  (let ?b417 (Add ?b416 ?b407))
  (set (const419) ?b417)
  (let ?b418 (Div ?b86 ?b408))
  (set (const420) ?b418)
  (let ?b419 (Sub ?b417 ?b418))
  (set (const421) ?b419)
  (let ?b420 (Div ?b419 ?sx))
  (set (const422) ?b420)
  (let ?b421 (lower ?b420 "binary64"))
  (set (const423) ?b421)
  (let ?r422 (Approx ?b123 ?b421))
  (set (const424) ?r422)
  (let ?b423 (Div ?b0 ?b415))
  (set (const425) ?b423)
  (let ?b424 (Mul ?b84 ?b423))
  (set (const426) ?b424)
  (let ?b425 (Add ?b407 ?b424))
  (set (const427) ?b425)
  (let ?b426 (Num (bigrat (from-string "5") (from-string "128"))))
  (set (const428) ?b426)
  (let ?b427 (Mul ?b330 ?b316))
  (set (const429) ?b427)
  (let ?b428 (Div ?b0 ?b427))
  (set (const430) ?b428)
  (let ?b429 (Mul ?b426 ?b428))
  (set (const431) ?b429)
  (let ?b430 (Add ?b418 ?b429))
  (set (const432) ?b430)
  (let ?b431 (Sub ?b425 ?b430))
  (set (const433) ?b431)
  (let ?b432 (Div ?b431 ?sx))
  (set (const434) ?b432)
  (let ?b433 (lower ?b432 "binary64"))
  (set (const435) ?b433)
  (let ?r434 (Approx ?b123 ?b433))
  (set (const436) ?r434)
  (let ?b435 (lower ?b143 "binary64"))
  (set (const437) ?b435)
  (let ?r436 (Approx ?b137 ?b435))
  (set (const438) ?r436)
  (let ?b437 (Mul ?b143 ?b341))
  (set (const439) ?b437)
  (let ?b438 (lower ?b437 "binary64"))
  (set (const440) ?b438)
  (let ?r439 (Approx ?b137 ?b438))
  (set (const441) ?r439)
  (let ?b440 (Mul ?b29 ?b10))
  (set (const442) ?b440)
  (let ?b441 (Add ?b0 ?b440))
  (set (const443) ?b441)
  (let ?b442 (Mul ?sx ?b441))
  (set (const444) ?b442)
  (let ?b443 (lower ?b442 "binary64"))
  (set (const445) ?b443)
  (let ?r444 (Approx ?b141 ?b443))
  (set (const446) ?r444)
  (let ?b445 (Div ?b86 ?b143))
  (set (const447) ?b445)
  (let ?b446 (Sub ?b441 ?b445))
  (set (const448) ?b446)
  (let ?b447 (Mul ?sx ?b446))
  (set (const449) ?b447)
  (let ?b448 (lower ?b447 "binary64"))
  (set (const450) ?b448)
  (let ?r449 (Approx ?b141 ?b448))
  (set (const451) ?r449)
  (let ?b450 (Div ?b0 ?b20))
  (set (const452) ?b450)
  (let ?b451 (Mul ?b84 ?b450))
  (set (const453) ?b451)
  (let ?b452 (Add ?b440 ?b451))
  (set (const454) ?b452)
  (let ?b453 (Add ?b0 ?b452))
  (set (const455) ?b453)
  (let ?b454 (Sub ?b453 ?b445))
  (set (const456) ?b454)
  (let ?b455 (Mul ?sx ?b454))
  (set (const457) ?b455)
  (let ?b456 (lower ?b455 "binary64"))
  (set (const458) ?b456)
  (let ?r457 (Approx ?b141 ?b456))
  (set (const459) ?r457)
  (let ?b458 (lower ?b345 "binary64"))
  (set (const460) ?b458)
  (let ?r459 (Approx ?b170 ?b458))
  (set (const461) ?r459)
  (let ?b460 (Div ?b13 ?sx))
  (set (const462) ?b460)
  (let ?b461 (Add ?b13 ?b460))
  (set (const463) ?b461)
  (let ?b462 (Mul ?b143 ?b461))
  (set (const464) ?b462)
  (let ?b463 (lower ?b462 "binary64"))
  (set (const465) ?b463)
  (let ?r464 (Approx ?b170 ?b463))
  (set (const466) ?r464)
  (let ?b465 (lower ?b352 "binary64"))
  (set (const467) ?b465)
  (let ?r466 (Approx ?b175 ?b465))
  (set (const468) ?r466)
  (let ?b467 (Mul ?b198 ?b400))
  (set (const469) ?b467)
  (let ?b468 (Sub ?b407 ?b467))
  (set (const470) ?b468)
  (let ?b469 (Div ?b468 ?b143))
  (set (const471) ?b469)
  (let ?b470 (lower ?b469 "binary64"))
  (set (const472) ?b470)
  (let ?r471 (Approx ?b175 ?b470))
  (set (const473) ?r471)
  (let ?b472 (Num (bigrat (from-string "3") (from-string "16"))))
  (set (const474) ?b472)
  (let ?b473 (Mul ?b472 ?b346))
  (set (const475) ?b473)
  (let ?b474 (Add ?b407 ?b473))
  (set (const476) ?b474)
  (let ?b475 (Div ?b198 ?b116))
  (set (const477) ?b475)
  (let ?b476 (Add ?b475 ?b410))
  (set (const478) ?b476)
  (let ?b477 (Sub ?b474 ?b476))
  (set (const479) ?b477)
  (let ?b478 (Div ?b477 ?b143))
  (set (const480) ?b478)
  (let ?b479 (lower ?b478 "binary64"))
  (set (const481) ?b479)
  (let ?r480 (Approx ?b175 ?b479))
  (set (const482) ?r480)
  (let ?b481 (Mul ?b84 ?b406))
  (set (const483) ?b481)
  (let ?b482 (Mul ?b472 ?b406))
  (set (const484) ?b482)
  (let ?b483 (Mul ?b86 ?b303))
  (set (const485) ?b483)
  (let ?b484 (Sub ?b482 ?b483))
  (set (const486) ?b484)
  (let ?b485 (Mul ?b29 ?b484))
  (set (const487) ?b485)
  (let ?b486 (Add ?b481 ?b485))
  (set (const488) ?b486)
  (let ?b487 (Div ?b486 ?b20))
  (set (const489) ?b487)
  (let ?b488 (Mul ?b66 ?b487))
  (set (const490) ?b488)
  (let ?b489 (Add ?b488 ?b474))
  (set (const491) ?b489)
  (let ?b490 (Sub ?b489 ?b476))
  (set (const492) ?b490)
  (let ?b491 (Div ?b490 ?b143))
  (set (const493) ?b491)
  (let ?b492 (lower ?b491 "binary64"))
  (set (const494) ?b492)
  (let ?r493 (Approx ?b175 ?b492))
  (set (const495) ?r493)
  (let ?b494 (lower ?b29 "binary64"))
  (set (const496) ?b494)
  (let ?r495 (Approx ?b210 ?b494))
  (set (const497) ?r495)
  (let ?b496 (Mul ?b86 ?b10))
  (set (const498) ?b496)
  (let ?b497 (Add ?b29 ?b496))
  (set (const499) ?b497)
  (let ?b498 (lower ?b497 "binary64"))
  (set (const500) ?b498)
  (let ?r499 (Approx ?b210 ?b498))
  (set (const501) ?r499)
  (let ?b500 (Div ?b84 ?b143))
  (set (const502) ?b500)
  (let ?b501 (Sub ?b497 ?b500))
  (set (const503) ?b501)
  (let ?b502 (lower ?b501 "binary64"))
  (set (const504) ?b502)
  (let ?r503 (Approx ?b210 ?b502))
  (set (const505) ?r503)
  (let ?b504 (Mul ?b426 ?b450))
  (set (const506) ?b504)
  (let ?b505 (Add ?b496 ?b504))
  (set (const507) ?b505)
  (let ?b506 (Add ?b29 ?b505))
  (set (const508) ?b506)
  (let ?b507 (Sub ?b506 ?b500))
  (set (const509) ?b507)
  (let ?b508 (lower ?b507 "binary64"))
  (set (const510) ?b508)
  (let ?r509 (Approx ?b210 ?b508))
  (set (const511) ?r509)
  (let ?b510 (Mul ?b57 ?b400))
  (set (const512) ?b510)
  (let ?b511 (Sub ?b407 ?b510))
  (set (const513) ?b511)
  (let ?b512 (Div ?b511 ?b143))
  (set (const514) ?b512)
  (let ?b513 (lower ?b512 "binary64"))
  (set (const515) ?b513)
  (let ?r514 (Approx ?b231 ?b513))
  (set (const516) ?r514)
  (let ?b515 (Div ?b55 ?b345))
  (set (const517) ?b515)
  (let ?b516 (Add ?b515 ?b407))
  (set (const518) ?b516)
  (let ?b517 (Div ?b57 ?b116))
  (set (const519) ?b517)
  (let ?b518 (Sub ?b516 ?b517))
  (set (const520) ?b518)
  (let ?b519 (Div ?b518 ?b143))
  (set (const521) ?b519)
  (let ?b520 (lower ?b519 "binary64"))
  (set (const522) ?b520)
  (let ?r521 (Approx ?b231 ?b520))
  (set (const523) ?r521)
  (let ?b522 (Mul ?b55 ?b346))
  (set (const524) ?b522)
  (let ?b523 (Add ?b407 ?b522))
  (set (const525) ?b523)
  (let ?b524 (Mul ?b20 ?b13))
  (set (const526) ?b524)
  (let ?b525 (Div ?b0 ?b524))
  (set (const527) ?b525)
  (let ?b526 (Mul ?b328 ?b525))
  (set (const528) ?b526)
  (let ?b527 (Add ?b517 ?b526))
  (set (const529) ?b527)
  (let ?b528 (Sub ?b523 ?b527))
  (set (const530) ?b528)
  (let ?b529 (Div ?b528 ?b143))
  (set (const531) ?b529)
  (let ?b530 (lower ?b529 "binary64"))
  (set (const532) ?b530)
  (let ?r531 (Approx ?b231 ?b530))
  (set (const533) ?r531)
  (let ?b532 (Mul ?b66 ?b116))
  (set (const534) ?b532)
  (let ?b533 (lower ?b532 "binary64"))
  (set (const535) ?b533)
  (let ?r534 (Approx ?b7 ?b533))
  (set (const536) ?r534)
  (let ?b535 (Div ?b214 ?b26))
  (set (const537) ?b535)
  (let ?b536 (lower ?b535 "binary64"))
  (set (const538) ?b536)
  (let ?r537 (Approx ?b38 ?b536))
  (set (const539) ?r537)
  (let ?b538 (Mul ?b66 ?b310))
  (set (const540) ?b538)
  (let ?b539 (lower ?b538 "binary64"))
  (set (const541) ?b539)
  (let ?r540 (Approx ?b38 ?b539))
  (set (const542) ?r540)
  (let ?b541 (Mul ?b66 ?b322))
  (set (const543) ?b541)
  (let ?b542 (lower ?b541 "binary64"))
  (set (const544) ?b542)
  (let ?r543 (Approx ?b38 ?b542))
  (set (const545) ?r543)
  (let ?b544 (Mul ?b66 ?b338))
  (set (const546) ?b544)
  (let ?b545 (lower ?b544 "binary64"))
  (set (const547) ?b545)
  (let ?r546 (Approx ?b38 ?b545))
  (set (const548) ?r546)
  (let ?b547 (Mul ?b66 ?b349))
  (set (const549) ?b547)
  (let ?b548 (lower ?b547 "binary64"))
  (set (const550) ?b548)
  (let ?r549 (Approx ?b73 ?b548))
  (set (const551) ?r549)
  (let ?b550 (Mul ?b66 ?b357))
  (set (const552) ?b550)
  (let ?b551 (lower ?b550 "binary64"))
  (set (const553) ?b551)
  (let ?r552 (Approx ?b73 ?b551))
  (set (const554) ?r552)
  (let ?b553 (Mul ?b66 ?b368))
  (set (const555) ?b553)
  (let ?b554 (lower ?b553 "binary64"))
  (set (const556) ?b554)
  (let ?r555 (Approx ?b73 ?b554))
  (set (const557) ?r555)
  (let ?b556 (Add ?b0 ?b400))
  (set (const558) ?b556)
  (let ?b557 (Mul ?b66 ?b556))
  (set (const559) ?b557)
  (let ?b558 (lower ?b557 "binary64"))
  (set (const560) ?b558)
  (let ?r559 (Approx ?b39 ?b558))
  (set (const561) ?r559)
  (let ?b560 (Div ?b214 ?b116))
  (set (const562) ?b560)
  (let ?b561 (lower ?b560 "binary64"))
  (set (const563) ?b561)
  (let ?r562 (Approx ?b123 ?b561))
  (set (const564) ?r562)
  (let ?b563 (Mul ?b66 ?b412))
  (set (const565) ?b563)
  (let ?b564 (lower ?b563 "binary64"))
  (set (const566) ?b564)
  (let ?r565 (Approx ?b123 ?b564))
  (set (const567) ?r565)
  (let ?b566 (Mul ?b66 ?b420))
  (set (const568) ?b566)
  (let ?b567 (lower ?b566 "binary64"))
  (set (const569) ?b567)
  (let ?r568 (Approx ?b123 ?b567))
  (set (const570) ?r568)
  (let ?b569 (Mul ?b66 ?b432))
  (set (const571) ?b569)
  (let ?b570 (lower ?b569 "binary64"))
  (set (const572) ?b570)
  (let ?r571 (Approx ?b123 ?b570))
  (set (const573) ?r571)
  (let ?b572 (Mul ?b66 ?sx))
  (set (const574) ?b572)
  (let ?b573 (lower ?b572 "binary64"))
  (set (const575) ?b573)
  (let ?r574 (Approx ?b141 ?b573))
  (set (const576) ?r574)
  (let ?b575 (Mul ?b66 ?b442))
  (set (const577) ?b575)
  (let ?b576 (lower ?b575 "binary64"))
  (set (const578) ?b576)
  (let ?r577 (Approx ?b141 ?b576))
  (set (const579) ?r577)
  (let ?b578 (Sub ?b496 ?b29))
  (set (const580) ?b578)
  (let ?b579 (Div ?b578 ?sx))
  (set (const581) ?b579)
  (let ?b580 (Mul ?b66 ?b579))
  (set (const582) ?b580)
  (let ?b581 (Add ?b0 ?b580))
  (set (const583) ?b581)
  (let ?b582 (Mul ?sx ?b581))
  (set (const584) ?b582)
  (let ?b583 (Mul ?b66 ?b582))
  (set (const585) ?b583)
  (let ?b584 (lower ?b583 "binary64"))
  (set (const586) ?b584)
  (let ?r585 (Approx ?b141 ?b584))
  (set (const587) ?r585)
  (let ?b586 (Mul ?b84 ?b10))
  (set (const588) ?b586)
  (let ?b587 (Sub ?b586 ?b86))
  (set (const589) ?b587)
  (let ?b588 (Div ?b587 ?sx))
  (set (const590) ?b588)
  (let ?b589 (Mul ?b66 ?b588))
  (set (const591) ?b589)
  (let ?b590 (Sub ?b589 ?b29))
  (set (const592) ?b590)
  (let ?b591 (Div ?b590 ?sx))
  (set (const593) ?b591)
  (let ?b592 (Mul ?b66 ?b591))
  (set (const594) ?b592)
  (let ?b593 (Add ?b0 ?b592))
  (set (const595) ?b593)
  (let ?b594 (Mul ?sx ?b593))
  (set (const596) ?b594)
  (let ?b595 (Mul ?b66 ?b594))
  (set (const597) ?b595)
  (let ?b596 (lower ?b595 "binary64"))
  (set (const598) ?b596)
  (let ?r597 (Approx ?b141 ?b596))
  (set (const599) ?r597)
  (let ?b598 (Mul ?b66 ?b345))
  (set (const600) ?b598)
  (let ?b599 (lower ?b598 "binary64"))
  (set (const601) ?b599)
  (let ?r600 (Approx ?b170 ?b599))
  (set (const602) ?r600)
  (let ?b601 (Mul ?b66 ?b13))
  (set (const603) ?b601)
  (let ?b602 (Mul ?b66 ?b460))
  (set (const604) ?b602)
  (let ?b603 (Add ?b601 ?b602))
  (set (const605) ?b603)
  (let ?b604 (Mul ?b143 ?b603))
  (set (const606) ?b604)
  (let ?b605 (lower ?b604 "binary64"))
  (set (const607) ?b605)
  (let ?r606 (Approx ?b170 ?b605))
  (set (const608) ?r606)
  (let ?b607 (Div ?b484 ?sx))
  (set (const609) ?b607)
  (let ?b608 (Mul ?b66 ?b607))
  (set (const610) ?b608)
  (let ?b609 (Mul ?b198 ?b406))
  (set (const611) ?b609)
  (let ?b610 (Add ?b608 ?b609))
  (set (const612) ?b610)
  (let ?b611 (Div ?b610 ?sx))
  (set (const613) ?b611)
  (let ?b612 (Mul ?b66 ?b611))
  (set (const614) ?b612)
  (let ?b613 (Add ?b612 ?b407))
  (set (const615) ?b613)
  (let ?b614 (Div ?b613 ?b143))
  (set (const616) ?b614)
  (let ?b615 (lower ?b614 "binary64"))
  (set (const617) ?b615)
  (let ?r616 (Approx ?b175 ?b615))
  (set (const618) ?r616)
  (let ?b617 (Mul ?b214 ?b484))
  (set (const619) ?b617)
  (let ?b618 (Sub ?b481 ?b617))
  (set (const620) ?b618)
  (let ?b619 (Div ?b618 ?sx))
  (set (const621) ?b619)
  (let ?b620 (Mul ?b66 ?b619))
  (set (const622) ?b620)
  (let ?b621 (Add ?b620 ?b482))
  (set (const623) ?b621)
  (let ?b622 (Sub ?b621 ?b483))
  (set (const624) ?b622)
  (let ?b623 (Div ?b622 ?sx))
  (set (const625) ?b623)
  (let ?b624 (Mul ?b66 ?b623))
  (set (const626) ?b624)
  (let ?b625 (Add ?b624 ?b609))
  (set (const627) ?b625)
  (let ?b626 (Div ?b625 ?sx))
  (set (const628) ?b626)
  (let ?b627 (Mul ?b66 ?b626))
  (set (const629) ?b627)
  (let ?b628 (Add ?b627 ?b407))
  (set (const630) ?b628)
  (let ?b629 (Div ?b628 ?b143))
  (set (const631) ?b629)
  (let ?b630 (lower ?b629 "binary64"))
  (set (const632) ?b630)
  (let ?r631 (Approx ?b175 ?b630))
  (set (const633) ?r631)
  (let ?b632 (Mul ?b142 ?sx))
  (set (const634) ?b632)
  (let ?b633 (lower ?b632 "binary64"))
  (set (const635) ?b633)
  (let ?r634 (Approx ?b210 ?b633))
  (set (const636) ?r634)
  (let ?b635 (Num (bigrat (from-string "3") (from-string "2"))))
  (set (const637) ?b635)
  (let ?b636 (Mul ?b635 ?b10))
  (set (const638) ?b636)
  (let ?b637 (Add ?b142 ?b636))
  (set (const639) ?b637)
  (let ?b638 (Mul ?sx ?b637))
  (set (const640) ?b638)
  (let ?b639 (lower ?b638 "binary64"))
  (set (const641) ?b639)
  (let ?r640 (Approx ?b210 ?b639))
  (set (const642) ?r640)
  (let ?b641 (Sub ?b635 ?b496))
  (set (const643) ?b641)
  (let ?b642 (Div ?b641 ?sx))
  (set (const644) ?b642)
  (let ?b643 (Mul ?b66 ?b642))
  (set (const645) ?b643)
  (let ?b644 (Sub ?b643 ?b142))
  (set (const646) ?b644)
  (let ?b645 (Mul ?sx ?b644))
  (set (const647) ?b645)
  (let ?b646 (Mul ?b66 ?b645))
  (set (const648) ?b646)
  (let ?b647 (lower ?b646 "binary64"))
  (set (const649) ?b647)
  (let ?r648 (Approx ?b210 ?b647))
  (set (const650) ?r648)
  (let ?b649 (Sub ?b86 ?b586))
  (set (const651) ?b649)
  (let ?b650 (Div ?b649 ?sx))
  (set (const652) ?b650)
  (let ?b651 (Mul ?b66 ?b650))
  (set (const653) ?b651)
  (let ?b652 (Add ?b635 ?b651))
  (set (const654) ?b652)
  (let ?b653 (Div ?b652 ?sx))
  (set (const655) ?b653)
  (let ?b654 (Mul ?b66 ?b653))
  (set (const656) ?b654)
  (let ?b655 (Sub ?b654 ?b142))
  (set (const657) ?b655)
  (let ?b656 (Mul ?sx ?b655))
  (set (const658) ?b656)
  (let ?b657 (Mul ?b66 ?b656))
  (set (const659) ?b657)
  (let ?b658 (lower ?b657 "binary64"))
  (set (const660) ?b658)
  (let ?r659 (Approx ?b210 ?b658))
  (set (const661) ?r659)
  (let ?b660 (Num (bigrat (from-string "-2") (from-string "1"))))
  (set (const662) ?b660)
  (let ?b661 (Div ?b660 ?b116))
  (set (const663) ?b661)
  (let ?b662 (lower ?b661 "binary64"))
  (set (const664) ?b662)
  (let ?r663 (Approx ?b231 ?b662))
  (set (const665) ?r663)
  (let ?b664 (Mul ?b142 ?b406))
  (set (const666) ?b664)
  (let ?b665 (Mul ?b29 ?b400))
  (set (const667) ?b665)
  (let ?b666 (Sub ?b664 ?b665))
  (set (const668) ?b666)
  (let ?b667 (Div ?b666 ?sx))
  (set (const669) ?b667)
  (let ?b668 (Mul ?b66 ?b667))
  (set (const670) ?b668)
  (let ?b669 (lower ?b668 "binary64"))
  (set (const671) ?b669)
  (let ?r670 (Approx ?b231 ?b669))
  (set (const672) ?r670)
  (let ?b671 (Div ?b511 ?sx))
  (set (const673) ?b671)
  (let ?b672 (Mul ?b66 ?b671))
  (set (const674) ?b672)
  (let ?b673 (Add ?b672 ?b664))
  (set (const675) ?b673)
  (let ?b674 (Div ?b673 ?sx))
  (set (const676) ?b674)
  (let ?b675 (Mul ?b66 ?b674))
  (set (const677) ?b675)
  (let ?b676 (lower ?b675 "binary64"))
  (set (const678) ?b676)
  (let ?r677 (Approx ?b231 ?b676))
  (set (const679) ?r677)
  (let ?b678 (Mul ?b57 ?b406))
  (set (const680) ?b678)
  (let ?b679 (Mul ?b55 ?b400))
  (set (const681) ?b679)
  (let ?b680 (Sub ?b678 ?b679))
  (set (const682) ?b680)
  (let ?b681 (Div ?b680 ?sx))
  (set (const683) ?b681)
  (let ?b682 (Mul ?b66 ?b681))
  (set (const684) ?b682)
  (let ?b683 (Add ?b682 ?b407))
  (set (const685) ?b683)
  (let ?b684 (Div ?b683 ?sx))
  (set (const686) ?b684)
  (let ?b685 (Mul ?b66 ?b684))
  (set (const687) ?b685)
  (let ?b686 (Add ?b685 ?b664))
  (set (const688) ?b686)
  (let ?b687 (Div ?b686 ?sx))
  (set (const689) ?b687)
  (let ?b688 (Mul ?b66 ?b687))
  (set (const690) ?b688)
  (let ?b689 (lower ?b688 "binary64"))
  (set (const691) ?b689)
  (let ?r690 (Approx ?b231 ?b689))
  (set (const692) ?r690))
 :ruleset
 run-extract-commands)
(run-schedule (repeat 1 run-extract-commands))
(run-schedule (saturate lowering))
(extract (const6) 1000000)
(extract (const8) 1000000)
(extract (const11) 1000000)
(extract (const14) 1000000)
(extract (const18) 1000000)
(extract (const25) 1000000)
(extract (const27) 1000000)
(extract (const30) 1000000)
(extract (const35) 1000000)
(extract (const43) 1000000)
(extract (const48) 1000000)
(extract (const56) 1000000)
(extract (const67) 1000000)
(extract (const71) 1000000)
(extract (const74) 1000000)
(extract (const78) 1000000)
(extract (const85) 1000000)
(extract (const95) 1000000)
(extract (const101) 1000000)
(extract (const108) 1000000)
(extract (const117) 1000000)
(extract (const122) 1000000)
(extract (const128) 1000000)
(extract (const131) 1000000)
(extract (const134) 1000000)
(extract (const137) 1000000)
(extract (const142) 1000000)
(extract (const150) 1000000)
(extract (const158) 1000000)
(extract (const171) 1000000)
(extract (const175) 1000000)
(extract (const180) 1000000)
(extract (const186) 1000000)
(extract (const198) 1000000)
(extract (const211) 1000000)
(extract (const215) 1000000)
(extract (const223) 1000000)
(extract (const232) 1000000)
(extract (const237) 1000000)
(extract (const249) 1000000)
(extract (const257) 1000000)
(extract (const265) 1000000)
(extract (const278) 1000000)
(extract (const294) 1000000)
(extract (const296) 1000000)
(extract (const298) 1000000)
(extract (const300) 1000000)
(extract (const302) 1000000)
(extract (const304) 1000000)
(extract (const314) 1000000)
(extract (const326) 1000000)
(extract (const342) 1000000)
(extract (const346) 1000000)
(extract (const353) 1000000)
(extract (const361) 1000000)
(extract (const372) 1000000)
(extract (const376) 1000000)
(extract (const382) 1000000)
(extract (const388) 1000000)
(extract (const399) 1000000)
(extract (const401) 1000000)
(extract (const405) 1000000)
(extract (const407) 1000000)
(extract (const416) 1000000)
(extract (const424) 1000000)
(extract (const436) 1000000)
(extract (const438) 1000000)
(extract (const441) 1000000)
(extract (const446) 1000000)
(extract (const451) 1000000)
(extract (const459) 1000000)
(extract (const461) 1000000)
(extract (const466) 1000000)
(extract (const468) 1000000)
(extract (const473) 1000000)
(extract (const482) 1000000)
(extract (const495) 1000000)
(extract (const497) 1000000)
(extract (const501) 1000000)
(extract (const505) 1000000)
(extract (const511) 1000000)
(extract (const516) 1000000)
(extract (const523) 1000000)
(extract (const533) 1000000)
(extract (const536) 1000000)
(extract (const539) 1000000)
(extract (const542) 1000000)
(extract (const545) 1000000)
(extract (const548) 1000000)
(extract (const551) 1000000)
(extract (const554) 1000000)
(extract (const557) 1000000)
(extract (const561) 1000000)
(extract (const564) 1000000)
(extract (const567) 1000000)
(extract (const570) 1000000)
(extract (const573) 1000000)
(extract (const576) 1000000)
(extract (const579) 1000000)
(extract (const587) 1000000)
(extract (const599) 1000000)
(extract (const602) 1000000)
(extract (const608) 1000000)
(extract (const618) 1000000)
(extract (const633) 1000000)
(extract (const636) 1000000)
(extract (const642) 1000000)
(extract (const650) 1000000)
(extract (const661) 1000000)
(extract (const665) 1000000)
(extract (const672) 1000000)
(extract (const679) 1000000)
(extract (const692) 1000000)
