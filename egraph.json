{
  "backend": {
    "db": {
      "tables": {
        "data": [
          {
            "spec": {
              "n_keys": 1,
              "n_vals": 2,
              "uncacheable_columns": {
                "data": [
                  null,
                  true
                ],
                "_marker": null
              },
              "allows_delete": false
            }
          },
          {
            "spec": {
              "n_keys": 1,
              "n_vals": 3,
              "uncacheable_columns": {
                "data": [],
                "_marker": null
              },
              "allows_delete": true
            }
          },
          {
            "spec": {
              "n_keys": 1,
              "n_vals": 3,
              "uncacheable_columns": {
                "data": [],
                "_marker": null
              },
              "allows_delete": true
            }
          }
        ],
        "_marker": null
      },
      "counters": {
        "data": [
          0,
          0,
          22
        ],
        "_marker": null
      },
      "container_values": {
        "subset_tracker": {
          "last_rebuilt_at": {
            "data": [
              {
                "major": {
                  "rep": 0
                },
                "minor": {
                  "rep": 0
                }
              }
            ],
            "_marker": null
          }
        },
        "container_ids": {
          "shards_log2": 4
        }
      },
      "deps": {
        "levels": {
          "data": [
            [
              {
                "rep": 0
              },
              {
                "rep": 1
              },
              {
                "rep": 2
              }
            ]
          ],
          "_marker": null
        },
        "to_level": {
          "data": [
            {
              "rep": 0
            },
            {
              "rep": 0
            },
            {
              "rep": 0
            }
          ],
          "_marker": null
        },
        "write_deps": {
          "data": [
            [],
            [],
            []
          ],
          "_marker": null
        }
      },
      "base_values": {},
      "total_size_estimate": 21
    },
    "uf_table": {
      "rep": 0
    },
    "id_counter": {
      "rep": 0
    },
    "reason_counter": {
      "rep": 1
    },
    "timestamp_counter": {
      "rep": 2
    },
    "rules": {
      "data": {
        "data": [
          {
            "last_run_at": {
              "rep": 0
            },
            "query": {
              "uf_table": {
                "rep": 0
              },
              "id_counter": {
                "rep": 0
              },
              "ts_counter": {
                "rep": 2
              },
              "tracing": false,
              "rule_id": {
                "rep": 0
              },
              "vars": {
                "data": [
                  {
                    "ty": {
                      "Base": {
                        "rep": 3
                      }
                    },
                    "term_var": {
                      "rep": 0
                    }
                  },
                  {
                    "ty": {
                      "Base": {
                        "rep": 0
                      }
                    },
                    "term_var": {
                      "rep": 1
                    }
                  },
                  {
                    "ty": "Id",
                    "term_var": {
                      "rep": 2
                    }
                  },
                  {
                    "ty": "Id",
                    "term_var": {
                      "rep": 3
                    }
                  }
                ],
                "_marker": null
              },
              "atom_proofs": [],
              "atoms": [
                [
                  {
                    "rep": 1
                  },
                  [
                    {
                      "Var": {
                        "id": {
                          "rep": 0
                        },
                        "name": null
                      }
                    },
                    {
                      "Var": {
                        "id": {
                          "rep": 1
                        },
                        "name": null
                      }
                    },
                    {
                      "Var": {
                        "id": {
                          "rep": 3
                        },
                        "name": null
                      }
                    },
                    {
                      "Var": {
                        "id": {
                          "rep": 2
                        },
                        "name": null
                      }
                    }
                  ],
                  {
                    "tracing": false,
                    "subsume": true,
                    "func_cols": 2
                  }
                ]
              ],
              "sole_focus": null,
              "seminaive": false,
              "plan_strategy": "MinCover"
            },
            "cached_plan": null,
            "desc": "nonincremental rebuild FunctionId(0)"
          },
          {
            "last_run_at": {
              "rep": 0
            },
            "query": {
              "uf_table": {
                "rep": 0
              },
              "id_counter": {
                "rep": 0
              },
              "ts_counter": {
                "rep": 2
              },
              "tracing": false,
              "rule_id": {
                "rep": 1
              },
              "vars": {
                "data": [
                  {
                    "ty": {
                      "Base": {
                        "rep": 3
                      }
                    },
                    "term_var": {
                      "rep": 0
                    }
                  },
                  {
                    "ty": {
                      "Base": {
                        "rep": 0
                      }
                    },
                    "term_var": {
                      "rep": 1
                    }
                  },
                  {
                    "ty": "Id",
                    "term_var": {
                      "rep": 2
                    }
                  },
                  {
                    "ty": "Id",
                    "term_var": {
                      "rep": 3
                    }
                  }
                ],
                "_marker": null
              },
              "atom_proofs": [],
              "atoms": [
                [
                  {
                    "rep": 2
                  },
                  [
                    {
                      "Var": {
                        "id": {
                          "rep": 0
                        },
                        "name": null
                      }
                    },
                    {
                      "Var": {
                        "id": {
                          "rep": 1
                        },
                        "name": null
                      }
                    },
                    {
                      "Var": {
                        "id": {
                          "rep": 3
                        },
                        "name": null
                      }
                    },
                    {
                      "Var": {
                        "id": {
                          "rep": 2
                        },
                        "name": null
                      }
                    }
                  ],
                  {
                    "tracing": false,
                    "subsume": true,
                    "func_cols": 2
                  }
                ]
              ],
              "sole_focus": null,
              "seminaive": false,
              "plan_strategy": "MinCover"
            },
            "cached_plan": null,
            "desc": "nonincremental rebuild FunctionId(1)"
          },
          {
            "last_run_at": {
              "rep": 22
            },
            "query": {
              "uf_table": {
                "rep": 0
              },
              "id_counter": {
                "rep": 0
              },
              "ts_counter": {
                "rep": 2
              },
              "tracing": false,
              "rule_id": {
                "rep": 2
              },
              "vars": {
                "data": [
                  {
                    "ty": {
                      "Base": {
                        "rep": 3
                      }
                    },
                    "term_var": {
                      "rep": 0
                    }
                  },
                  {
                    "ty": {
                      "Base": {
                        "rep": 0
                      }
                    },
                    "term_var": {
                      "rep": 1
                    }
                  },
                  {
                    "ty": "Id",
                    "term_var": {
                      "rep": 2
                    }
                  },
                  {
                    "ty": {
                      "Base": {
                        "rep": 0
                      }
                    },
                    "term_var": {
                      "rep": 3
                    }
                  },
                  {
                    "ty": "Id",
                    "term_var": {
                      "rep": 4
                    }
                  },
                  {
                    "ty": {
                      "Base": {
                        "rep": 3
                      }
                    },
                    "term_var": {
                      "rep": 5
                    }
                  },
                  {
                    "ty": {
                      "Base": {
                        "rep": 0
                      }
                    },
                    "term_var": {
                      "rep": 6
                    }
                  }
                ],
                "_marker": null
              },
              "atom_proofs": [],
              "atoms": [
                [
                  {
                    "rep": 1
                  },
                  [
                    {
                      "Var": {
                        "id": {
                          "rep": 0
                        },
                        "name": "x"
                      }
                    },
                    {
                      "Var": {
                        "id": {
                          "rep": 1
                        },
                        "name": "$left8"
                      }
                    },
                    {
                      "Var": {
                        "id": {
                          "rep": 2
                        },
                        "name": null
                      }
                    },
                    {
                      "Const": {
                        "val": {
                          "rep": 0
                        },
                        "ty": "Id"
                      }
                    }
                  ],
                  {
                    "tracing": false,
                    "subsume": true,
                    "func_cols": 2
                  }
                ],
                [
                  {
                    "rep": 2
                  },
                  [
                    {
                      "Var": {
                        "id": {
                          "rep": 0
                        },
                        "name": "x"
                      }
                    },
                    {
                      "Var": {
                        "id": {
                          "rep": 3
                        },
                        "name": "$right9"
                      }
                    },
                    {
                      "Var": {
                        "id": {
                          "rep": 4
                        },
                        "name": null
                      }
                    },
                    {
                      "Const": {
                        "val": {
                          "rep": 0
                        },
                        "ty": "Id"
                      }
                    }
                  ],
                  {
                    "tracing": false,
                    "subsume": true,
                    "func_cols": 2
                  }
                ]
              ],
              "sole_focus": null,
              "seminaive": true,
              "plan_strategy": "Gj"
            },
            "cached_plan": {
              "plan": {
                "plan": {
                  "stages": {
                    "header": [
                      {
                        "atom": {
                          "rep": 0
                        }
                      },
                      {
                        "atom": {
                          "rep": 1
                        }
                      }
                    ],
                    "actions": {
                      "rep": 0
                    }
                  }
                },
                "desc": "(rule ((left x)\n       (right x))\n      ((left (+ x 1)))\n        :ruleset step-left )",
                "actions": {}
              },
              "atom_mapping": [
                {
                  "rep": 0
                },
                {
                  "rep": 1
                }
              ]
            },
            "desc": "(rule ((left x)\n       (right x))\n      ((left (+ x 1)))\n        :ruleset step-left )"
          },
          {
            "last_run_at": {
              "rep": 21
            },
            "query": {
              "uf_table": {
                "rep": 0
              },
              "id_counter": {
                "rep": 0
              },
              "ts_counter": {
                "rep": 2
              },
              "tracing": false,
              "rule_id": {
                "rep": 3
              },
              "vars": {
                "data": [
                  {
                    "ty": {
                      "Base": {
                        "rep": 3
                      }
                    },
                    "term_var": {
                      "rep": 0
                    }
                  },
                  {
                    "ty": {
                      "Base": {
                        "rep": 0
                      }
                    },
                    "term_var": {
                      "rep": 1
                    }
                  },
                  {
                    "ty": "Id",
                    "term_var": {
                      "rep": 2
                    }
                  },
                  {
                    "ty": {
                      "Base": {
                        "rep": 3
                      }
                    },
                    "term_var": {
                      "rep": 3
                    }
                  },
                  {
                    "ty": {
                      "Base": {
                        "rep": 0
                      }
                    },
                    "term_var": {
                      "rep": 4
                    }
                  },
                  {
                    "ty": "Id",
                    "term_var": {
                      "rep": 5
                    }
                  },
                  {
                    "ty": {
                      "Base": {
                        "rep": 0
                      }
                    },
                    "term_var": {
                      "rep": 6
                    }
                  }
                ],
                "_marker": null
              },
              "atom_proofs": [],
              "atoms": [
                [
                  {
                    "rep": 1
                  },
                  [
                    {
                      "Var": {
                        "id": {
                          "rep": 0
                        },
                        "name": "$+18"
                      }
                    },
                    {
                      "Var": {
                        "id": {
                          "rep": 1
                        },
                        "name": "$left16"
                      }
                    },
                    {
                      "Var": {
                        "id": {
                          "rep": 2
                        },
                        "name": null
                      }
                    },
                    {
                      "Const": {
                        "val": {
                          "rep": 0
                        },
                        "ty": "Id"
                      }
                    }
                  ],
                  {
                    "tracing": false,
                    "subsume": true,
                    "func_cols": 2
                  }
                ],
                [
                  {
                    "rep": 2
                  },
                  [
                    {
                      "Var": {
                        "id": {
                          "rep": 3
                        },
                        "name": "y"
                      }
                    },
                    {
                      "Var": {
                        "id": {
                          "rep": 4
                        },
                        "name": "$right17"
                      }
                    },
                    {
                      "Var": {
                        "id": {
                          "rep": 5
                        },
                        "name": null
                      }
                    },
                    {
                      "Const": {
                        "val": {
                          "rep": 0
                        },
                        "ty": "Id"
                      }
                    }
                  ],
                  {
                    "tracing": false,
                    "subsume": true,
                    "func_cols": 2
                  }
                ]
              ],
              "sole_focus": null,
              "seminaive": true,
              "plan_strategy": "Gj"
            },
            "cached_plan": {
              "plan": {
                "plan": {
                  "stages": {
                    "header": [
                      {
                        "atom": {
                          "rep": 0
                        }
                      },
                      {
                        "atom": {
                          "rep": 1
                        }
                      }
                    ],
                    "actions": {
                      "rep": 0
                    }
                  }
                },
                "desc": "(rule ((left x)\n       (right y)\n       (= x (+ y 1)))\n      ((right x))\n        :ruleset step-right )",
                "actions": {}
              },
              "atom_mapping": [
                {
                  "rep": 0
                },
                {
                  "rep": 1
                }
              ]
            },
            "desc": "(rule ((left x)\n       (right y)\n       (= x (+ y 1)))\n      ((right x))\n        :ruleset step-right )"
          },
          null
        ],
        "_marker": null
      },
      "free": [
        {
          "rep": 4
        }
      ]
    },
    "funcs": {
      "data": [
        {
          "table": {
            "rep": 1
          },
          "schema": [
            {
              "Base": {
                "rep": 3
              }
            },
            {
              "Base": {
                "rep": 0
              }
            }
          ],
          "incremental_rebuild_rules": [],
          "nonincremental_rebuild_rule": {
            "rep": 0
          },
          "default_val": {
            "Const": {
              "rep": 0
            }
          },
          "can_subsume": true,
          "name": "left"
        },
        {
          "table": {
            "rep": 2
          },
          "schema": [
            {
              "Base": {
                "rep": 3
              }
            },
            {
              "Base": {
                "rep": 0
              }
            }
          ],
          "incremental_rebuild_rules": [],
          "nonincremental_rebuild_rule": {
            "rep": 1
          },
          "default_val": {
            "Const": {
              "rep": 0
            }
          },
          "can_subsume": true,
          "name": "right"
        }
      ],
      "_marker": null
    },
    "panic_message": null,
    "panic_funcs": {
      "Illegal merge attempted for function left": {
        "rep": 102
      },
      "Illegal merge attempted for function right": {
        "rep": 103
      }
    },
    "proof_specs": {
      "data": [
        "CongRow"
      ],
      "_marker": null
    },
    "cong_spec": {
      "rep": 0
    },
    "reason_tables": {},
    "term_tables": {},
    "tracing": false
  },
  "parser": {
    "user_defined": [],
    "symbol_gen": {
      "count": 36,
      "reserved_string": "$"
    }
  },
  "names": {
    "step-left": {
      "Egglog": {
        "file": {
          "name": "tests/web-demo/schedule-demo.egg",
          "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
        },
        "i": 114,
        "j": 133
      }
    },
    "right": {
      "Egglog": {
        "file": {
          "name": "tests/web-demo/schedule-demo.egg",
          "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
        },
        "i": 70,
        "j": 92
      }
    },
    "left": {
      "Egglog": {
        "file": {
          "name": "tests/web-demo/schedule-demo.egg",
          "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
        },
        "i": 48,
        "j": 69
      }
    },
    "step-right": {
      "Egglog": {
        "file": {
          "name": "tests/web-demo/schedule-demo.egg",
          "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
        },
        "i": 211,
        "j": 231
      }
    }
  },
  "pushed_egraph": null,
  "functions": {
    "left": {
      "decl": {
        "name": "left",
        "subtype": "Relation",
        "schema": {
          "input": [
            "i64"
          ],
          "output": "Unit"
        },
        "merge": null,
        "cost": null,
        "unextractable": true,
        "ignore_viz": false,
        "span": {
          "Egglog": {
            "file": {
              "name": "tests/web-demo/schedule-demo.egg",
              "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
            },
            "i": 48,
            "j": 69
          }
        }
      },
      "schema": {
        "input": [
          {
            "BaseSortImpl": null
          }
        ],
        "output": {
          "BaseSortImpl": null
        }
      },
      "can_subsume": true,
      "backend_id": {
        "rep": 0
      }
    },
    "right": {
      "decl": {
        "name": "right",
        "subtype": "Relation",
        "schema": {
          "input": [
            "i64"
          ],
          "output": "Unit"
        },
        "merge": null,
        "cost": null,
        "unextractable": true,
        "ignore_viz": false,
        "span": {
          "Egglog": {
            "file": {
              "name": "tests/web-demo/schedule-demo.egg",
              "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
            },
            "i": 70,
            "j": 92
          }
        }
      },
      "schema": {
        "input": [
          {
            "BaseSortImpl": null
          }
        ],
        "output": {
          "BaseSortImpl": null
        }
      },
      "can_subsume": true,
      "backend_id": {
        "rep": 1
      }
    }
  },
  "rulesets": {
    "": {
      "Rules": {}
    },
    "step-left": {
      "Rules": {
        "(rule ((left x)\n       (right x))\n      ((left (+ x 1)))\n        :ruleset step-left )": [
          {
            "span": {
              "Egglog": {
                "file": {
                  "name": "tests/web-demo/schedule-demo.egg",
                  "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                },
                "i": 134,
                "j": 209
              }
            },
            "body": {
              "atoms": [
                {
                  "span": {
                    "Egglog": {
                      "file": {
                        "name": "tests/web-demo/schedule-demo.egg",
                        "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                      },
                      "i": 141,
                      "j": 149
                    }
                  },
                  "head": {
                    "Func": {
                      "name": "left",
                      "subtype": "Relation",
                      "input": [
                        {
                          "BaseSortImpl": null
                        }
                      ],
                      "output": {
                        "BaseSortImpl": null
                      }
                    }
                  },
                  "args": [
                    {
                      "Var": [
                        {
                          "Egglog": {
                            "file": {
                              "name": "tests/web-demo/schedule-demo.egg",
                              "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                            },
                            "i": 147,
                            "j": 148
                          }
                        },
                        {
                          "name": "x",
                          "sort": {
                            "BaseSortImpl": null
                          },
                          "is_global_ref": false
                        }
                      ]
                    },
                    {
                      "Var": [
                        {
                          "Egglog": {
                            "file": {
                              "name": "tests/web-demo/schedule-demo.egg",
                              "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                            },
                            "i": 141,
                            "j": 149
                          }
                        },
                        {
                          "name": "$left8",
                          "sort": {
                            "BaseSortImpl": null
                          },
                          "is_global_ref": false
                        }
                      ]
                    }
                  ]
                },
                {
                  "span": {
                    "Egglog": {
                      "file": {
                        "name": "tests/web-demo/schedule-demo.egg",
                        "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                      },
                      "i": 150,
                      "j": 159
                    }
                  },
                  "head": {
                    "Func": {
                      "name": "right",
                      "subtype": "Relation",
                      "input": [
                        {
                          "BaseSortImpl": null
                        }
                      ],
                      "output": {
                        "BaseSortImpl": null
                      }
                    }
                  },
                  "args": [
                    {
                      "Var": [
                        {
                          "Egglog": {
                            "file": {
                              "name": "tests/web-demo/schedule-demo.egg",
                              "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                            },
                            "i": 157,
                            "j": 158
                          }
                        },
                        {
                          "name": "x",
                          "sort": {
                            "BaseSortImpl": null
                          },
                          "is_global_ref": false
                        }
                      ]
                    },
                    {
                      "Var": [
                        {
                          "Egglog": {
                            "file": {
                              "name": "tests/web-demo/schedule-demo.egg",
                              "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                            },
                            "i": 150,
                            "j": 159
                          }
                        },
                        {
                          "name": "$right9",
                          "sort": {
                            "BaseSortImpl": null
                          },
                          "is_global_ref": false
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "head": [
              {
                "Let": [
                  {
                    "Egglog": {
                      "file": {
                        "name": "tests/web-demo/schedule-demo.egg",
                        "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                      },
                      "i": 174,
                      "j": 181
                    }
                  },
                  {
                    "name": "$+10",
                    "sort": {
                      "BaseSortImpl": null
                    },
                    "is_global_ref": false
                  },
                  {
                    "Primitive": {
                      "primitive": {
                        "id": {
                          "rep": 7
                        }
                      },
                      "input": [
                        {
                          "BaseSortImpl": null
                        },
                        {
                          "BaseSortImpl": null
                        }
                      ],
                      "output": {
                        "BaseSortImpl": null
                      }
                    }
                  },
                  [
                    {
                      "Var": [
                        {
                          "Egglog": {
                            "file": {
                              "name": "tests/web-demo/schedule-demo.egg",
                              "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                            },
                            "i": 177,
                            "j": 178
                          }
                        },
                        {
                          "name": "x",
                          "sort": {
                            "BaseSortImpl": null
                          },
                          "is_global_ref": false
                        }
                      ]
                    },
                    {
                      "Literal": [
                        {
                          "Egglog": {
                            "file": {
                              "name": "tests/web-demo/schedule-demo.egg",
                              "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                            },
                            "i": 179,
                            "j": 180
                          }
                        },
                        {
                          "Int": 1
                        }
                      ]
                    }
                  ]
                ]
              },
              {
                "Let": [
                  {
                    "Egglog": {
                      "file": {
                        "name": "tests/web-demo/schedule-demo.egg",
                        "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                      },
                      "i": 168,
                      "j": 182
                    }
                  },
                  {
                    "name": "$left11",
                    "sort": {
                      "BaseSortImpl": null
                    },
                    "is_global_ref": false
                  },
                  {
                    "Func": {
                      "name": "left",
                      "subtype": "Relation",
                      "input": [
                        {
                          "BaseSortImpl": null
                        }
                      ],
                      "output": {
                        "BaseSortImpl": null
                      }
                    }
                  },
                  [
                    {
                      "Var": [
                        {
                          "Egglog": {
                            "file": {
                              "name": "tests/web-demo/schedule-demo.egg",
                              "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                            },
                            "i": 174,
                            "j": 181
                          }
                        },
                        {
                          "name": "$+10",
                          "sort": {
                            "BaseSortImpl": null
                          },
                          "is_global_ref": false
                        }
                      ]
                    }
                  ]
                ]
              }
            ]
          },
          {
            "rep": 2
          }
        ]
      }
    },
    "step-right": {
      "Rules": {
        "(rule ((left x)\n       (right y)\n       (= x (+ y 1)))\n      ((right x))\n        :ruleset step-right )": [
          {
            "span": {
              "Egglog": {
                "file": {
                  "name": "tests/web-demo/schedule-demo.egg",
                  "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                },
                "i": 232,
                "j": 317
              }
            },
            "body": {
              "atoms": [
                {
                  "span": {
                    "Egglog": {
                      "file": {
                        "name": "tests/web-demo/schedule-demo.egg",
                        "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                      },
                      "i": 239,
                      "j": 247
                    }
                  },
                  "head": {
                    "Func": {
                      "name": "left",
                      "subtype": "Relation",
                      "input": [
                        {
                          "BaseSortImpl": null
                        }
                      ],
                      "output": {
                        "BaseSortImpl": null
                      }
                    }
                  },
                  "args": [
                    {
                      "Var": [
                        {
                          "Egglog": {
                            "file": {
                              "name": "tests/web-demo/schedule-demo.egg",
                              "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                            },
                            "i": 263,
                            "j": 270
                          }
                        },
                        {
                          "name": "$+18",
                          "sort": {
                            "BaseSortImpl": null
                          },
                          "is_global_ref": false
                        }
                      ]
                    },
                    {
                      "Var": [
                        {
                          "Egglog": {
                            "file": {
                              "name": "tests/web-demo/schedule-demo.egg",
                              "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                            },
                            "i": 239,
                            "j": 247
                          }
                        },
                        {
                          "name": "$left16",
                          "sort": {
                            "BaseSortImpl": null
                          },
                          "is_global_ref": false
                        }
                      ]
                    }
                  ]
                },
                {
                  "span": {
                    "Egglog": {
                      "file": {
                        "name": "tests/web-demo/schedule-demo.egg",
                        "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                      },
                      "i": 248,
                      "j": 257
                    }
                  },
                  "head": {
                    "Func": {
                      "name": "right",
                      "subtype": "Relation",
                      "input": [
                        {
                          "BaseSortImpl": null
                        }
                      ],
                      "output": {
                        "BaseSortImpl": null
                      }
                    }
                  },
                  "args": [
                    {
                      "Var": [
                        {
                          "Egglog": {
                            "file": {
                              "name": "tests/web-demo/schedule-demo.egg",
                              "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                            },
                            "i": 255,
                            "j": 256
                          }
                        },
                        {
                          "name": "y",
                          "sort": {
                            "BaseSortImpl": null
                          },
                          "is_global_ref": false
                        }
                      ]
                    },
                    {
                      "Var": [
                        {
                          "Egglog": {
                            "file": {
                              "name": "tests/web-demo/schedule-demo.egg",
                              "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                            },
                            "i": 248,
                            "j": 257
                          }
                        },
                        {
                          "name": "$right17",
                          "sort": {
                            "BaseSortImpl": null
                          },
                          "is_global_ref": false
                        }
                      ]
                    }
                  ]
                },
                {
                  "span": {
                    "Egglog": {
                      "file": {
                        "name": "tests/web-demo/schedule-demo.egg",
                        "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                      },
                      "i": 263,
                      "j": 270
                    }
                  },
                  "head": {
                    "Primitive": {
                      "primitive": {
                        "id": {
                          "rep": 7
                        }
                      },
                      "input": [
                        {
                          "BaseSortImpl": null
                        },
                        {
                          "BaseSortImpl": null
                        }
                      ],
                      "output": {
                        "BaseSortImpl": null
                      }
                    }
                  },
                  "args": [
                    {
                      "Var": [
                        {
                          "Egglog": {
                            "file": {
                              "name": "tests/web-demo/schedule-demo.egg",
                              "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                            },
                            "i": 266,
                            "j": 267
                          }
                        },
                        {
                          "name": "y",
                          "sort": {
                            "BaseSortImpl": null
                          },
                          "is_global_ref": false
                        }
                      ]
                    },
                    {
                      "Literal": [
                        {
                          "Egglog": {
                            "file": {
                              "name": "tests/web-demo/schedule-demo.egg",
                              "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                            },
                            "i": 268,
                            "j": 269
                          }
                        },
                        {
                          "Int": 1
                        }
                      ]
                    },
                    {
                      "Var": [
                        {
                          "Egglog": {
                            "file": {
                              "name": "tests/web-demo/schedule-demo.egg",
                              "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                            },
                            "i": 263,
                            "j": 270
                          }
                        },
                        {
                          "name": "$+18",
                          "sort": {
                            "BaseSortImpl": null
                          },
                          "is_global_ref": false
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "head": [
              {
                "LetAtomTerm": [
                  {
                    "Egglog": {
                      "file": {
                        "name": "tests/web-demo/schedule-demo.egg",
                        "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                      },
                      "i": 263,
                      "j": 270
                    }
                  },
                  {
                    "name": "x",
                    "sort": {
                      "BaseSortImpl": null
                    },
                    "is_global_ref": false
                  },
                  {
                    "Var": [
                      {
                        "Egglog": {
                          "file": {
                            "name": "tests/web-demo/schedule-demo.egg",
                            "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                          },
                          "i": 263,
                          "j": 270
                        }
                      },
                      {
                        "name": "$+18",
                        "sort": {
                          "BaseSortImpl": null
                        },
                        "is_global_ref": false
                      }
                    ]
                  }
                ]
              },
              {
                "Let": [
                  {
                    "Egglog": {
                      "file": {
                        "name": "tests/web-demo/schedule-demo.egg",
                        "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                      },
                      "i": 280,
                      "j": 289
                    }
                  },
                  {
                    "name": "$right19",
                    "sort": {
                      "BaseSortImpl": null
                    },
                    "is_global_ref": false
                  },
                  {
                    "Func": {
                      "name": "right",
                      "subtype": "Relation",
                      "input": [
                        {
                          "BaseSortImpl": null
                        }
                      ],
                      "output": {
                        "BaseSortImpl": null
                      }
                    }
                  },
                  [
                    {
                      "Var": [
                        {
                          "Egglog": {
                            "file": {
                              "name": "tests/web-demo/schedule-demo.egg",
                              "contents": "; Step with alternating feet, left before right\n(relation left (i64))\n(relation right (i64))\n\n(left 0)\n(right 0)\n\n(ruleset step-left)\n(rule ((left x) (right x))\n      ((left (+ x 1)))\n      :ruleset step-left)\n\n(ruleset step-right)\n(rule ((left x) (right y) (= x (+ y 1)))\n      ((right x))\n      :ruleset step-right)\n\n(run-schedule\n      (repeat 10\n            (saturate step-right)\n            (saturate step-left)))\n\n; We took 10 steps with the left, but the right couldn't go the first round,\n; so we took only 9 steps with the right.\n(check (left 10))\n(check (right 9))\n(fail (check (left 11)))\n(fail (check (right 10)))\n"
                            },
                            "i": 287,
                            "j": 288
                          }
                        },
                        {
                          "name": "x",
                          "sort": {
                            "BaseSortImpl": null
                          },
                          "is_global_ref": false
                        }
                      ]
                    }
                  ]
                ]
              }
            ]
          },
          {
            "rep": 3
          }
        ]
      }
    }
  },
  "fact_directory": null,
  "seminaive": true,
  "type_info": {
    "sorts": {
      "BigInt": {
        "BaseSortImpl": null
      },
      "String": {
        "BaseSortImpl": null
      },
      "Unit": {
        "BaseSortImpl": null
      },
      "BigRat": {
        "BaseSortImpl": null
      },
      "i64": {
        "BaseSortImpl": null
      },
      "f64": {
        "BaseSortImpl": null
      },
      "bool": {
        "BaseSortImpl": null
      }
    },
    "primitives": {
      "bigrat": [
        {
          "id": {
            "rep": 86
          }
        }
      ],
      "replace": [
        {
          "id": {
            "rep": 1
          }
        }
      ],
      "!=": [
        {
          "id": {
            "rep": 98
          }
        }
      ],
      "ordering-min": [
        {
          "id": {
            "rep": 100
          }
        }
      ],
      "to-f64": [
        {
          "id": {
            "rep": 46
          }
        },
        {
          "id": {
            "rep": 89
          }
        }
      ],
      "bool->=": [
        {
          "id": {
            "rep": 27
          }
        },
        {
          "id": {
            "rep": 70
          }
        }
      ],
      "|": [
        {
          "id": {
            "rep": 13
          }
        },
        {
          "id": {
            "rep": 56
          }
        }
      ],
      "+": [
        {
          "id": {
            "rep": 0
          }
        },
        {
          "id": {
            "rep": 7
          }
        },
        {
          "id": {
            "rep": 32
          }
        },
        {
          "id": {
            "rep": 50
          }
        },
        {
          "id": {
            "rep": 75
          }
        }
      ],
      ">=": [
        {
          "id": {
            "rep": 22
          }
        },
        {
          "id": {
            "rep": 42
          }
        },
        {
          "id": {
            "rep": 65
          }
        },
        {
          "id": {
            "rep": 97
          }
        }
      ],
      "to-string": [
        {
          "id": {
            "rep": 30
          }
        },
        {
          "id": {
            "rep": 48
          }
        },
        {
          "id": {
            "rep": 73
          }
        }
      ],
      "abs": [
        {
          "id": {
            "rep": 45
          }
        },
        {
          "id": {
            "rep": 82
          }
        }
      ],
      "denom": [
        {
          "id": {
            "rep": 88
          }
        }
      ],
      "pow": [
        {
          "id": {
            "rep": 90
          }
        }
      ],
      "bool-=": [
        {
          "id": {
            "rep": 23
          }
        },
        {
          "id": {
            "rep": 66
          }
        }
      ],
      "sqrt": [
        {
          "id": {
            "rep": 92
          }
        }
      ],
      ">": [
        {
          "id": {
            "rep": 20
          }
        },
        {
          "id": {
            "rep": 40
          }
        },
        {
          "id": {
            "rep": 63
          }
        },
        {
          "id": {
            "rep": 95
          }
        }
      ],
      "log": [
        {
          "id": {
            "rep": 91
          }
        }
      ],
      "bits": [
        {
          "id": {
            "rep": 61
          }
        }
      ],
      "count-matches": [
        {
          "id": {
            "rep": 31
          }
        }
      ],
      "floor": [
        {
          "id": {
            "rep": 83
          }
        }
      ],
      "max": [
        {
          "id": {
            "rep": 29
          }
        },
        {
          "id": {
            "rep": 44
          }
        },
        {
          "id": {
            "rep": 72
          }
        },
        {
          "id": {
            "rep": 80
          }
        }
      ],
      "ceil": [
        {
          "id": {
            "rep": 84
          }
        }
      ],
      "value-eq": [
        {
          "id": {
            "rep": 99
          }
        }
      ],
      "and": [
        {
          "id": {
            "rep": 3
          }
        }
      ],
      "-": [
        {
          "id": {
            "rep": 8
          }
        },
        {
          "id": {
            "rep": 33
          }
        },
        {
          "id": {
            "rep": 51
          }
        },
        {
          "id": {
            "rep": 76
          }
        }
      ],
      "^": [
        {
          "id": {
            "rep": 14
          }
        },
        {
          "id": {
            "rep": 37
          }
        },
        {
          "id": {
            "rep": 57
          }
        }
      ],
      "bigint": [
        {
          "id": {
            "rep": 49
          }
        }
      ],
      "/": [
        {
          "id": {
            "rep": 10
          }
        },
        {
          "id": {
            "rep": 35
          }
        },
        {
          "id": {
            "rep": 53
          }
        },
        {
          "id": {
            "rep": 78
          }
        }
      ],
      "not-i64": [
        {
          "id": {
            "rep": 17
          }
        }
      ],
      "to-i64": [
        {
          "id": {
            "rep": 47
          }
        }
      ],
      "<<": [
        {
          "id": {
            "rep": 15
          }
        },
        {
          "id": {
            "rep": 58
          }
        }
      ],
      "numer": [
        {
          "id": {
            "rep": 87
          }
        }
      ],
      "cbrt": [
        {
          "id": {
            "rep": 93
          }
        }
      ],
      "log2": [
        {
          "id": {
            "rep": 18
          }
        }
      ],
      "ordering-max": [
        {
          "id": {
            "rep": 101
          }
        }
      ],
      "&": [
        {
          "id": {
            "rep": 12
          }
        },
        {
          "id": {
            "rep": 55
          }
        }
      ],
      "%": [
        {
          "id": {
            "rep": 11
          }
        },
        {
          "id": {
            "rep": 36
          }
        },
        {
          "id": {
            "rep": 54
          }
        }
      ],
      "not": [
        {
          "id": {
            "rep": 2
          }
        }
      ],
      "<=": [
        {
          "id": {
            "rep": 21
          }
        },
        {
          "id": {
            "rep": 41
          }
        },
        {
          "id": {
            "rep": 64
          }
        },
        {
          "id": {
            "rep": 96
          }
        }
      ],
      "neg": [
        {
          "id": {
            "rep": 38
          }
        },
        {
          "id": {
            "rep": 81
          }
        }
      ],
      "round": [
        {
          "id": {
            "rep": 85
          }
        }
      ],
      "xor": [
        {
          "id": {
            "rep": 5
          }
        }
      ],
      "bool-<": [
        {
          "id": {
            "rep": 24
          }
        },
        {
          "id": {
            "rep": 67
          }
        }
      ],
      "=>": [
        {
          "id": {
            "rep": 6
          }
        }
      ],
      "*": [
        {
          "id": {
            "rep": 9
          }
        },
        {
          "id": {
            "rep": 34
          }
        },
        {
          "id": {
            "rep": 52
          }
        },
        {
          "id": {
            "rep": 77
          }
        }
      ],
      ">>": [
        {
          "id": {
            "rep": 16
          }
        },
        {
          "id": {
            "rep": 59
          }
        }
      ],
      "bool->": [
        {
          "id": {
            "rep": 25
          }
        },
        {
          "id": {
            "rep": 68
          }
        }
      ],
      "min": [
        {
          "id": {
            "rep": 28
          }
        },
        {
          "id": {
            "rep": 43
          }
        },
        {
          "id": {
            "rep": 71
          }
        },
        {
          "id": {
            "rep": 79
          }
        }
      ],
      "or": [
        {
          "id": {
            "rep": 4
          }
        }
      ],
      "bool-<=": [
        {
          "id": {
            "rep": 26
          }
        },
        {
          "id": {
            "rep": 69
          }
        }
      ],
      "<": [
        {
          "id": {
            "rep": 19
          }
        },
        {
          "id": {
            "rep": 39
          }
        },
        {
          "id": {
            "rep": 62
          }
        },
        {
          "id": {
            "rep": 94
          }
        }
      ],
      "not-Z": [
        {
          "id": {
            "rep": 60
          }
        }
      ],
      "from-string": [
        {
          "id": {
            "rep": 74
          }
        }
      ]
    },
    "func_types": {
      "left": {
        "name": "left",
        "subtype": "Relation",
        "input": [
          {
            "BaseSortImpl": null
          }
        ],
        "output": {
          "BaseSortImpl": null
        }
      },
      "right": {
        "name": "right",
        "subtype": "Relation",
        "input": [
          {
            "BaseSortImpl": null
          }
        ],
        "output": {
          "BaseSortImpl": null
        }
      }
    },
    "global_sorts": {}
  },
  "overall_run_report": {
    "updated": true,
    "search_and_apply_time_per_rule": {
      "(rule ((left x)\n       (right x))\n      ((left (+ x 1)))\n        :ruleset step-left )": {
        "secs": 0,
        "nanos": 17125
      },
      "(rule ((left x)\n       (right y)\n       (= x (+ y 1)))\n      ((right x))\n        :ruleset step-right )": {
        "secs": 0,
        "nanos": 52416
      }
    },
    "num_matches_per_rule": {
      "(rule ((left x)\n       (right x))\n      ((left (+ x 1)))\n        :ruleset step-left )": 10,
      "(rule ((left x)\n       (right y)\n       (= x (+ y 1)))\n      ((right x))\n        :ruleset step-right )": 55
    },
    "search_and_apply_time_per_ruleset": {
      "step-right": {
        "secs": 0,
        "nanos": 178541
      },
      "step-left": {
        "secs": 0,
        "nanos": 76667
      }
    },
    "merge_time_per_ruleset": {
      "step-right": {
        "secs": 0,
        "nanos": 48502
      },
      "step-left": {
        "secs": 0,
        "nanos": 50540
      }
    },
    "rebuild_time_per_ruleset": {
      "step-right": {
        "secs": 0,
        "nanos": 77418
      },
      "step-left": {
        "secs": 0,
        "nanos": 84375
      }
    }
  },
  "schedulers": {
    "data": [],
    "_marker": null
  },
  "commands": {}
}